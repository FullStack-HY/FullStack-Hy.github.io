{"componentChunkName":"component---src-templates-content-template-js","path":"/osa3/node_js_ja_express","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Siirrämme tässä osassa fokuksen backendiin eli palvelimella olevaan toiminnallisuuteen.</p>\n<p>Backendin toteutusympäristönä käytämme <a href=\"https://nodejs.org/en/\">Node.js</a>:ää, joka on melkein missä vaan, erityisesti palvelimilla ja omalla koneellasikin toimiva Googlen <a href=\"https://developers.google.com/v8/\">V8</a>-JavaScript-moottoriin perustuva JavaScriptin suoritusympäristö.</p>\n<p>Kurssimateriaalia tehtäessä on ollut käytössä Node.js:n versio <i>v18.13.02</i>. Suosittelen, että omasi on vähintään yhtä tuore (ks. komentoriviltä <em>node -v</em>).</p>\n<p>Kuten <a href=\"/osa1/java_scriptia\">osassa 1</a> todettiin, selaimet eivät vielä osaa kaikkia uusimpia JavaScriptin ominaisuuksia, ja siksi selainpuolen koodi täytyy kääntää eli <i>transpiloida</i> esim <a href=\"https://babeljs.io/\">Babel</a>:illa. Backendissa tilanne on kuitenkin toinen, koska uusin Node hallitsee riittävissä määrin myös JavaScriptin uusia versioita, joten suoritamme Nodella kirjoittamaamme koodia suoraan ilman transpilointivaihetta.</p>\n<p>Tavoitteenamme on tehdä <a href=\"/osa2\">osan 2</a> muistiinpanosovellukseen sopiva backend. Aloitetaan kuitenkin ensin perusteiden läpikäyminen toteuttamalla perinteinen \"hello world\" -sovellus.</p>\n<p><strong>Huomaa</strong>, että tässä osassa ja sen tehtävissä luotavat sovellukset eivät ole Reactia, eli emme käytä <i>create-react-app</i>-sovellusta tämän osan sovellusten rungon alustamiseen.</p>\n<p>Osassa 2 oli jo puhe <a href=\"/osa2/palvelimella_olevan_datan_hakeminen#npm\">npm</a>:stä, eli JavaScript-projektien hallintaan liittyvästä, alun perin Node-ekosysteemistä kotoisin olevasta työkalusta. </p>\n<p>Mennään sopivaan hakemistoon ja luodaan projektimme runko komennolla <em>npm init</em>. Vastaillaan kysymyksiin sopivasti, ja tuloksena on hakemiston juureen sijoitettu projektin tietoja kuvaava tiedosto <i>package.json</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"notebackend\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tiedosto määrittelee mm., että ohjelmamme käynnistyspiste on tiedosto <i>index.js</i>.</p>\n<p>Tehdään kenttään <i>scripts</i> pieni lisäys:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  // <span class=\"token punctuation\">..</span>.\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"node index.js\"</span>,</span>    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span>,\n  // <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Luodaan sitten sovelluksen ensimmäinen versio eli projektin juureen sijoitettava tiedosto <i>index.js</i> ja sille seuraava sisältö:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Voimme suorittaa ohjelman joko \"suoraan\" nodella, komentorivillä</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node index.js</code></pre></div>\n<p>tai <a href=\"https://docs.npmjs.com/misc/scripts\">npm-skriptinä</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> start</code></pre></div>\n<p>npm-skripti <i>start</i> toimii koska määrittelimme sen tiedostoon <i>package.json</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  // <span class=\"token punctuation\">..</span>.\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"node index.js\"</span>,\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span>,\n  // <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vaikka esim. projektin suorittaminen onnistuukin suoraan käyttämällä komentoa <em>node index.js</em>, on npm-projekteille suoritettavat operaatiot yleensä tapana määritellä nimenomaan npm-skripteinä.</p>\n<p>Oletusarvoinen <i>package.json</i> määrittelee valmiiksi myös toisen yleisesti käytetyn npm-skriptin eli <em>npm test</em>. Koska projektissamme ei ole vielä testikirjastoa, ei <em>npm test</em> kuitenkaan tee vielä muuta kuin suorittaa komennon</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Error: no test specified\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span></code></pre></div>\n<h3>Yksinkertainen web-palvelin</h3>\n<p>Muutetaan sovellus web-palvelimeksi:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3001</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Kun sovellus käynnistyy, konsoliin tulostuu</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Server running on port <span class=\"token number\">3001</span></code></pre></div>\n<p>Voimme avata selaimella osoitteessa <a href=\"http://localhost:3001\">http://localhost:3001</a> olevan vaatimattoman sovelluksemme:</p>\n<picture><img src=\"/static/8836d8c6a93e804f6cbc73ff4d89913b/5a190/1.png\" alt=\"selaimessa näkyy teksti Hello World\" srcset=\"/static/8836d8c6a93e804f6cbc73ff4d89913b/772e8/1.png 200w,\n/static/8836d8c6a93e804f6cbc73ff4d89913b/e17e5/1.png 400w,\n/static/8836d8c6a93e804f6cbc73ff4d89913b/5a190/1.png 800w,\n/static/8836d8c6a93e804f6cbc73ff4d89913b/c1b63/1.png 1200w,\n/static/8836d8c6a93e804f6cbc73ff4d89913b/52576/1.png 1412w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Palvelin toimii samalla tavalla riippumatta urlin loppuosasta, eli myös sivun <a href=\"http://localhost:3001/foo/bar\">http://localhost:3001/foo/bar</a> sisältö on sama.</p>\n<p><strong>HUOM:</strong> jos koneesi portti 3001 on jo jonkun sovelluksen käytössä, aiheuttaa käynnistäminen virheen:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> notes-backend@1.0.0 start /Users/mluukkai/opetus/_koodi_fs/3/luento/notes-backend\n<span class=\"token operator\">></span> node index.js\n\nServer running on port <span class=\"token number\">3001</span>\nevents.js:174\n      throw er<span class=\"token punctuation\">;</span> // Unhandled <span class=\"token string\">'error'</span> event\n      ^\n\nError: listen EADDRINUSE: address already <span class=\"token keyword\">in</span> use :::3001\n    at Server.setupListenHandle <span class=\"token punctuation\">[</span>as _listen2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>net.js:1280:14<span class=\"token punctuation\">)</span>\n    at listenInCluster <span class=\"token punctuation\">(</span>net.js:1378:12<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sulje portissa 3001 oleva sovellus (edellisessä osassa json-server käynnistettiin porttiin 3001) tai määrittele sovellukselle jokin toinen portti.</p>\n<p>Tarkastellaan koodia hiukan. Ensimmäinen rivi</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ottaa käyttöön Noden sisäänrakennetun <a href=\"https://nodejs.org/docs/latest-v8.x/api/http.html\">web-palvelimen</a> määrittelevän moduulin. Kyse on käytännössä samasta asiasta kuin mihin olemme selainpuolen koodissa tottuneet, mutta syntaksiltaan hieman erilaisessa muodossa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span></code></pre></div>\n<p>Selaimen puolella käytetään (nykyään) ES6:n moduuleita, eli moduulit määritellään <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\">exportilla</a> ja otetaan käyttöön <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">importilla</a>.</p>\n<p>Node.js kuitenkin käyttää ns. <a href=\"https://en.wikipedia.org/wiki/CommonJS\">CommonJS</a>-moduuleja. Syy tälle on siinä, että Node-ekosysteemillä oli tarve moduuleihin jo kauan ennen kuin JavaScript tuki moduuleja kielen tasolla. Node tukee myös ES-moduuleja, mutta koska tuki ei ole vielä kaikilta osin <a href=\"https://nodejs.org/api/esm.html#modules-ecmascript-modules\">täydellinen</a>, pitäydymme CommonJS-moduuleissa.</p>\n<p>CommonJS-moduulit toimivat melko samaan tapaan kuin ES6-moduulit, ainakin tämän kurssin tarpeiden puitteissa.</p>\n<p>Koodi jatkuu seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Koodi luo <a href=\"https://nodejs.org/docs/latest-v8.x/api/http.html\">http</a>-moduulin metodilla <em>createServer</em> web-palvelimen, jolle se rekisteröi <i>tapahtumankäsittelijän</i>, joka suoritetaan <i>jokaisen</i> osoitteen <a href=\"http://localhost:3001\">http://localhost:3001</a> alle tulevan HTTP-pyynnön yhteydessä.</p>\n<p>Pyyntöön vastataan statuskoodilla 200, asettamalla <i>Content-Type</i>-headerille arvo <i>text/plain</i> ja asettamalla palautettavan sivun sisällöksi merkkijono <i>Hello World</i>.</p>\n<p>Viimeiset rivit sitovat muuttujaan <em>app</em> sijoitetun http-palvelimen kuuntelemaan porttiin 3001 tulevia HTTP-pyyntöjä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3001</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Koska tällä kurssilla palvelimen rooli on pääasiassa tarjota frontille JSON-muotoista \"raakadataa\", muutetaan palvelinta siten, että se palauttaa kovakoodatun listan JSON-muotoisia muistiinpanoja:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> notes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    content<span class=\"token operator\">:</span> <span class=\"token string\">\"HTML is easy\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    content<span class=\"token operator\">:</span> <span class=\"token string\">\"Browser can execute only JavaScript\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    content<span class=\"token operator\">:</span> <span class=\"token string\">\"GET and POST are the most important methods of HTTP protocol\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">]</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  response<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3001</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Käynnistetään palvelin uudelleen (palvelin suljetaan painamalla konsolissa yhtä aikaa <em>ctrl</em> + <em>c</em>) ja refreshataan selain.</p>\n<p>Headerin <i>Content-Type</i> arvolla <i>application/json</i> kerrotaan, että kyse on JSON-muotoisesta datasta. Muuttujassa <em>notes</em> oleva taulukko muutetaan JSON-muotoon metodilla <em>JSON.stringify(notes)</em>.</p>\n<p>Kun avaamme selaimen, on tulostusasu sama kuin <a href=\"/osa2/palvelimella_olevan_datan_hakeminen\">osassa 2</a> käytetyn <a href=\"https://github.com/typicode/json-server\">json-serverin</a> tarjoamalla muistiinpanojen listalla:</p>\n<picture><img src=\"/static/b724a971f214d33e59fa91241517dea3/5a190/2new.png\" alt=\"Selain renderöi json-muotoisen datan\" srcset=\"/static/b724a971f214d33e59fa91241517dea3/772e8/2new.png 200w,\n/static/b724a971f214d33e59fa91241517dea3/e17e5/2new.png 400w,\n/static/b724a971f214d33e59fa91241517dea3/5a190/2new.png 800w,\n/static/b724a971f214d33e59fa91241517dea3/c1b63/2new.png 1200w,\n/static/b724a971f214d33e59fa91241517dea3/29007/2new.png 1600w,\n/static/b724a971f214d33e59fa91241517dea3/09b15/2new.png 1704w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Express</h3>\n<p>Palvelimen koodin tekeminen suoraan Noden sisäänrakennetun web-palvelimen <a href=\"https://nodejs.org/docs/latest-v8.x/api/http.html\">http</a>:n päälle on mahdollista. Se on kuitenkin työlästä, erityisesti jos sovellus kasvaa hieman isommaksi.</p>\n<p>Nodella tapahtuvaa web-sovellusten ohjelmointia helpottamaan onkin kehitelty useita <em>http</em>:tä miellyttävämmän ohjelmointirajapinnan tarjoavia kirjastoja. Näistä ylivoimaisesti suosituin on <a href=\"https://expressjs.com\">Express</a>.</p>\n<p>Otetaan Express käyttöön määrittelemällä se projektimme riippuvuudeksi komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express</code></pre></div>\n<p>Riippuvuus tulee nyt määritellyksi tiedostoon <i>package.json</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.18.2\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Riippuvuuden koodi asentuu kaikkien projektin riippuvuuksien tapaan projektin juuressa olevaan hakemistoon <i>node_modules</i>. Hakemistosta löytyy Expressin lisäksi suuri määrä muutakin tavaraa:</p>\n<picture><img src=\"/static/da4cca859c66e0bf7d064455a105ad49/5a190/4.png\" alt=\"komennon ls tulostama suuri määrä kirjastoja vastaavia hakemistoja\" srcset=\"/static/da4cca859c66e0bf7d064455a105ad49/772e8/4.png 200w,\n/static/da4cca859c66e0bf7d064455a105ad49/e17e5/4.png 400w,\n/static/da4cca859c66e0bf7d064455a105ad49/5a190/4.png 800w,\n/static/da4cca859c66e0bf7d064455a105ad49/c1b63/4.png 1200w,\n/static/da4cca859c66e0bf7d064455a105ad49/f868f/4.png 1382w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kyseessä ovat Expressin riippuvuudet ja niiden riippuvuudet jne. eli projektimme <a href=\"https://lexi-lambda.github.io/blog/2016/08/24/understanding-the-npm-dependency-model/\">transitiiviset riippuvuudet</a>.</p>\n<p>Projektiin asentui Expressin versio 4.18.2. </i>package.json:issa</i> versiomerkinnän edessä on väkänen, eli muoto on</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.18.2\"</span></code></pre></div>\n<p>npm:n yhteydessä käytetään ns. <a href=\"https://docs.npmjs.com/getting-started/semantic-versioning\">semanttista versiointia</a>. Merkintä <i>^4.18.2</i> tarkoittaa, että jos projektin riippuvuudet päivitetään, asennetaan Expressistä versio, joka on vähintään <i>4.18.2</i>, mutta asennetuksi voi tulla versio, jonka <i>patch</i> eli viimeinen numero tai <i>minor</i> eli keskimmäinen numero voi olla suurempi. Pääversio eli <i>major</i> täytyy kuitenkin olla edelleen sama.</p>\n<p>Voimme päivittää projektin riippuvuudet komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> update</code></pre></div>\n<p>Jos aloitamme projektin koodaamisen toisella koneella, saamme haettua ajantasaiset, <i>package.json</i>:in määrittelyn kanssa yhteensopivat riippuvuudet komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<p>Jos riippuvuuden <i>major</i>-versionumero ei muutu, uudempien versioiden pitäisi olla <a href=\"https://en.wikipedia.org/wiki/Backward_compatibility\">taaksepäin yhteensopivia</a>, eli jos ohjelmamme käyttäisi tulevaisuudessa esim. Expressin versiota 4.99.175, tässä osassa tehtävän koodin pitäisi edelleen toimia ilman muutoksia. Sen sijaan tulevaisuudessa joskus julkaistava Express 5.0.0 <a href=\"https://expressjs.com/en/guide/migrating-5.html\">voi sisältää</a> sellaisia muutoksia, että koodimme ei enää toimisi.</p>\n<h3>Web ja Express</h3>\n<p>Palataan taas sovelluksen ääreen ja muutetaan se muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> notes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h1>Hello World!&lt;/h1>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3001</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Jotta sovelluksen uusi versio saadaan käyttöön, on sovellus käynnistettävä uudelleen.</p>\n<p>Sovellus ei muutu paljoa. Heti alussa otetaan käyttöön <em>express</em>, joka on tällä kertaa <i>funktio</i>, jota kutsumalla luodaan muuttujaan <em>app</em> sijoitettava Express-sovellusta vastaava olio:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Seuraavaksi määritellään sovellukselle kaksi <i>routea</i>. Näistä ensimmäinen määrittelee tapahtumankäsittelijän, joka hoitaa sovelluksen juureen eli polkuun <i>/</i> tulevia HTTP GET -pyyntöjä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h1>Hello World!&lt;/h1>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tapahtumankäsittelijäfunktiolla on kaksi parametria. Näistä ensimmäinen eli <a href=\"http://expressjs.com/en/4x/api.html#req\">request</a> sisältää kaikki HTTP-pyynnön tiedot ja toisen parametrin <a href=\"http://expressjs.com/en/4x/api.html#res\">response</a>:n avulla määritellään, miten pyyntöön vastataan.</p>\n<p>Koodissa pyyntöön vastataan käyttäen <em>response</em>-olion metodia <a href=\"http://expressjs.com/en/4x/api.html#res.send\">send</a>, jonka kutsumisen seurauksena palvelin vastaa HTTP-pyyntöön lähettämällä selaimelle vastaukseksi <em>send</em>:in parametrina olevan merkkijonon <code>&#x3C;h1>Hello World!&#x3C;/h1></code>. Koska parametri on merkkijono, asettaa Express vastauksessa <i>Content-Type</i>-headerin arvoksi <i>text/html</i>. Statuskoodiksi tulee oletusarvoisesti 200. </p>\n<p>Asian voi varmistaa konsolin välilehdeltä <i>Network</i>:</p>\n<picture><img src=\"/static/db016b053153eda01c97cbc69270f934/5a190/5.png\" alt=\"Avattu network-tabi näyttää että palvelin vastaa statuskoodilla 200\" srcset=\"/static/db016b053153eda01c97cbc69270f934/772e8/5.png 200w,\n/static/db016b053153eda01c97cbc69270f934/e17e5/5.png 400w,\n/static/db016b053153eda01c97cbc69270f934/5a190/5.png 800w,\n/static/db016b053153eda01c97cbc69270f934/c1b63/5.png 1200w,\n/static/db016b053153eda01c97cbc69270f934/29007/5.png 1600w,\n/static/db016b053153eda01c97cbc69270f934/84a78/5.png 1832w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Routeista toinen määrittelee tapahtumankäsittelijän, joka hoitaa sovelluksen polkuun <i>/api/notes</i> tulevia HTTP GET -pyyntöjä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pyyntöön vastataan <em>response</em>-olion metodilla <a href=\"http://expressjs.com/en/4x/api.html#res.json\">json</a>, joka lähettää HTTP-pyynnön vastaukseksi parametrina olevaa JavaScript-olioa eli taulukkoa <em>notes</em> vastaavan JSON-muotoisen merkkijonon. Express asettaa headerin <i>Content-Type</i> arvoksi <i>application/json</i>.</p>\n<picture><img src=\"/static/4047d2049a560c6eecab5f91754b5bb2/5a190/6new.png\" alt=\"Selain renderöi json-muotoiset muistiinpanot\" srcset=\"/static/4047d2049a560c6eecab5f91754b5bb2/772e8/6new.png 200w,\n/static/4047d2049a560c6eecab5f91754b5bb2/e17e5/6new.png 400w,\n/static/4047d2049a560c6eecab5f91754b5bb2/5a190/6new.png 800w,\n/static/4047d2049a560c6eecab5f91754b5bb2/c1b63/6new.png 1200w,\n/static/4047d2049a560c6eecab5f91754b5bb2/29007/6new.png 1600w,\n/static/4047d2049a560c6eecab5f91754b5bb2/9efb3/6new.png 1894w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Pieni huomio JSON-muodossa palautettavasta datasta.</p>\n<p>Aiemmassa, pelkkää Nodea käyttämässä versiossa, jouduimme muuttamaan palautettavan datan JSON-muotoon metodilla <em>JSON.stringify</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Expressiä käytettäessä tämä ei ole tarpeen, sillä muunnos tapahtuu automaattisesti.</p>\n<p>Kannattaa huomata, että <a href=\"https://en.wikipedia.org/wiki/JSON\">JSON</a> on merkkijono, eikä JavaScript-olio kuten muuttuja <em>notes</em>.</p>\n<p>Seuraava interaktiivisessa <a href=\"https://nodejs.org/docs/latest-v8.x/api/repl.html\">node-repl</a>:issä suoritettu kokeilu havainnollistaa asiaa:</p>\n<picture><img src=\"/static/ab5b5f7c5d8e4b01881bbd927f04ed43/5a190/5.png\" alt=\"js-objekti muuttuu string-tyyppiseksi JSON.stringify-operaation seurauksena\" srcset=\"/static/ab5b5f7c5d8e4b01881bbd927f04ed43/772e8/5.png 200w,\n/static/ab5b5f7c5d8e4b01881bbd927f04ed43/e17e5/5.png 400w,\n/static/ab5b5f7c5d8e4b01881bbd927f04ed43/5a190/5.png 800w,\n/static/ab5b5f7c5d8e4b01881bbd927f04ed43/350de/5.png 998w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Saat käynnistettyä interaktiivisen node-repl:in kirjoittamalla komentoriville <em>node</em>. Komentojen toimivuutta on koodatessa kätevä kokeilla konsolissa, suosittelen!</p>\n<h3>nodemon</h3>\n<p>Jos muutamme sovelluksen koodia, joudumme ensin sulkemaan sovelluksen konsolista (<em>ctrl</em> + <em>c</em>) ja sitten käynnistämään sovelluksen uudelleen, jotta muutokset tulevat voimaan. Uudelleenkäynnistely tuntuu kömpelöltä verrattuna Reactin mukavaan workflow'hun, jossa selain päivittyi automaattisesti koodin muuttuessa.</p>\n<p>Ongelmaan on ratkaisu nimeltä <a href=\"https://github.com/remy/nodemon\">nodemon</a>:</p>\n<blockquote>\n<p><i>nodemon will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.</i></p>\n</blockquote>\n<p>Asennetaan nodemon määrittelemällä se <i>kehitysaikaiseksi riippuvuudeksi</i> (development dependency) komennolla:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev nodemon</code></pre></div>\n<p>Tiedoston <i>package.json</i> sisältö muuttuu seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.18.2\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"nodemon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.0.20\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jos nodemon-riippuvuus kuitenkin meni sovelluksessasi normaaliin \"dependencies\"-ryhmään, päivitä <i>package.json</i> manuaalisesti vastaamaan yllä näkyvää (kuitenkin versiot säilyttäen).</p>\n<p>Kehitysaikaisilla riippuvuuksilla tarkoitetaan työkaluja, joita tarvitaan ainoastaan sovellusta kehitettäessä esim. testaukseen tai sovelluksen automaattiseen uudelleenkäynnistykseen kuten <i>nodemon</i>.</p>\n<p>Kun sovellusta suoritetaan tuotantomoodissa eli samoin kuin sitä tullaan suorittamaan tuotantopalvelimella (esim. Fly.io:ssa, johon tulemme kohta siirtämään sovelluksemme), ei kehitysaikaisia riippuvuuksia tarvita.</p>\n<p>Voimme käynnistää ohjelman <i>nodemonilla</i> seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node_modules/.bin/nodemon index.js</code></pre></div>\n<p>Sovelluksen koodin muutokset aiheuttavat nyt automaattisen palvelimen uudelleenkäynnistymisen. Kannattaa huomata, että vaikka palvelin uudelleenkäynnistyy automaattisesti, selain täytyy kuitenkin refreshata, sillä toisin kuin Reactin yhteydessä, meillä ei nyt ole eikä tässä skenaariossa (jossa palautamme JSON-muotoista dataa) edes voisikaan olla selainta päivittävää <a href=\"https://gaearon.github.io/react-hot-loader/getstarted/\">hot reload</a> -toiminnallisuutta.</p>\n<p>Komento on ikävä, joten määritellään sitä varten <i>npm-skripti</i> tiedostoon <i>package.json</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  // <span class=\"token punctuation\">..</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"node index.js\"</span>,\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"dev\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"nodemon index.js\"</span>,</span>    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span>,\n  // <span class=\"token punctuation\">..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Skriptissä ei ole tarvetta käyttää nodemonin polusta sen täydellistä muotoa <i>node_modules/.bin/nodemon</i> sillä <em>npm</em> osaa etsiä automaattisesti suoritettavaa tiedostoa kyseisestä hakemistosta.</p>\n<p>Voimme nyt käynnistää palvelimen sovelluskehitysmoodissa komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>Toisin kuin skriptejä <i>start</i> tai <i>test</i> suoritettaessa, komennon tulee sisältää myös <i>run</i>.</p>\n<h3>REST</h3>\n<p>Laajennetaan sovellusta siten, että se toteuttaa samanlaisen RESTful-periaatteeseen nojaavan HTTP-rajapinnan kuin <a href=\"https://github.com/typicode/json-server#routes\">json-server</a>.</p>\n<p>Representational State Transfer eli REST on Roy Fieldingin vuonna 2000 ilmestyneessä <a href=\"https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\">väitöskirjassa</a> määritelty skaalautuvien web-sovellusten rakentamiseksi tarkoitettu arkkitehtuurityyli.</p>\n<p>Emme nyt rupea määrittelemään REST:iä fieldingiläisittäin tai rupea väittelemään siitä mitä REST on tai mitä se ei ole. Otamme hieman <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer#Applied_to_web_services\">kapeamman näkökulman</a>, jonka mukaan REST tai RESTful API:t yleensä tulkitaan web-sovelluksissa. Alkuperäinen REST-periaate ei sinänsä rajoitu web-sovelluksiin.</p>\n<p>Mainitsimme jo <a href=\"/osa2/palvelimella_olevan_datan_muokkaaminen#rest\">edellisessä osassa</a>, että yksittäisiä asioita, meidän tapauksessamme muistiinpanoja kutsutaan RESTful-ajattelussa <i>resursseiksi</i>. Jokaisella resurssilla on URL eli sen yksilöivä osoite.</p>\n<p>Erittäin yleinen konventio on muodostaa resurssien yksilöivät URLit liittäen resurssityypin nimi ja resurssin yksilöivä tunniste.</p>\n<p>Oletetaan, että palvelumme juuriosoite on <i>www.example.com/api</i>.</p>\n<p>Jos nimitämme muistiinpanoja <i>note</i>-resursseiksi, yksilöidään yksittäinen muistiinpano, jonka tunniste on 10 URLilla <i>www.example.com/api/notes/10</i>.</p>\n<p>Kaikkia muistiinpanoja edustavan kokoelmaresurssin URL taas on <i>www.example.com/api/notes</i>.</p>\n<p>Resursseille voi suorittaa erilaisia operaatiota. Suoritettavan operaation määrittelee HTTP-operaation tyyppi, jota kutsutaan usein myös <i>verbiksi</i>:</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>verbi</th>\n<th>toiminnallisuus</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>notes/10   </td>\n<td>GET</td>\n<td>hakee yksittäisen resurssin</td>\n</tr>\n<tr>\n<td>notes</td>\n<td>GET</td>\n<td>hakee kokoelman kaikki resurssit</td>\n</tr>\n<tr>\n<td>notes</td>\n<td>POST</td>\n<td>luo uuden resurssin pyynnön mukana olevasta datasta</td>\n</tr>\n<tr>\n<td>notes/10</td>\n<td>DELETE   </td>\n<td>poistaa yksilöidyn resurssin</td>\n</tr>\n<tr>\n<td>notes/10</td>\n<td>PUT</td>\n<td>korvaa yksilöidyn resurssin pyynnön mukana olevalla datalla</td>\n</tr>\n<tr>\n<td>notes/10</td>\n<td>PATCH</td>\n<td>korvaa yksilöidyn resurssin osan pyynnön mukana olevalla datalla</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Näin määrittyy suurin piirtein asia, jota REST kutsuu nimellä <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer#Architectural_constraints\">uniform interface</a>, eli jossain määrin yhtenäinen tapa määritellä rajapintoja, jotka mahdollistavat (tietyin tarkennuksin) järjestelmien yhteiskäytön.</p>\n<p>Tämänkaltaista tapaa tulkita REST:iä on nimitetty kolmiportaisella asteikolla <a href=\"https://martinfowler.com/articles/richardsonMaturityModel.html\">kypsyystason 2</a> REST:iksi. REST:in kehittäjän Roy Fieldingin mukaan tällöin kyseessä ei vielä ole ollenkaan asia, jota tulisi kutsua <a href=\"http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven\">REST API:ksi</a>. Valtaosa maailman \"REST\" API -rajapinnoista ei täytäkään puhdasverisen fieldingiläisen REST API:n määritelmää.</p>\n<p>Joissain yhteyksissä (ks. esim. <a href=\"http://shop.oreilly.com/product/9780596529260.do\">Richardson, Ruby: RESTful Web Services</a>) edellä esitellyn kaltaista suoraviivaisehkoa resurssien <a href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">CRUD</a>-tyylisen manipuloinnin mahdollistavaa API:a nimitetään REST:in sijaan <a href=\"https://en.wikipedia.org/wiki/Resource-oriented_architecture\">resurssipohjaiseksi</a> arkkitehtuurityyliksi. Emme nyt kuitenkaan takerru liian tarkasti määritelmällisiin asioihin vaan jatkamme sovelluksen parissa.</p>\n<h3>Yksittäisen resurssin haku</h3>\n<p>Laajennetaan nyt sovellusta siten, että se tarjoaa muistiinpanojen operointiin REST-rajapinnan. Tehdään ensin <a href=\"http://expressjs.com/en/guide/routing.html\">route</a> yksittäisen resurssin katsomista varten.</p>\n<p>Yksittäisen muistiinpanon identifioi URL, joka on muotoa <i>/api/notes/10</i>. Lopussa oleva luku vastaa resurssin muistiinpanon id:tä.</p>\n<p>Voimme määritellä Expressin routejen poluille <a href=\"http://expressjs.com/en/guide/routing.html\">parametreja</a> käyttämällä kaksoispistesyntaksia:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nyt <code>app.get('/api/notes/:id', ...)</code> käsittelee kaikki HTTP GET -pyynnöt, jotka ovat muotoa <i>/api/notes/JOTAIN</i>, jossa <i>JOTAIN</i> on mielivaltainen merkkijono.</p>\n<p>Polun parametrin <i>id</i> arvoon päästään käsiksi pyynnön tiedot kertovan olion <a href=\"http://expressjs.com/en/api.html#req\">request</a> kautta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id</code></pre></div>\n<p>Jo tutuksi tulleella taulukon <em>find</em>-metodilla haetaan taulukosta parametria vastaava muistiinpano ja palautetaan se pyynnön tekijälle.</p>\n<p>Kun sovellusta testataan menemällä selaimella osoitteeseen <a href=\"http://localhost:3001/api/notes/1\">http://localhost:3001/api/notes/1</a>, havaitaan että se ei toimi, vaan selain näyttää tyhjältä. Tämä on tietenkin softadevaajan arkipäivää, ja on ruvettava debuggaamaan.</p>\n<p>Vanha hyvä keino on alkaa lisäillä koodiin <em>console.log</em>-komentoja:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Kun selaimella mennään jälleen osoitteeseen <a href=\"http://localhost:3001/api/notes/1\">http://localhost:3001/api/notes/1</a>, konsoliin (eli siihen terminaaliin, johon sovellus on käynnistetty) tulostuu</p>\n<picture><img src=\"/static/7333b6dcc5a6e252178ee0bc4ed16db6/5a190/8.png\" alt=\"Konsoliin on tulostunut &#x27;server running in port 3000&#x27; lisäksi 1 ja undefined\" srcset=\"/static/7333b6dcc5a6e252178ee0bc4ed16db6/772e8/8.png 200w,\n/static/7333b6dcc5a6e252178ee0bc4ed16db6/e17e5/8.png 400w,\n/static/7333b6dcc5a6e252178ee0bc4ed16db6/5a190/8.png 800w,\n/static/7333b6dcc5a6e252178ee0bc4ed16db6/c1b63/8.png 1200w,\n/static/7333b6dcc5a6e252178ee0bc4ed16db6/58354/8.png 1396w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>eli halutun muistiinpanon id välittyy sovellukseen aivan oikein, mutta <em>find</em> komento ei löydä mitään.</p>\n<p>Päätetään tulostella konsoliin myös <em>find</em>-komennon sisällä olevasta vertailijafunktiosta, mikä onnistuu helposti kun tiiviissä muodossa oleva funktio <em>note => note.id === id</em> kirjoitetaan eksplisiittisen returnin sisältävässä muodossa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> id<span class=\"token punctuation\">,</span> note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Vierailtaessa jälleen yksittäisen muistiinpanon sivulla jokaisesta vertailufunktion kutsusta tulostetaan nyt monta asiaa. Konsolin tulostus on seuraava:</p>\n<pre>\n1 'number' '1' 'string' false\n2 'number' '1' 'string' false\n3 'number' '1' 'string' false\n</pre>\n<p>Ongelman syy selviää. Muuttujassa <em>id</em> on tallennettuna merkkijono '1' kun taas muistiinpanojen id:t ovat numeroita. JavaScriptissä === vertailu katsoo kaikki eri tyyppiset arvot oletusarvoisesti erisuuriksi, joten 1 ei ole '1'.</p>\n<p>Korjataan ongelma muuttamalla parametrina oleva merkkijonomuotoinen id <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">numeroksi</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nyt yksittäisen resurssin hakeminen toimii.</p>\n<picture><img src=\"/static/aacb793e1b5db50067b3057f79e83253/5a190/9new.png\" alt=\"Yksittäistä muistiinpanoa vastaava json renderöityy\" srcset=\"/static/aacb793e1b5db50067b3057f79e83253/772e8/9new.png 200w,\n/static/aacb793e1b5db50067b3057f79e83253/e17e5/9new.png 400w,\n/static/aacb793e1b5db50067b3057f79e83253/5a190/9new.png 800w,\n/static/aacb793e1b5db50067b3057f79e83253/c1b63/9new.png 1200w,\n/static/aacb793e1b5db50067b3057f79e83253/c2d9c/9new.png 1326w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Toiminnallisuuteen jää kuitenkin pieni ongelma. Jos haemme muistiinpanoa sellaisella indeksillä, jota vastaavaa muistiinpanoa ei ole olemassa, vastaa palvelin seuraavasti:</p>\n<picture><img src=\"/static/71dba69685a59c3d5249303257863366/5a190/10ea.png\" alt=\"Selaimeen ei renderöidy mitään, network-tab paljastaa että palvelin vastaa statuskoodilla 200\" srcset=\"/static/71dba69685a59c3d5249303257863366/772e8/10ea.png 200w,\n/static/71dba69685a59c3d5249303257863366/e17e5/10ea.png 400w,\n/static/71dba69685a59c3d5249303257863366/5a190/10ea.png 800w,\n/static/71dba69685a59c3d5249303257863366/c1b63/10ea.png 1200w,\n/static/71dba69685a59c3d5249303257863366/b1ffc/10ea.png 1492w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>HTTP-statuskoodi on onnistumisesta kertova 200. Vastaukseen ei liity dataa, sillä headerin <i>content-length</i> arvo on 0, ja samaa todistaa selain: mitään ei näy.</p>\n<p>Syynä tälle käyttäytymiselle on se, että muuttujan <em>note</em> arvoksi tulee <em>undefined</em> jos muistiinpanoa ei löydy. Tilanne tulee käsitellä palvelimella järkevämmin, eli statuskoodin 200 sijaan tulee vastata statuskoodilla <a href=\"https://www.rfc-editor.org/rfc/rfc9110.html#name-404-not-found\">404 not found</a>.</p>\n<p>Tehdään koodiin muutos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Koska vastaukseen ei nyt liity mitään dataa, käytetään statuskoodin asettavan metodin <a href=\"http://expressjs.com/en/4x/api.html#res.status\">status</a> lisäksi metodia <a href=\"http://expressjs.com/en/4x/api.html#res.end\">end</a> ilmoittamaan siitä, että pyyntöön tulee vastata ilman dataa.</p>\n<p>Koodin haarautumisessa hyväksikäytetään sitä, että mikä tahansa JavaScript-olio on <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\">truthy</a>, eli katsotaan todeksi vertailuoperaatiossa. <em>undefined</em> taas on <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsy</a> eli epätosi.</p>\n<p>Nyt sovellus palauttaa oikean virhekoodin. Sovellus ei kuitenkaan palauta mitään käyttäjälle näytettävää kuten web-sovellukset yleensä tekevät jos mennään osoitteeseen, jota ei ole olemassa. Emme kuitenkaan tarvitse nyt mitään näytettävää, sillä REST API:t ovat ohjelmalliseen käyttöön tarkoitettuja rajapintoja, ja pyyntöön liitetty virheestä kertova statuskoodi on riittävä.</p>\n<h3>Resurssin poisto</h3>\n<p>Toteutetaan seuraavaksi resurssin poistava route. Poisto tapahtuu tekemällä HTTP DELETE -pyyntö resurssin urliin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  notes <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Jos poisto onnistuu eli poistettava muistiinpano on olemassa, vastataan statuskoodilla <a href=\"https://www.rfc-editor.org/rfc/rfc9110.html#name-204-no-content\">204 no content</a> sillä mukaan ei lähetetä mitään dataa.</p>\n<p>Ei ole täyttä yksimielisyyttä siitä, mikä statuskoodi DELETE-pyynnöstä pitäisi palauttaa jos poistettavaa resurssia ei ole olemassa. Vaihtoehtoja ovat lähinnä 204 ja 404. Yksinkertaisuuden vuoksi sovellus palauttaa nyt molemmissa tilanteissa statuskoodin 204.</p>\n<h3>Postman</h3>\n<p>HTTP GET -pyyntöjä on helppo testata selaimessa, mutta miten voimme testata poisto-operaatioita? Voisimme toki kirjoittaa JavaScript-koodin, joka testaa deletointia, mutta jokaiseen mahdolliseen tilanteeseen testikoodinkaan tekeminen ei ole aina paras ratkaisu.</p>\n<p>On olemassa useita backendin testaamista helpottavia työkaluja, eräs näistä on <a href=\"https://www.postman.com/\">Postman</a>, jota käytämme tällä kurssilla.</p>\n<p>Asennetaan Postmanin desktop sovellus <a href=\"https://www.postman.com/downloads/\">täältä</a>  ja kokeillaan:</p>\n<p><picture><img src=\"/static/8ef43031f7f537bbf81f707122f282b3/5a190/11x.png\" alt=\"tehdään postmanilla operaatio DELETE http://localhost:3000/api/notes/1, huomataan että vastauksessa statuskoodi 204 no content\" srcset=\"/static/8ef43031f7f537bbf81f707122f282b3/772e8/11x.png 200w,\n/static/8ef43031f7f537bbf81f707122f282b3/e17e5/11x.png 400w,\n/static/8ef43031f7f537bbf81f707122f282b3/5a190/11x.png 800w,\n/static/8ef43031f7f537bbf81f707122f282b3/c1b63/11x.png 1200w,\n/static/8ef43031f7f537bbf81f707122f282b3/29007/11x.png 1600w,\n/static/8ef43031f7f537bbf81f707122f282b3/cb425/11x.png 1678w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture> </p>\n<p>Postmanin käyttö on tässä tilanteessa suhteellisen yksinkertaista, riittää määritellä url ja valita oikea pyyntötyyppi.</p>\n<p>Palvelin näyttää vastaavan oikein. Tekemällä HTTP GET osoitteeseen <a href=\"http://localhost:3001/api/notes\">http://localhost:3001/api/notes</a> selviää, että poisto-operaatio onnistui. Muistiinpanoa, jonka id on 2 ei ole enää listalla.</p>\n<p>Koska muistiinpanot on talletettu palvelimen muistiin, uudelleenkäynnistys palauttaa tilanteen ennalleen.</p>\n<h3>Visual Studio Coden REST client</h3>\n<p>Jos käytät Visual Studio Codea, voit Postmanin sijaan käyttää VS Coden\n<a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\">REST client</a> -pluginia.</p>\n<p>Kun plugin on asennettu, on sen käyttö erittäin helppoa. Tehdään projektin juureen hakemisto <i>requests</i>, jonka sisään talletetaan REST Client -pyynnöt <i>.rest</i>-päätteisinä tiedostoina.</p>\n<p>Luodaan kaikki muistiinpanot hakevan pyynnön määrittelevä tiedosto <i>get_all_notes.rest</i>:</p>\n<picture><img src=\"/static/9effbecbcd6ce412abb0f5d7a7abe26c/5a190/12ea.png\" alt=\"Luodaan tiedosto jonka sisältlö GET http://localhost:3000/api/notes\" srcset=\"/static/9effbecbcd6ce412abb0f5d7a7abe26c/772e8/12ea.png 200w,\n/static/9effbecbcd6ce412abb0f5d7a7abe26c/e17e5/12ea.png 400w,\n/static/9effbecbcd6ce412abb0f5d7a7abe26c/5a190/12ea.png 800w,\n/static/9effbecbcd6ce412abb0f5d7a7abe26c/c1b63/12ea.png 1200w,\n/static/9effbecbcd6ce412abb0f5d7a7abe26c/29007/12ea.png 1600w,\n/static/9effbecbcd6ce412abb0f5d7a7abe26c/161ec/12ea.png 1840w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Klikkaamalla tekstiä <i>Send Request</i>, REST client suorittaa määritellyn HTTP-pyynnön, ja palvelimen vastaus avautuu editoriin:</p>\n<picture><img src=\"/static/06e86fdc6ded068bcee8cc82011663b3/5a190/13new.png\" alt=\"VS codeen avautuu näkymä missä palvelimen palauttama json-muotoinen taulukko muistiinpanoja sekä operaatioon vastattu statuskoodi ja palautetut headerit\" srcset=\"/static/06e86fdc6ded068bcee8cc82011663b3/772e8/13new.png 200w,\n/static/06e86fdc6ded068bcee8cc82011663b3/e17e5/13new.png 400w,\n/static/06e86fdc6ded068bcee8cc82011663b3/5a190/13new.png 800w,\n/static/06e86fdc6ded068bcee8cc82011663b3/c1b63/13new.png 1200w,\n/static/06e86fdc6ded068bcee8cc82011663b3/29007/13new.png 1600w,\n/static/06e86fdc6ded068bcee8cc82011663b3/a7115/13new.png 2186w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Datan vastaanottaminen</h3>\n<p>Toteutetaan seuraavana uusien muistiinpanojen lisäys, joka siis tapahtuu tekemällä HTTP POST -pyyntö osoitteeseen <a href=\"http://localhost:3001/api/notes\">http://localhost:3001/api/notes</a> ja liittämällä pyynnön <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7\">bodyyn</a> luotavan muistiinpanon tiedot JSON-muodossa.</p>\n<p>Jotta pääsisimme pyynnön mukana lähetettyyn dataan helposti käsiksi, tarvitsemme Expressin tarjoaman <a href=\"https://expressjs.com/en/api.html\">json-parserin</a> apua. Tämä tapahtuu lisäämällä koodiin komento <em>app.use(express.json())</em>.</p>\n<p>Otetaan json-parseri käyttöön ja luodaan alustava määrittely HTTP POST -pyynnön käsittelyyn:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token comment\">//...</span>\n\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body</span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>Tapahtumankäsittelijäfunktio pääsee dataan käsiksi olion <em>request</em> kentän <i>body</i> avulla.</p>\n<p>Ilman json-parserin lisäämistä eli komentoa <em>app.use(express.json())</em> pyynnön kentän <i>body</i> arvo olisi ollut määrittelemätön. Json-parserin toimintaperiaatteena on, että se ottaa pyynnön mukana olevan JSON-muotoisen datan, muuttaa sen JavaScript-olioksi ja sijoittaa <em>request</em>-olion kenttään <i>body</i> ennen kuin routen käsittelijää kutsutaan.</p>\n<p>Toistaiseksi sovellus ei vielä tee vastaanotetulle datalle mitään muuta kuin tulostaa sen konsoliin ja palauttaa sen pyynnön vastauksessa.</p>\n<p>Ennen toimintalogiikan viimeistelyä varmistetaan ensin Postmanilla, että lähetetty tieto menee varmasti perille. Pyyntötyypin ja urlin lisäksi on määriteltävä myös pyynnön mukana menevä data eli <i>body</i>:</p>\n<picture><img src=\"/static/6163d953fe51415f5c5d82c801adf219/5a190/14new.png\" alt=\"Valitaan postmanissa JSON body-datan tyypiksi\" srcset=\"/static/6163d953fe51415f5c5d82c801adf219/772e8/14new.png 200w,\n/static/6163d953fe51415f5c5d82c801adf219/e17e5/14new.png 400w,\n/static/6163d953fe51415f5c5d82c801adf219/5a190/14new.png 800w,\n/static/6163d953fe51415f5c5d82c801adf219/c1b63/14new.png 1200w,\n/static/6163d953fe51415f5c5d82c801adf219/29007/14new.png 1600w,\n/static/6163d953fe51415f5c5d82c801adf219/fa60d/14new.png 1792w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Sovellus tulostaa lähetetyn vastaanottamansa datan terminaaliin:</p>\n<picture><img src=\"/static/0b3e370c5c28f0e566406c027e16d985/5a190/15e.png\" alt=\"Konsoliin tulostuu palvelimen vastaanottama json-objekti\" srcset=\"/static/0b3e370c5c28f0e566406c027e16d985/772e8/15e.png 200w,\n/static/0b3e370c5c28f0e566406c027e16d985/e17e5/15e.png 400w,\n/static/0b3e370c5c28f0e566406c027e16d985/5a190/15e.png 800w,\n/static/0b3e370c5c28f0e566406c027e16d985/73caa/15e.png 1110w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>HUOM:</strong> Kun ohjelmoit backendia, <i>pidä sovellusta suorittava konsoli koko ajan näkyvillä</i>. Nodemonin ansiosta sovellus käynnistyy uudelleen jos koodiin tehdään muutoksia. Jos seuraat konsolia, huomaat välittömästi jos sovelluksen koodiin tulee virhe:</p>\n<picture><img src=\"/static/c63c7735842ffb3d0c0315075daa8de6/5a190/16.png\" alt=\"konsoliin tulostuu epävalidista javascriptistä johtuva parse error -virheilmoitus\" srcset=\"/static/c63c7735842ffb3d0c0315075daa8de6/772e8/16.png 200w,\n/static/c63c7735842ffb3d0c0315075daa8de6/e17e5/16.png 400w,\n/static/c63c7735842ffb3d0c0315075daa8de6/5a190/16.png 800w,\n/static/c63c7735842ffb3d0c0315075daa8de6/c1b63/16.png 1200w,\n/static/c63c7735842ffb3d0c0315075daa8de6/d4b10/16.png 1394w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Konsolista kannattaa seurata myös, reagoiko backend odotetulla tavalla esim. kun sovellukselle lähetetään dataa metodilla HTTP POST. Backendiin kannattaa luonnollisesti lisäillä runsaat määrät <em>console.log</em>-komentoja kun sovellus on kehitysvaiheessa. </p>\n<p>Eräs ongelmanlähde on se, että dataa lähettäessä headerille <i>Content-Type</i> ei aseteta oikeaa arvoa. Näin tapahtuu esim. jos Postmanissa bodyn tyyppiä ei määritellä oikein:</p>\n<picture><img src=\"/static/b5a0cb0c86873d3779ab8950cde4fbe9/5a190/17new.png\" alt=\"Valitaan postmanissa text body-datan tyypiksi\" srcset=\"/static/b5a0cb0c86873d3779ab8950cde4fbe9/772e8/17new.png 200w,\n/static/b5a0cb0c86873d3779ab8950cde4fbe9/e17e5/17new.png 400w,\n/static/b5a0cb0c86873d3779ab8950cde4fbe9/5a190/17new.png 800w,\n/static/b5a0cb0c86873d3779ab8950cde4fbe9/c1b63/17new.png 1200w,\n/static/b5a0cb0c86873d3779ab8950cde4fbe9/29007/17new.png 1600w,\n/static/b5a0cb0c86873d3779ab8950cde4fbe9/e1250/17new.png 1786w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Headerin <i>Content-Type</i> arvoksi asettuu <i>text/plain</i>:</p>\n<picture><img src=\"/static/c46ba517cdf244b7584d13385a73db10/5a190/18new.png\" alt=\"Nähdään postmanin headers-välilehdeltä että content-type on text/plain\" srcset=\"/static/c46ba517cdf244b7584d13385a73db10/772e8/18new.png 200w,\n/static/c46ba517cdf244b7584d13385a73db10/e17e5/18new.png 400w,\n/static/c46ba517cdf244b7584d13385a73db10/5a190/18new.png 800w,\n/static/c46ba517cdf244b7584d13385a73db10/c1b63/18new.png 1200w,\n/static/c46ba517cdf244b7584d13385a73db10/29007/18new.png 1600w,\n/static/c46ba517cdf244b7584d13385a73db10/8454b/18new.png 1798w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Palvelin näyttää vastaanottavan ainoastaan tyhjän olion:</p>\n<picture><img src=\"/static/4cee49b52a0448271483fd6132526132/5a190/19.png\" alt=\"Konsoliin tulostuu tyhjä json\" srcset=\"/static/4cee49b52a0448271483fd6132526132/772e8/19.png 200w,\n/static/4cee49b52a0448271483fd6132526132/e17e5/19.png 400w,\n/static/4cee49b52a0448271483fd6132526132/5a190/19.png 800w,\n/static/4cee49b52a0448271483fd6132526132/c1b63/19.png 1200w,\n/static/4cee49b52a0448271483fd6132526132/e8814/19.png 1392w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Ilman oikeaa headerin arvoa palvelin ei osaa parsia dataa oikeaan muotoon. Se ei edes yritä arvailla missä muodossa data on, sillä potentiaalisia datan siirtomuotoja eli <i>Content-Typejä</i> on olemassa <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">suuri määrä</a>.</p>\n<p>Jos käytät VS Codea, edellisessä luvussa esitelty REST client kannattaa asentaa viimeistään <i>nyt</i>. POST-pyyntö tehdään REST clientillä seuraavasti:</p>\n<picture><img src=\"/static/f2b5195bb25610d68352f0753dc6a47a/5a190/20new.png\" alt=\"VS codeen avautuu näkymä joka näyttää palvelimen palauttaman, luodun json-objektin, sekä siihen liittyvät headerit ja statuskoodin 200\" srcset=\"/static/f2b5195bb25610d68352f0753dc6a47a/772e8/20new.png 200w,\n/static/f2b5195bb25610d68352f0753dc6a47a/e17e5/20new.png 400w,\n/static/f2b5195bb25610d68352f0753dc6a47a/5a190/20new.png 800w,\n/static/f2b5195bb25610d68352f0753dc6a47a/c1b63/20new.png 1200w,\n/static/f2b5195bb25610d68352f0753dc6a47a/29007/20new.png 1600w,\n/static/f2b5195bb25610d68352f0753dc6a47a/c658e/20new.png 2202w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Pyyntöä varten on siis luotu oma tiedosto <i>create_note.rest</i>. Pyyntö on muotoiltu <a href=\"https://github.com/Huachao/vscode-restclient/blob/master/README.md#usage\">dokumentaation ohjetta</a> noudatellen.</p>\n<p>REST clientin eräs suuri etu Postmaniin verrattuna on se, että pyynnöt saa kätevästi talletettua projektin repositorioon ja tällöin ne ovat helposti koko kehitystiimin käytössä. Postmanillakin on mahdollista tallettaa pyyntöjä, mutta tilanne menee helposti kaoottiseksi etenkin jos työn alla on useita toisistaan riippumattomia projekteja.</p>\n<blockquote>\n<p><strong>Tärkeä sivuhuomio</strong></p>\n<p>Välillä debugatessa tulee vastaan tilanteita, joissa backendissä on tarve selvittää, mitä headereja HTTP-pyynnöille on asetettu. Eräs menetelmä tähän on <em>request</em>-olion melko kehnosti nimetty metodi <a href=\"http://expressjs.com/en/4x/api.html#req.get\">get</a>, jonka avulla voi selvittää yksittäisen headerin arvon. <em>request</em>-oliolla on myös kenttä <i>headers</i>, jonka arvona ovat kaikki pyyntöön liittyvät headerit.</p>\n<p>Ongelmia voi syntyä esim., jos jätät vahingossa VS Coden REST clientillä ylimmän rivin ja headerit määrittelevien rivien väliin tyhjän rivin. Tällöin REST client tulkitsee, että millekään headerille ei aseteta arvoa ja näin backend ei osaa tulkita pyynnön mukana olevaa dataa JSON:iksi.</p>\n<p>Puuttuvan <i>Content-Type</i>-headerin ongelma selviää, kun backendissa tulostaa pyynnön headerit esim. komennolla <em>console.log(request.headers)</em>.</p>\n</blockquote>\n<p>Palataan taas sovelluksen pariin. Kun tiedämme, että sovellus vastaanottaa tiedon oikein, voimme viimeistellä sovelluslogiikan:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> maxId <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n    <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n  note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> maxId <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n  notes <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Uudelle muistiinpanolle tarvitaan uniikki id. Ensin selvitetään olemassa olevista id:istä suurin muuttujaan <em>maxId</em>. Uuden muistiinpanon id:ksi asetetaan sitten <em>maxId + 1</em>. Tämä tapa ei ole kovin hyvä, mutta emme nyt välitä siitä, sillä tulemme pian korvaamaan tavan, jolla muistiinpanot talletetaan.</p>\n<p>Tämänhetkisessä versiossa on vielä se ongelma, että voimme HTTP POST -pyynnöllä lisätä mitä tahansa kenttiä sisältäviä olioita. Parannellaan sovellusta siten, että kenttä <i>content</i> ei saa olla tyhjä. Kentälle <i>important</i> asetetaan oletusarvo false jos sen arvoa ei ole määritelty. Kaikki muut kentät hylätään:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> maxId <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n    <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> maxId <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n      error<span class=\"token operator\">:</span> <span class=\"token string\">'content missing'</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token function\">generateId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  notes <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tunnisteena toimivan id-kentän arvon generointilogiikka on eriytetty funktioon <em>generateId</em>.</p>\n<p>Jos vastaanotetulta datalta puuttuu sisältö kentästä <i>content</i>, vastataan statuskoodilla <a href=\"https://www.rfc-editor.org/rfc/rfc9110.html#name-400-bad-request\">400 bad request</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n    error<span class=\"token operator\">:</span> <span class=\"token string\">'content missing'</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Huomaa, että returnin kutsuminen on tärkeää. Ilman kutsua koodi jatkaisi suoritusta metodin loppuun asti, ja virheellinen muistiinpano tallettuisi!</p>\n<p>Jos content-kentällä on arvo, luodaan muistiinpano syötteen perusteella. Jos kenttä <i>important</i> puuttuu, asetetaan sille oletusarvo <i>false</i>. Oletusarvo generoidaan nyt hieman erikoisella tavalla:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Jos sovelluksen vastaanottamassa muuttujaan <em>body</em> talletetussa datassa on kenttä <i>important</i>, tulee lausekkeelle sen arvo. Jos kenttää ei ole olemassa, tulee lausekkeen arvoksi oikeanpuoleinen osa eli <i>false</i>.</p>\n<blockquote>\n<p>Jos ollaan tarkkoja, niin kentän <i>important</i> arvon ollessa <i>false</i>, tulee lausekkeen <em>body.important || false</em> arvoksi oikean puoleinen <i>false</i>...</p>\n</blockquote>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part3-1\">GitHubissa</a>.</p>\n<p>Tämän hetken koodi on branchissa <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part3-1\">part3-1</a>:</p>\n<picture><img src=\"/static/9b6ccc6beb80d632e0c9c12d2436c9b4/5a190/21.png\" alt=\"Kuva havainnollistaa miten branchi löydetään githubista\" srcset=\"/static/9b6ccc6beb80d632e0c9c12d2436c9b4/772e8/21.png 200w,\n/static/9b6ccc6beb80d632e0c9c12d2436c9b4/e17e5/21.png 400w,\n/static/9b6ccc6beb80d632e0c9c12d2436c9b4/5a190/21.png 800w,\n/static/9b6ccc6beb80d632e0c9c12d2436c9b4/c1b63/21.png 1200w,\n/static/9b6ccc6beb80d632e0c9c12d2436c9b4/29007/21.png 1600w,\n/static/9b6ccc6beb80d632e0c9c12d2436c9b4/11864/21.png 2034w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Jos kloonaat projektin itsellesi, suorita komento <em>npm install</em> ennen käynnistämistä eli ennen komentoa <em>npm start</em> tai <em>npm run dev</em>.</p>\n<p>Vielä pieni huomio ennen tehtäviä. Uuden id:n generoiva funktio näyttää seuraavalta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> maxId <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n    <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> maxId <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Koodi sisältää hieman erikoisen näköisen rivin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Mitä rivillä tapahtuu? <em>notes.map(n => n.id)</em> muodostaa taulukon, joka koostuu muistiinpanojen id-kentistä. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max\">Math.max</a> palauttaa maksimin sille parametrina annetuista luvuista. <em>notes.map(n => n.id)</em> on kuitenkin <i>taulukko</i>, joten se ei kelpaa parametriksi komennolle <em>Math.max</em>. Taulukko voidaan muuttaa yksittäisiksi luvuiksi käyttäen taulukon <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread</a>-syntaksia, eli kolmea pistettä <em>...taulukko</em>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtävät 3.1.-3.6.</h3>\n<p><strong>HUOM:</strong> tämän osan tehtäväsarja kannattaa tehdä omaan Git-repositorioon ja suoraan repositorion juureen! Jos et tee näin, joudut ongelmiin tehtävässä 3.10</p>\n<p><strong>HUOM2:</strong> Koska nyt ei ole kyse frontendista ja Reactista, sovellusta <strong>ei luoda</strong> create-react-app:illa vaan komennolla <em>npm init</em>, kuten ylempänä tämän osan materiaalissa.</p>\n<p><strong>Vahva suositus:</strong> kun teet backendin koodia, pidä koko ajan silmällä, mitä palvelimen koodia suorittavassa konsolissa tapahtuu.</p>\n<h4>3.1 puhelinluettelon backend step1</h4>\n<p>Tee Node-sovellus, joka tarjoaa osoitteessa <a href=\"http://localhost:3001/api/persons\">http://localhost:3001/api/persons</a> kovakoodatun taulukon puhelinnumerotietoja:</p>\n<picture><img src=\"/static/a4879a92f2a8bd2e96c6d67fe3f34383/5a190/22e.png\" alt=\"Selain renderöi taulukollisen json-muotoisia objekteja joilla kentät id, name ja number\" srcset=\"/static/a4879a92f2a8bd2e96c6d67fe3f34383/772e8/22e.png 200w,\n/static/a4879a92f2a8bd2e96c6d67fe3f34383/e17e5/22e.png 400w,\n/static/a4879a92f2a8bd2e96c6d67fe3f34383/5a190/22e.png 800w,\n/static/a4879a92f2a8bd2e96c6d67fe3f34383/e6c84/22e.png 1148w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Sovellus pitää pystyä käynnistämään komennolla <em>npm start</em>.</p>\n<p>Komennolla <em>npm run dev</em> käynnistettäessa sovelluksen tulee käynnistyä uudelleen, kun koodiin tehdään muutoksia.</p>\n<h4>3.2: puhelinluettelon backend step2</h4>\n<p>Tee sovelluksen osoitteeseen <a href=\"http://localhost:3001/info\">http://localhost:3001/info</a> suunnilleen seuraavanlainen sivu</p>\n<picture><img src=\"/static/26383e4e706a7f89c140690121be2ea1/5a190/23x.png\" alt=\"Selin renderöi kutsuhetken kellonajan sekä tekstin &#x27;Phonebook has info for 2 people&#x27;\" srcset=\"/static/26383e4e706a7f89c140690121be2ea1/772e8/23x.png 200w,\n/static/26383e4e706a7f89c140690121be2ea1/e17e5/23x.png 400w,\n/static/26383e4e706a7f89c140690121be2ea1/5a190/23x.png 800w,\n/static/26383e4e706a7f89c140690121be2ea1/c1b63/23x.png 1200w,\n/static/26383e4e706a7f89c140690121be2ea1/669eb/23x.png 1244w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Sivun tulee siis kertoa pyynnön tekohetki sekä se, kuinka monta puhelinluettelotietoa sovelluksen muistissa olevassa taulukossa on.</p>\n<h4>3.3: puhelinluettelon backend step3</h4>\n<p>Toteuta toiminnallisuus yksittäisen puhelinnumerotiedon näyttämiseen. Esim. id:n 5 omaavan numerotiedon url on <a href=\"http://localhost:3001/api/persons/5\">http://localhost:3001/api/persons/5</a></p>\n<p>Jos id:tä vastaavaa puhelinnumerotietoa ei ole, tulee palvelimen vastata asianmukaisella statuskoodilla.</p>\n<h4>3.4: puhelinluettelon backend step4</h4>\n<p>Toteuta toiminnallisuus, jonka avulla puhelinnumerotieto on mahdollista poistaa numerotiedon yksilöivään URL:iin tehtävällä HTTP DELETE -pyynnöllä.</p>\n<p>Testaa toiminnallisuus Postmanilla tai Visual Studio Coden REST clientillä.</p>\n<h4>3.5: puhelinluettelon backend step5</h4>\n<p>Laajenna backendia siten, että uusia puhelintietoja on mahdollista lisätä osoitteeseen <a href=\"http://localhost:3001/api/persons\">http://localhost:3001/api/persons</a> tapahtuvalla HTTP POST -pyynnöllä.</p>\n<p>Generoi uuden puhelintiedon tunniste funktiolla <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\">Math.random</a>. Käytä riittävän isoa arvoväliä, jotta arvottu id on riittävän suurella todennäköisyydellä sellainen, joka ei ole jo käytössä.</p>\n<h4>3.6: puhelinluettelon backend step6</h4>\n<p>Tee uuden numeron lisäykseen virheiden käsittely. Pyyntö ei saa onnistua, jos</p>\n<ul>\n<li>nimi tai numero puuttuu</li>\n<li>lisättävä nimi on jo luettelossa</li>\n</ul>\n<p>Vastaa asiaankuuluvalla statuskoodilla ja liitä vastaukseen mukaan myös tieto, joka kertoo virheen syyn, esim.:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'name must be unique'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</div>\n<div class=\"content\">\n<h3>Huomioita HTTP-pyyntötyyppien käytöstä</h3>\n<p><a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\">HTTP-standardi</a> puhuu pyyntötyyppien yhteydessä kahdesta ominaisuudesta, <strong>safe</strong> ja <strong>idempotent</strong>.</p>\n<p>HTTP-pyynnöistä GET:in tulisi olla <i>safe</i>:</p>\n<blockquote>\n<p><i>In particular, the convention has been established that the GET and HEAD methods SHOULD NOT have the significance of taking an action other than retrieval. These methods ought to be considered \"safe\".</i></p>\n</blockquote>\n<p>Safety tarkoittaa siis, että pyynnön suorittaminen ei saa aiheuttaa palvelimelle <i>sivuvaikutuksia</i> eli esim. muuttaa palvelimen tietokannan tilaa. Pyynnön tulee ainoastaan palauttaa palvelimella olevaa dataa.</p>\n<p>Mikään ei automaattisesti takaa, että GET-pyynnöt olisivat luonteeltaan <i>safe</i>. Kyseessä onkin HTTP-standardin suositus palvelimien toteuttajille. RESTful-periaatetta noudattaessa GET-pyyntöjä käytetäänkin aina siten, että ne ovat safe.</p>\n<p>HTTP-standardi määrittelee myös pyyntötyypin <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.4\">HEAD</a>, jonka tulee olla safe. Käytännössä HEAD:in tulee toimia kuten GET, mutta se ei palauta vastauksenaan muuta kuin statuskoodin ja headerit. Viestin bodyä HEAD ei palauta ollenkaan.</p>\n<p>HTTP-pyynnöistä muiden paitsi POST:in tulisi olla <i>idempotentteja</i>:</p>\n<blockquote>\n<p><i>Methods can also have the property of \"idempotence\" in that (aside from error or expiration issues) the side-effects of N > 0 identical requests is the same as for a single request. The methods GET, HEAD, PUT and DELETE share this property</i></p>\n</blockquote>\n<p>Eli jos pyynnöllä on sivuvaikutuksia, lopputulos on sama suoritettaessa pyyntö yhden tai useamman kerran.</p>\n<p>Esim. jos tehdään HTTP PUT -pyyntö osoitteeseen <i>/api/notes/10</i> ja pyynnön mukana on <em>{ content: \"ei sivuvaikutuksia\", important: true }</em>, on lopputulos sama riippumatta siitä, kuinka monta kertaa pyyntö suoritetaan.</p>\n<p>Kuten metodin GET <i>safety</i> myös <i>idempotence</i> on HTTP-standardin suositus palvelimien toteuttajille. RESTful-periaatetta noudattaessa GET-, HEAD-, PUT- ja DELETE-pyyntöjä käytetäänkin aina siten, että ne ovat idempotentteja.</p>\n<p>HTTP-pyyntötyypeistä POST on ainoa, joka ei ole <i>safe</i> eikä <i>idempotent</i>. Jos tehdään viisi kertaa HTTP POST -pyyntö osoitteeseen <i>/api/notes</i> siten että pyynnön mukana on <em>{ content: \"monta samaa\", important: true }</em>, tulee palvelimelle viisi saman sisältöistä muistiinpanoa.</p>\n<h3>Middlewaret</h3>\n<p>Äsken käyttöönottamamme Expressin <a href=\"https://expressjs.com/en/api.html\">json-parseri</a> on terminologiassa niin sanottu <a href=\"http://expressjs.com/en/guide/using-middleware.html\">middleware</a>.</p>\n<p>Middlewaret ovat funktioita, joiden avulla voidaan käsitellä <em>request</em>- ja <em>response</em>-olioita.</p>\n<p>Esim. json-parseri ottaa pyynnön mukana tulevan raakadatan <em>request</em>-oliosta, parsii sen JavaScript-olioksi ja sijoittaa olion <em>request</em>:in kenttään <i>body</i></p>\n<p>Middlewareja voi olla käytössä useita, jolloin ne suoritetaan peräkkäin siinä järjestyksessä, kuin ne on otettu koodissa käyttöön.</p>\n<p>Toteutetaan itse yksinkertainen middleware, joka tulostaa konsoliin palvelimelle tulevien pyyntöjen perustietoja.</p>\n<p>Middleware on funktio, joka saa kolme parametria:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestLogger</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Method:'</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Path:  '</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Body:  '</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Middleware kutsuu lopussa parametrina olevaa funktiota <em>next</em>, jolla se siirtää kontrollin seuraavalle middlewarelle.</p>\n<p>Middleware otetaan käyttöön seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>requestLogger<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Middlewaret suoritetaan siinä järjestyksessä, jossa ne on otettu käyttöön sovellusolion metodilla <em>use</em>. Huomaa, että json-parseri tulee ottaa käyttöön ennen middlewarea <em>requestLogger</em>, muuten <i>request.body</i> ei ole vielä alustettu loggeria suoritettaessa!</p>\n<p>Middlewaret tulee ottaa käyttöön ennen routeja, jos ne halutaan suorittaa ennen niitä. On myös eräitä tapauksia, joissa middleware tulee määritellä vasta routejen jälkeen. Käytännössä tällöin on kyse middlewareista, joita suoritetaan vain, jos mikään route ei käsittele HTTP-pyyntöä.</p>\n<p>Lisätään <i>routejen jälkeen</i> seuraava middleware, jonka ansiosta saadaan routejen käsittelemättömistä virhetilanteista JSON-muotoinen virheilmoitus:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unknownEndpoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'unknown endpoint'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>unknownEndpoint<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sovelluksen tämän hetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part3-2\">GitHubissa</a>, branchissa <i>part3-2</i>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtävät 3.7.-3.8.</h3>\n<h4>3.7: puhelinluettelon backend step7</h4>\n<p>Lisää sovellukseesi loggausta tekevä middleware <a href=\"https://github.com/expressjs/morgan\">morgan</a>. Konfiguroi se logaamaan konsoliin <i>tiny</i>-konfiguraation mukaisesti.</p>\n<p>Morganin ohjeet eivät ole ehkä kaikkein selvimmät, ja joudut kenties miettimään hiukan. Toisaalta juuri koskaan dokumentaatio ei ole aivan itsestäänselvää, joten kryptisempiäkin asioita on hyvä oppia tulkitsemaan.</p>\n<p>Morgan asennetaan kuten muutkin kirjastot, eli komennolla <em>npm install</em> ja sen käyttöönotto tapahtuu kaikkien middlewarejen tapaan komennolla <em>app.use</em></p>\n<h4>3.8*: puhelinluettelon backend step8</h4>\n<p>Konfiguroi morgania siten, että se näyttää myös HTTP POST -pyyntöjen mukana tulevan datan:</p>\n<picture><img src=\"/static/4ed4b48465d48df517158501c0be187e/5a190/24.png\" alt=\"Konsoliin tulostuu HTTP-pyntötyyppi, kutsuttu polku, paluuarvon statuskoodi, operaation viemä aika millisekunteina (tämä on morganin defaultina näyttämä) sekä pyynnön mukana mahdollisesti lähetetty data\" srcset=\"/static/4ed4b48465d48df517158501c0be187e/772e8/24.png 200w,\n/static/4ed4b48465d48df517158501c0be187e/e17e5/24.png 400w,\n/static/4ed4b48465d48df517158501c0be187e/5a190/24.png 800w,\n/static/4ed4b48465d48df517158501c0be187e/c1b63/24.png 1200w,\n/static/4ed4b48465d48df517158501c0be187e/78612/24.png 1260w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Tämä tehtävä on kohtuullisen haastava, vaikka koodia ei tarvitakaan paljoa. </p>\n<p>Tehtävän voi tehdä muutamallakin tavalla. Eräs näistä onnistuu hyödyntämällä seuraavia:</p>\n<ul>\n<li><a href=\"https://github.com/expressjs/morgan#creating-new-tokens\">creating new tokens</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON.stringify</a></li>\n</ul>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8ac7bc0fb2b7018a7853b00c454b2103/part-3.svg"},"part":3,"letter":"a","lang":"fi"}}},"pageContext":{"part":3,"letter":"a","lang":"fi"}},"staticQueryHashes":["3128451518"]}