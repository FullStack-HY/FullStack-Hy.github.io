{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part3/validacion_y_es_lint","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Por lo general, existen restricciones que queremos aplicar a los datos que se almacenan en la base de datos de nuestra aplicación. Nuestra aplicación no debe aceptar notas que tengan una propiedad <i>content</i> vacía o faltante. La validez de la nota se comprueba en el controlador de ruta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>content <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'content missing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si la nota no tiene la propiedad <i>content</i>, respondemos a la solicitud con el código de estado <i>400 bad request</i>.</p>\n<p>Una forma más inteligente de validar el formato de los datos antes de que se almacenen en la base de datos es utilizar la funcionalidad de <a href=\"https://mongoosejs.com/docs/validation.html\">validación</a> disponible en Mongoose.</p>\n<p>Podemos definir reglas de validación específicas para cada campo en el esquema:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> noteSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>  important<span class=\"token operator\">:</span> Boolean\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El campo <i>content</i> ahora se requiere tener al menos cinco caracteres de longitud. El campo <i>date</i> se establece como requerido, lo que significa que no puede faltar. La misma restricción también se aplica al campo <i>content</i>, ya que la restricción de longitud mínima permite que falte el campo. No hemos agregado ninguna restricción al campo <i>important</i>, por lo que su definición en el esquema no ha cambiado.</p>\n<p>Los validadores <i>minlength</i> y <i>required</i> están <a href=\"https://mongoosejs.com/docs/validation.html#built-in-validators\">integrados</a> y proporcionados por Mongoose. La funcionalidad del <a href=\"https://mongoosejs.com/docs/validation.html#custom-validators\">validador personalizado</a> de Mongoose nos permite crear nuevos validadores, si ninguno de los integrados cubre nuestras necesidades.</p>\n<p>Si intentamos almacenar un objeto en la base de datos que rompe una de las restricciones, la operación lanzará una excepción. Cambiemos nuestro controlador para crear una nueva nota para que pase las posibles excepciones al middleware del controlador de errores:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">savedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Expandamos el controlador de errores para tratar estos errores de validación:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cuando falla la validación de un objeto, devolvemos el siguiente mensaje de error predeterminado de Mongoose:</p>\n<picture><img src=\"/static/6beb35ed56d2e06e0eda3e36dea9f426/5a190/50.png\" srcset=\"/static/6beb35ed56d2e06e0eda3e36dea9f426/772e8/50.png 200w,\n/static/6beb35ed56d2e06e0eda3e36dea9f426/e17e5/50.png 400w,\n/static/6beb35ed56d2e06e0eda3e36dea9f426/5a190/50.png 800w,\n/static/6beb35ed56d2e06e0eda3e36dea9f426/c1b63/50.png 1200w,\n/static/6beb35ed56d2e06e0eda3e36dea9f426/29007/50.png 1600w,\n/static/6beb35ed56d2e06e0eda3e36dea9f426/1e1c3/50.png 1670w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Promise chaining</h3>\n<p>Muchos de los controladores de ruta cambiaron los datos de respuesta al formato correcto llamando al método <em>toJSON</em>. Cuando creamos una nueva nota, se llamó al método <em>toJSON</em> para el objeto pasado como parámetro a <em>then</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">savedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Podemos lograr la misma funcionalidad de una manera mucho más limpia con el <a href=\"https://javascript.info/promise-chaining\">encadenamiento de promesas</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  note\n    <span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">savedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> savedNote<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">savedAndFormattedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedAndFormattedNote<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> </span>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>En el primer <em>then</em> recibimos el objeto <em>savedNote</em> devuelto por la Mongoose y formateado. Se retprna el resultado de la operación. Luego, como <a href=\"/es/part2/altering_data_in_server#extracting-communication-with-the-backend-into-a-separate-module\">discutimos anteriormente</a>, el método <em>then</em> de una promesa también devuelve una promesa y podemos acceder a la nota formateada registrando una nueva función callback con el método <em>then</em>.</p>\n<p>Podemos limpiar nuestro código aún más usando la sintaxis más compacta para las funciones de flecha:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  note\n    <span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">savedNote</span> <span class=\"token operator\">=></span> savedNote<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">savedAndFormattedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedAndFormattedNote<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>En este ejemplo, el encadenamiento de promesas no proporciona muchos beneficios. La situación cambiaría si hubiera muchas operaciones asincrónicas que tuvieran que realizarse en secuencia. No profundizaremos más en el tema. En la siguiente parte del curso aprenderemos sobre la sintaxis <i>async/await</i> en JavaScript, que facilitará mucho la escritura de operaciones asíncronas posteriores.</p>\n<h3>Implementar el backend de la base de datos en producción</h3>\n<p>La aplicación debería funcionar casi como está en Heroku. Tenemos que generar un nuevo build de producción del frontend debido a los cambios que hemos realizado en él.</p>\n<p>Las variables de entorno definidas en dotenv solo se utilizarán cuando el backend no esté en <i>modo de producción</i>, es decir, Heroku.</p>\n<p>Definimos las variables de entorno para el desarrollo en el archivo <i>.env</i>, pero la variable de entorno que define la URL de la base de datos en producción debe establecerse en Heroku con el comando <em>heroku config:set</em>.  </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ heroku config:set <span class=\"token assign-left variable\">MONGODB_URI</span><span class=\"token operator\">=</span>mongodb+srv://fullstack:secretpasswordhere@cluster0-ostce.mongodb.net/note-app?retryWrites<span class=\"token operator\">=</span>true</code></pre></div>\n<p><strong>NB:</strong> si el comando causa un error, ingrese el valor de MONGODB_URI en apóstrofos:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ heroku config:set <span class=\"token assign-left variable\">MONGODB_URI</span><span class=\"token operator\">=</span><span class=\"token string\">'mongodb+srv://fullstack:secretpasswordhere@cluster0-ostce.mongodb.net/note-app?retryWrites=true'</span></code></pre></div>\n<p>La aplicación debería funcionar ahora. A veces, las cosas no salen según lo planeado. Si hay problemas, los <i>registros de heroku</i> estarán allí para ayudar. Mi propia aplicación no funcionó después de realizar los cambios. Los registros mostraron lo siguiente:</p>\n<picture><img src=\"/static/73865480c799fbb73e1d47004e297d8a/5a190/51a.png\" srcset=\"/static/73865480c799fbb73e1d47004e297d8a/772e8/51a.png 200w,\n/static/73865480c799fbb73e1d47004e297d8a/e17e5/51a.png 400w,\n/static/73865480c799fbb73e1d47004e297d8a/5a190/51a.png 800w,\n/static/73865480c799fbb73e1d47004e297d8a/c1b63/51a.png 1200w,\n/static/73865480c799fbb73e1d47004e297d8a/29007/51a.png 1600w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Por alguna razón, la URL de la base de datos no estaba definida. El comando <i>heroku config</i> reveló que había definido accidentalmente la URL de la variable de entorno <em>MONGO_URL</em> , cuando el código esperaba que estuviera en <em>MONGODB_URI</em>.</p>\n<p>Puede encontrar el código para nuestra aplicación actual en su totalidad en la rama <i>part3-5</i> de <a href=\"https://github.com/fullstack-hy2019/part3-notes-backend/tree/part3-5\">este repositorio de github</a>.</p>\n</div>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 3.19.-3.21.</h3>\n<h4>3.19: Base de datos de la agenda telefónica, paso 7</h4>\n<p>Agregue validación a su aplicación de agenda telefónica, que se asegurará de que una persona recién agregada tenga un nombre único. Nuestro frontend actual no permitirá a los usuarios intentar crear duplicados, pero podemos intentar crearlos directamente con Postman o el cliente REST de VS Code.</p>\n<p>Mongoose no ofrece un validador integrado para este propósito. Instale el paquete <a href=\"https://github.com/blakehaswell/mongoose-unique-validator#readme\">mongoose-unique-validator</a> con npm y utilícelo en su lugar.</p>\n<p>Si una solicitud HTTP POST intenta agregar un nombre que ya está en la agenda, el servidor debe responder con un código de estado apropiado y un mensaje de error.</p>\n<h4>3.20 *: Base de datos de la agenda, paso 8</h4>\n<p>Expanda la validación para que el nombre almacenado en la base de datos tenga al menos tres caracteres y el número de teléfono tenga al menos 8 dígitos.</p>\n<p>Expanda el frontend para que muestre algún tipo de mensaje de error cuando se produzca un error de validación. El manejo de errores se puede implementar agregando un bloque <em>catch</em> como se muestra a continuación:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">personService\n    <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">createdPerson</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// this is the way to access the error message</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Puede mostrar el mensaje de error predeterminado devuelto por Mongoose, aunque no sean tan legibles como podrían ser:</p>\n<picture><img src=\"/static/fddf847e340f060549c3029f464a5493/5a190/56e.png\" srcset=\"/static/fddf847e340f060549c3029f464a5493/772e8/56e.png 200w,\n/static/fddf847e340f060549c3029f464a5493/e17e5/56e.png 400w,\n/static/fddf847e340f060549c3029f464a5493/5a190/56e.png 800w,\n/static/fddf847e340f060549c3029f464a5493/c1b63/56e.png 1200w,\n/static/fddf847e340f060549c3029f464a5493/29007/56e.png 1600w,\n/static/fddf847e340f060549c3029f464a5493/f4fb1/56e.png 1766w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>NB:</strong> En las operaciones de actualización, los validadores de mangoose están desactivados de forma predeterminada. <a href=\"https://mongoosejs.com/docs/validation.html\">Lea la documentación</a> para determinar cómo habilitarlos.</p>\n<h4>3.21 Implementación del backend de la base de datos en producción</h4>\n<p>Genere una nueva versión \"full stack\" de la aplicación creando una nueva compilación de producción del frontend y cópiela en el repositorio backend. Verifique que todo funcione localmente usando la aplicación completa desde la dirección <a href=\"https://localhost:3001\">https://localhost:3001</a>.</p>\n<p>Envíe la última versión a Heroku y verifique que todo funcione allí también.</p>\n</div>\n<div class=\"content\">\n<h3>Lint</h3>\n<p>Antes de pasar a la siguiente parte, veremos una herramienta importante llamada <a href=\"https://en.wikipedia.org/wiki/Lint_(software)\">lint</a>. Wikipedia dice lo siguiente sobre lint:</p>\n<blockquote>\n<p><i>Genéricamente, lint o linter es cualquier herramienta que detecta y marca errores en los lenguajes de programación, incluidos los errores de estilo. El término comportamiento lint-like a veces se aplica al proceso de marcar el uso de lenguaje sospechoso. Las herramientas de tipo lint generalmente realizan análisis estáticos del código fuente.</i></p>\n</blockquote>\n<p>En lenguajes compilados de tipado estático como Java, los IDE como NetBeans pueden señalar errores en el código, incluso aquellos que son más que simples errores de compilación. Se pueden utilizar herramientas adicionales para realizar <a href=\"https://en.wikipedia.org/wiki/Static_program_analysis\">análisis estáticos</a>, como <a href=\"https://checkstyle.sourceforge.io\">checkstyle</a>, para ampliar las capacidades del IDE y señalar también problemas relacionados con el estilo, como la identación.</p>\n<p>En el universo de JavaScript, la herramienta líder actual para el análisis estático, también conocida como. \"linting\" es <a href=\"https://eslint.org/\">ESlint</a>.</p>\n<p>Instalemos ESlint como una dependencia de desarrollo del proyecto de backend con el comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint --save-dev</code></pre></div>\n<p>Después de esto, podemos inicializar una configuración predeterminada de ESlint con el comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node_modules/.bin/eslint --init</code></pre></div>\n<p>Responderemos todas las preguntas:</p>\n<picture><img src=\"/static/ba1423527692484103dcb2b7374eeb01/5a190/52be.png\" srcset=\"/static/ba1423527692484103dcb2b7374eeb01/772e8/52be.png 200w,\n/static/ba1423527692484103dcb2b7374eeb01/e17e5/52be.png 400w,\n/static/ba1423527692484103dcb2b7374eeb01/5a190/52be.png 800w,\n/static/ba1423527692484103dcb2b7374eeb01/c1b63/52be.png 1200w,\n/static/ba1423527692484103dcb2b7374eeb01/dca52/52be.png 1550w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>La configuración se guardará en el archivo <em>.eslintrc.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'env'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'commonjs'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'es6'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'node'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'extends'</span><span class=\"token operator\">:</span> <span class=\"token string\">'eslint:recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'globals'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'Atomics'</span><span class=\"token operator\">:</span> <span class=\"token string\">'readonly'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'SharedArrayBuffer'</span><span class=\"token operator\">:</span> <span class=\"token string\">'readonly'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'parserOptions'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ecmaVersion'</span><span class=\"token operator\">:</span> <span class=\"token number\">2018</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'rules'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'indent'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">4</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'linebreak-style'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'unix'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'quotes'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'single'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'semi'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'never'</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cambiemos inmediatamente la regla relativa a la sangría, de modo que el nivel de identación sea de dos espacios.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Se puede inspeccionar y validar un archivo como <em>index.js</em> con el siguiente comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node_modules/.bin/eslint index.js</code></pre></div>\n<p>Se recomienda crear un <em>npm script</em> separado para linting:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora, el comando <em>npm run lint</em> comprobará todos los archivos del proyecto.</p>\n<p>Además, los archivos del directorio <em>build</em> se comprueban cuando se ejecuta el comando. No queremos que esto suceda, y podemos lograrlo creando un archivo <a href=\"https://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories\">.eslintignore</a> en la raíz del proyecto con el siguiente contenido:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">build</code></pre></div>\n<p>Esto hace que toda la estructura de directorios a no ser comprobado por ESlint.</p>\n<p>Lint tiene mucho que decir sobre nuestro código:</p>\n<picture><img src=\"/static/cdf7d27db507f48c4ab9f7bd59f8071f/5a190/53ea.png\" srcset=\"/static/cdf7d27db507f48c4ab9f7bd59f8071f/772e8/53ea.png 200w,\n/static/cdf7d27db507f48c4ab9f7bd59f8071f/e17e5/53ea.png 400w,\n/static/cdf7d27db507f48c4ab9f7bd59f8071f/5a190/53ea.png 800w,\n/static/cdf7d27db507f48c4ab9f7bd59f8071f/c1b63/53ea.png 1200w,\n/static/cdf7d27db507f48c4ab9f7bd59f8071f/d7ceb/53ea.png 1446w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>No solucionemos estos problemas todavía.</p>\n<p>Una mejor alternativa a ejecutar el linter desde la línea de comandos es configurar un <i>eslint-plugin</i> en el editor, que ejecuta el linter continuamente. Al usar el plugin, verá errores en su código de inmediato. Puede encontrar más información sobre el plugin Visual Studio ESLint <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">aquí</a>.</p>\n<p>El plugin VS Code ESlint subrayará las violaciones de estilo con una línea roja:</p>\n<picture><img src=\"/static/64cf2fbae36000083aa1e48292aed8f2/5a190/54a.png\" srcset=\"/static/64cf2fbae36000083aa1e48292aed8f2/772e8/54a.png 200w,\n/static/64cf2fbae36000083aa1e48292aed8f2/e17e5/54a.png 400w,\n/static/64cf2fbae36000083aa1e48292aed8f2/5a190/54a.png 800w,\n/static/64cf2fbae36000083aa1e48292aed8f2/c1b63/54a.png 1200w,\n/static/64cf2fbae36000083aa1e48292aed8f2/29007/54a.png 1600w,\n/static/64cf2fbae36000083aa1e48292aed8f2/17009/54a.png 1932w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Esto hace que los errores sean fáciles de detectar y corregir de inmediato.</p>\n<p>ESlint tiene una amplia gama de <a href=\"https://eslint.org/docs/rules/\">reglas</a> que son fáciles de usar al editar el archivo <i>.eslintrc.js</i>.</p>\n<p>Vamos a añadir regla <a href=\"https://eslint.org/docs/rules/eqeqeq\">eqeqeq</a> que nos advierte, si la igualdad se comprueba con cualquier cosa menos el operador de triple iguales. La regla se agrega bajo el campo <i>rules</i> en el archivo de configuración.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">'rules'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n   <span class=\"token string\">'eqeqeq'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ya que estamos en eso, hagamos algunos otros cambios en las reglas.</p>\n<p>Evitemos los <a href=\"https://eslint.org/docs/rules/no-trailing-spaces\">espacios finales innecesarios</a> al final de las líneas, exijamos que <a href=\"https://eslint.org/docs/rules/object-curly-spacing\">siempre haya un espacio antes y después de las llaves</a>, y exijamos también un uso consistente de espacios en blanco en los parámetros de función de las funciones de flecha.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">'rules'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">'eqeqeq'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'no-trailing-spaces'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'object-curly-spacing'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'always'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'arrow-spacing'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'before'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nuestra configuración predeterminada utiliza un montón de reglas predeterminadas de <i>eslint:recommended</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">'extends'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'eslint:recommended'</span>,</code></pre></div>\n<p>Esto incluye una regla que advierte sobre los comandos <em>console.log</em>. La <a href=\"https://eslint.org/docs/user-guide/configuring#configuring-rules\">desactivación</a> de una regla se puede lograr definiendo su \"valor\" como 0 en el archivo de configuración. Mientras tanto , hagamos esto para la regla <i>no-console</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">'rules'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">'eqeqeq'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'no-trailing-spaces'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'object-curly-spacing'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'always'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'arrow-spacing'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'before'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">'no-console'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>NB</strong> cuando realiza cambios en el archivo <i>.eslintrc.js</i>, se recomienda ejecutar el linter desde la línea de comandos. Esto verificará que el archivo de configuración esté formateado correctamente:</p>\n<picture><img src=\"/static/683365a382c607616d65e603f8d8d39a/5a190/55.png\" srcset=\"/static/683365a382c607616d65e603f8d8d39a/772e8/55.png 200w,\n/static/683365a382c607616d65e603f8d8d39a/e17e5/55.png 400w,\n/static/683365a382c607616d65e603f8d8d39a/5a190/55.png 800w,\n/static/683365a382c607616d65e603f8d8d39a/c1b63/55.png 1200w,\n/static/683365a382c607616d65e603f8d8d39a/29007/55.png 1600w,\n/static/683365a382c607616d65e603f8d8d39a/7575b/55.png 1608w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Si hay algún problema en su archivo de configuración, el plugin lint puede comportarse de manera bastante errática.</p>\n<p>Muchas empresas definen estándares de codificación que se aplican en toda la organización a través del archivo de configuración de ESlint. No se recomienda seguir reinventando la rueda una y otra vez, y puede ser una buena idea adoptar una configuración ya hecha del proyecto de otra persona en el suyo. Recientemente, muchos proyectos han adoptado la <a href=\"https://github.com/airbnb/javascript\">guía de estilo Javascript</a> de Airbnb al utilizar la configuración <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\">ESlint</a> de Airbnb.</p>\n<p>Puede encontrar el código para nuestra aplicación actual en su totalidad en la rama <i>part3-7</i> de <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part3-7\">este repositorio de github</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicio 3.22.</h3>\n<h4>3.22: Configuración de Lint</h4>\n<p>Agregue ESlint a su aplicación y corrija todas las advertencias.</p>\n<p>Este fue el último ejercicio de esta parte del curso. Es hora de enviar su código a GitHub y marcar todos sus ejercicios terminados en el <a href=\"https://study.cs.helsinki.fi/stats/courses/fullstack2021\">sistema de envío de ejercicios</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8ac7bc0fb2b7018a7853b00c454b2103/part-3.svg"},"part":3,"letter":"d","lang":"es"}}},"pageContext":{"part":3,"letter":"d","lang":"es"}},"staticQueryHashes":["3128451518"]}