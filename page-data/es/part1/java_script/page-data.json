{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part1/java_script","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Durante el curso, tenemos un objetivo y la necesidad de aprender una cantidad suficiente de JavaScript además del desarrollo web. </p>\n<p>JavaScript ha avanzado rápidamente en los últimos años y en este curso usamos características de las versiones más nuevas. El nombre oficial del estándar JavaScript es <a href=\"https://en.wikipedia.org/wiki/ECMAScript\">ECMAScript</a>. En este momento, la última versión es la lanzada en junio de 2019 con el nombre <a href=\"http://www.ecma-international.org/ecma-262/10.0/index.html\">ECMAScript® 2019</a>, también conocido como ES10.</p>\n<p>Los navegadores aún no son compatibles con todas las funciones más nuevas de JavaScript. Debido a este hecho, una gran cantidad de código que se ejecuta en los navegadores ha sido <i>transpilado</i> de una versión más nueva de JavaScript a una versión más antigua y compatible. </p>\n<p>Hoy en día, la forma más popular de realizar la transpilación es mediante <a href=\"https://babeljs.io/\">Babel</a>. La transpilación se configura automáticamente en las aplicaciones React creadas con create-react-app. Veremos más de cerca la configuración de la transpilación en la <a href=\"/es/part7\">parte 7</a> de este curso.</p>\n<p><a href=\"https://nodejs.org/en/\">Node.js</a> es un entorno de ejecución de JavaScript basado en el motor de JavaScript <a href=\"https://developers.google.com/v8/\">Chrome V8</a> de Google y funciona prácticamente en cualquier lugar. desde servidores hasta teléfonos móviles. Practiquemos escribir algo de JavaScript usando Node. Se espera que la versión de Node.js instalada en su máquina sea al menos la versión <i>10.18.0</i>. Las últimas versiones de Node ya comprenden las últimas versiones de JavaScript, por lo que no es necesario transpilar el código. </p>\n<p>El código se escribe en archivos que terminan en <i>.js</i> que se ejecutan emitiendo el comando <em>node nombre<em>del</em>archivo.js</em></p>\n<p>También es posible escribir código JavaScript en la consola de Node.js, que se abre escribiendo <em>node</em> en la línea de comandos, así como en la consola de herramientas de desarrollo del navegador. Las revisiones más recientes de Chrome manejan las características más nuevas de JavaScript <a href=\"http://kangax.github.io/compat-table/es2016plus/\">bastante bien</a> sin transpilar el código. Alternativamente, puede utilizar una herramienta como <a href=\"https://jsbin.com/?js,console\">JS Bin</a>.</p>\n<p>JavaScript recuerda, tanto en nombre como en sintaxis, a Java. Pero cuando se trata del mecanismo central del lenguaje, no podrían ser más diferentes. Viniendo de un entorno de Java, el comportamiento de JavaScript puede parecer un poco extraño, especialmente si uno no hace el esfuerzo de buscar sus características.</p>\n<p>En ciertos círculos también ha sido popular intentar \"simular\" características de Java y patrones de diseño en JavaScript. No recomendamos hacer esto ya que los idiomas y los ecosistemas respectivos son, en última instancia, muy diferentes. </p>\n<h3>Variables</h3>\n<p>En JavaScript, hay algunas formas de definir las variables: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1, 5 es impreso</span>\ny <span class=\"token operator\">+=</span> <span class=\"token number\">10</span>\nconsole<span class=\"token punctuation\">.</span> <span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1, 15 es impreso</span>\ny <span class=\"token operator\">=</span> <span class=\"token string\">'sometext'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1, sometext es impreso</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token comment\">// provoca un error</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">const</a> no define realmente una variable sino una <i>constante</i> para la cual el valor ya no se puede cambiar. Por otra parte <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a> define una variable normal. </p>\n<p>En el ejemplo anterior, también vemos que el tipo de datos asignados a la variable puede cambiar durante la ejecución. Al principio <em>y</em> almacena un número entero y al final un string.</p>\n<p>También es posible definir variables en JavaScript usando la palabra clave <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">var</a>. var fue, durante mucho tiempo, la única forma de definir variables. const y let se agregaron recientemente en la versión ES6. En situaciones específicas, var funciona de una <a href=\"https://medium.com/craft-academy/javascript-variables-should-you-use-let-var-or-const-394f7645c88f\">diferente</a> <a href=\"http://www.jstips.co/en/javascript/keyword-var-vs-let/\">manera</a> en comparación con las definiciones de variables en la mayoría de los idiomas. Durante este curso, el uso de var es desaconsejado y debe seguir usando const y let!\nPuede encontrar más sobre este tema en YouTube, por ejemplo, <a href=\"https://youtu.be/sjyJBL5fkp8\">var, let y const - Características de JavaScript de ES6</a></p>\n<h3>Arrays</h3>\n<p>Un <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">array</a> y un par de ejemplos de su uso: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\nt<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Se imprime 4 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1 es impreso</span>\n\nt<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>valor<span class=\"token punctuation\">)</span> <span class=\"token comment\">// se imprimen los números 1, -1, 3, 5, cada uno en la línea propia</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>En este ejemplo, cabe destacar el hecho de que el contenido de la matriz se puede modificar aunque esté definido como <em>const</em>. Como la matriz es un objeto, la variable siempre apunta al mismo objeto. Sin embargo, el contenido de la matriz cambia a medida que se le agregan nuevos elementos.</p>\n<p>Una forma de iterar a través de los elementos de la matriz es usar <em>forEach</em> como se ve en el ejemplo. <em>forEach</em> recibe una <i>función</i> definida usando la sintaxis de flecha como parámetro.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>forEach llama a la función <i>para cada uno de los elementos de la matriz</i>, siempre pasando el elemento individual como parámetro. La función como parámetro de forEach también puede recibir <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">otros parámetros</a>.</p>\n<p>En el ejemplo anterior, se agregó un nuevo elemento a la matriz usando el método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">push</a>. Cuando se usa React, a menudo se usan técnicas de programación funcional. Una característica del paradigma de programación funcional es el uso de estructuras de datos <a href=\"https://en.wikipedia.org/wiki/Immutable_object\">inmutables</a>. En el código de React, es preferible usar el método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a>, que no agrega el elemento a la matriz, pero crea una nueva matriz en la que se incluyen el contenido de la matriz anterior y el nuevo elemento.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [1, -1, 3] es impreso</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, -1, 3, 5] es impreso</span></code></pre></div>\n<p>La llamada al método <em>t.concat(5)</em> no agrega un nuevo elemento a la matriz anterior, pero devuelve una nueva matriz que, además de contener los elementos de la matriz anterior, también contiene el elemento nuevo.</p>\n<p>Hay muchos métodos útiles definidos para matrices. Veamos un breve ejemplo del uso del método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a>. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> \n\n<span class=\"token keyword\">const</span> m1 <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 4, 6] es impreso</span></code></pre></div>\n<p>Basado en la matriz anterior, map crea una <i>nueva matriz</i>, para la cual la función dada como parámetro se usa para crear los elementos. En el caso de este ejemplo, el valor original se multiplica por dos.</p>\n<p>Map también puede transformar la matriz en algo completamente diferente: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> m2 <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token string\">'&lt;li>'</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/li>'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span>  \n<span class=\"token comment\">// [ '&lt;li>1&lt;/li>', '&lt;li>2&lt;/li>', '&lt;li>3&lt;/li>' ] es impreso</span></code></pre></div>\n<p>Aquí una matriz llena de valores enteros se transforma en una matriz que contiene cadenas de HTML utilizando el método map. En la <a href=\"/es/part2\">parte 2</a> de este curso, veremos que map se usa con bastante frecuencia en React.</p>\n<p>Los elementos individuales de una matriz son fáciles de asignar a variables con la ayuda de la <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">asignación de desestructuración</a>. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 1, 2 es impreso</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// [3, 4 ,5] es impreso</span></code></pre></div>\n<p>Gracias a la asignación, las variables <em>first</em> y <em>second</em> recibirán los dos primeros enteros del array como sus valores. Los enteros restantes se \"recopilan\" en una matriz propia que luego se asigna a la variable <em>rest</em>. </p>\n<h3>Objetos</h3>\n<p>Hay algunas formas diferentes de definir objetos en JavaScript. Un método muy común es usar <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Object_literals\">objetos literales</a>, que sucede al enumerar sus propiedades entre llaves: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n  education<span class=\"token operator\">:</span> <span class=\"token string\">'PhD'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> object2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Full Stack web application development'</span><span class=\"token punctuation\">,</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">'intermediate studies'</span><span class=\"token punctuation\">,</span>\n  size<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> object3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    first<span class=\"token operator\">:</span> <span class=\"token string\">'Dan'</span><span class=\"token punctuation\">,</span>\n    last<span class=\"token operator\">:</span> <span class=\"token string\">'Abramov'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  grades<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  department<span class=\"token operator\">:</span> <span class=\"token string\">'Stanford University'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los valores de las propiedades pueden ser de cualquier tipo, como enteros, strings, matrices, objetos... </p>\n<p>Se hace referencia a las propiedades de un objeto usando la notación \"de punto\", o usando corchetes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>         <span class=\"token comment\">// se imprime Arto Hellas</span>\n<span class=\"token keyword\">const</span> fieldName <span class=\"token operator\">=</span> <span class=\"token string\">'age'</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">[</span>fieldName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 35 es impreso</span></code></pre></div>\n<p>También puedes agregar propiedades a un objeto sobre la marcha usando notación de puntos o corchetes: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">object1<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token string\">'Helsinki'</span>\nobject1<span class=\"token punctuation\">[</span><span class=\"token string\">'secret number'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">12341</span></code></pre></div>\n<p>La última de las adiciones debe hacerse usando corchetes, porque cuando se usa la notación de puntos, <i>secret number</i> no es un nombre de propiedad válido debido al carácter de espacio. </p>\n<p>Naturalmente, los objetos en JavaScript también pueden tener métodos. Sin embargo, durante este curso no es necesario definir ningún objeto con métodos propios. Es por eso que solo se discuten brevemente durante el curso.</p>\n<p>Los objetos también se pueden definir usando las llamadas funciones de constructor, lo que da como resultado un mecanismo que recuerda a muchos otros lenguajes de programación, por ejemplo, las clases de Java. A pesar de esta similitud, JavaScript no tiene clases en el mismo sentido que los lenguajes de programación orientados a objetos. Sin embargo, ha habido una adición de la <i>sintaxis de clase</i> a partir de la versión ES6, que en algunos casos ayuda a estructurar clases orientadas a objetos. </p>\n<h3>Funciones</h3>\n<p>Ya nos hemos familiarizado con la definición de funciones de flecha. El proceso completo, sin atajar esquinas, para definir una función de flecha es el siguiente: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p1<span class=\"token punctuation\">,</span> p2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">return</span> p1 <span class=\"token operator\">+</span> p2 \n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>y la función se llama como se puede esperar: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si hay un solo parámetro, podemos excluir los paréntesis de la definición: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> p <span class=\"token operator\">*</span> p\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si la función solo contiene una expresión, entonces las llaves no son necesarias. En este caso, la función solo devuelve el resultado de su única expresión. Ahora, si eliminamos la impresión de la consola, podemos acortar aún más la definición de la función: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p <span class=\"token operator\">*</span> p</code></pre></div>\n<p>Esta forma es particularmente útil cuando se manipulan matrices, por ejemplo, cuando se usa el método map:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> tSquared <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p <span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// tSquared es ahora [1, 4, 9]</span></code></pre></div>\n<p>La característica de la función de flecha se agregó a JavaScript hace solo un par de años, con la versión <a href=\"http://es6-features.org/\">ES6</a>. Antes de esto, la única forma de definir funciones era usando la palabra clave <em>function</em>. </p>\n<p>Hay dos formas de hacer referencia a la función; uno está dando un nombre en una <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">declaración de función</a>. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// result is now 12</span></code></pre></div>\n<p>La otra forma de definir la función es usando una <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">expresión de función</a>. En este caso, no es necesario darle un nombre a la función y la definición puede residir entre el resto del código: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">average</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// result is now 3.5</span></code></pre></div>\n<p>Durante este curso definiremos todas las funciones usando la sintaxis de flecha. </p>\n</div> \n<div class=\"tasks\"> \n  <h3>Ejercicios 1.3.-1.5.</h3>\n<p><i>Seguimos construyendo la aplicación en la que empezamos a trabajar en los ejercicios anteriores. Puede escribir el código en el mismo proyecto, ya que solo estamos interesados ​​en el estado final de la aplicación enviada.</i> </p>\n<p><strong>Pro-tip:</strong> puede tener problemas cuando se trata de la estructura de la &#x3C; i>props</i> que reciben los componentes. Una buena manera de aclarar las cosas es imprimiendo los props en la consola, por ejemplo, de la siguiente manera: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>course<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n  <h4>1.3: información del curso, paso3</h4>\n<p>Avancemos para usar objetos en nuestra aplicación. Modifique las definiciones de las variables del componente <i>App</i> de la siguiente manera y también refactorice la aplicación para que siga funcionando: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> course <span class=\"token operator\">=</span> <span class=\"token string\">'Half Stack application development'</span>\n  <span class=\"token keyword\">const</span> part1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Fundamentals of React'</span><span class=\"token punctuation\">,</span>\n    exercises<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> part2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Using props to pass data'</span><span class=\"token punctuation\">,</span>\n    exercises<span class=\"token operator\">:</span> <span class=\"token number\">7</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> part3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'State of a component'</span><span class=\"token punctuation\">,</span>\n    exercises<span class=\"token operator\">:</span> <span class=\"token number\">14</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n  <h4>1.4: información del curso paso 4</h4> \n<p>Y luego coloque los objetos en una matriz. Modifique las definiciones de variables de <i>App</i> de la siguiente forma y modifique las otras partes de la aplicación en consecuencia: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> course <span class=\"token operator\">=</span> <span class=\"token string\">'Half Stack application development'</span>\n  <span class=\"token keyword\">const</span> parts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Fundamentals of React'</span><span class=\"token punctuation\">,</span>\n      exercises<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Using props to pass data'</span><span class=\"token punctuation\">,</span>\n      exercises<span class=\"token operator\">:</span> <span class=\"token number\">7</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'State of a component'</span><span class=\"token punctuation\">,</span>\n      exercises<span class=\"token operator\">:</span> <span class=\"token number\">14</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>NB</strong> en este punto <i>puede asumir que siempre hay tres elementos</i>, por lo que no es necesario pasar por las matrices usando bucles. Volveremos al tema de la representación de componentes basados ​​en elementos dentro de matrices con una exploración más profunda en la <a href=\"../part2\">siguiente parte del curso</a>. </p>\n<p>Sin embargo, no pase diferentes objetos como props separados del componente <i>App</i> a los componentes <i>Content</i> y <i>Total</i>. En su lugar, páselos directamente como una matriz:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// const definitions</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Header course<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>course<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Content parts<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>parts<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Total parts<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>parts<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n  <h4>1.5: información del curso paso 5</h4> \n<p>Llevemos los cambios un paso más allá. Cambie el curso y sus partes en un solo objeto JavaScript. Arregle todo lo que se rompa. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> course <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Half Stack application development'</span><span class=\"token punctuation\">,</span>\n    parts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Fundamentals of React'</span><span class=\"token punctuation\">,</span>\n        exercises<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Using props to pass data'</span><span class=\"token punctuation\">,</span>\n        exercises<span class=\"token operator\">:</span> <span class=\"token number\">7</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'State of a component'</span><span class=\"token punctuation\">,</span>\n        exercises<span class=\"token operator\">:</span> <span class=\"token number\">14</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</div>\n<div class=\"content\">\n</div> \n<div class =\"content\"> \n<h3>Métodos de objeto y \"this\"</h3>\n<p>Debido al hecho de que durante este curso estamos usando una versión de React que contiene React Hooks no tenemos necesidad de definir objetos con métodos. <strong>El contenido de este capítulo no es relevante para el curso</strong> pero ciertamente es bueno conocerlo en muchos sentidos. En particular, cuando se utilizan versiones anteriores de React, se deben comprender los temas de este capítulo.</p>\n<p>Las funciones de flecha y las funciones definidas usando la palabra clave <em>function</em> varían sustancialmente cuando se trata de cómo se comportan con respecto a la palabra clave <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">this</a>, que se refiere al objeto en sí.</p>\n<p>Podemos asignar métodos a un objeto definiendo propiedades que son funciones: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n  education<span class=\"token operator\">:</span> <span class=\"token string\">'PhD'</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">greet</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, my name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span>\n\narto<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"hello, my name is Arto Hellas\" es impreso</span></code></pre></div>\n<p>Los métodos se pueden asignar a los objetos incluso después de la creación del objeto: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n  education<span class=\"token operator\">:</span> <span class=\"token string\">'PhD'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">greet</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, my name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">arto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">growOlder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arto<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 35 es impreso</span>\narto<span class=\"token punctuation\">.</span><span class=\"token function\">growOlder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arto<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 36 es impreso</span></code></pre></div>\n<p>Modifiquemos ligeramente el objeto: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n  education<span class=\"token operator\">:</span> <span class=\"token string\">'PhD'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">greet</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, my name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">doAddition</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span>\n\narto<span class=\"token punctuation\">.</span><span class=\"token function\">doAddition</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 5 es impreso</span>\n\n<span class=\"token keyword\">const</span> referenceToAddition <span class=\"token operator\">=</span> arto<span class=\"token punctuation\">.</span>doAddition\n<span class=\"token function\">referenceToAddition</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 25 es impreso</span></code></pre></div>\n<p>Ahora el objeto tiene el método <em>doAddition</em> que calcula la suma de números que se le da como parámetros. El método se llama de la forma habitual, utilizando el objeto <em>arto.doAddition(1, 4)</em> o almacenando una <i>referencia de método</i> en una variable y llamando al método a través de la variable: <em>referenceToAddition(10, 15)</em>.</p>\n<p>Si intentamos hacer lo mismo con el método <em>greet</em> nos encontramos con un problema: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">arto<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// \"hello, my name is Arto Hellas\" se imprime</span>\n\n<span class=\"token keyword\">const</span> referenceToGreet <span class=\"token operator\">=</span> arto<span class=\"token punctuation\">.</span>greet\n<span class=\"token function\">referenceToGreet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// imprime \"hello, my name is undefined\"</span></code></pre></div>\n<p>Al llamar al método a través de una referencia, el método pierde el conocimiento de cuál era el <em>this</em> original. A diferencia de otros lenguajes, en JavaScript el valor de <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">this</a> se define en función de <i>cómo el método se llama</i>. Cuando se llama al método a través de una referencia, el valor de <em>this</em> se convierte en el llamado <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Global_object\">objeto global</a> y el resultado final a menudo no es lo que el desarrollador de software había previsto originalmente.</p>\n<p>Perder la pista de <em>this</em> al escribir código JavaScript genera algunos problemas potenciales. A menudo surgen situaciones en las que React o Node (o más específicamente el motor JavaScript del navegador web) necesita llamar a algún método en un objeto que el desarrollador ha definido. Sin embargo, en este curso evitamos estos problemas mediante el uso de JavaScript \"this-less\". </p>\n<p>Una situación que lleva a la \"desaparición\" de <em>this</em> surge cuando establecemos un tiempo de espera para llamar a la función <em>greet</em> en el objeto <em>arto</em>, usando la función <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\">setTimeout</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">greet</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, my name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>arto<span class=\"token punctuation\">.</span>greet<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>Como se mencionó, el valor de <em>this</em> en JavaScript se define en función de cómo se llama al método. Cuando <em>setTimeout</em> llama al método, es el motor JavaScript el que realmente llama al método y, en ese punto, <em>this</em> se refiere al objeto global. </p>\n<p>Existen varios mecanismos mediante los cuales se puede conservar el <em>this</em> original. Uno de ellos es usar un método llamado <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">bind</a>: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>arto<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>arto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Al llamar a <em>arto.greet.bind(arto)</em> se crea una nueva función donde <em>this</em> está obligado a apuntar a Arto, independientemente de dónde y cómo se llame al método.</p>\n<p>Usando <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">funciones de flecha</a> es posible resolver algunos de los problemas relacionados con <em>this</em>. Sin embargo, no deben usarse como métodos para objetos porque entonces <em>esto</em> no funciona en absoluto. Más adelante volveremos al comportamiento de <em>este</em> en relación con las funciones de flecha. </p>\n<p>Si desea obtener una mejor comprensión de cómo <em>this</em> funciona en JavaScript, Internet está lleno de material sobre el tema, por ejemplo, la serie de screencasts <a href=\"https://egghead.io/courses/understand-javascript-s-this-keyword-in-depth\">Comprender la palabra clave this de JavaScript en profundidad</a> de <a href=\"https://egghead.io\">egghead.io</a> es muy recomendable. </p>\n<h3>Clases</h3>\n<p>Como se mencionó anteriormente, no existe un mecanismo de clase como los de los lenguajes de programación orientados a objetos. Sin embargo, hay características en JavaScript que hacen posible \"simular\" <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\">clases</a> orientadas a objetos.</p>\n<p>Echemos un vistazo rápido a la <i>sintaxis de clase</i> que se introdujo en JavaScript con ES6, que simplifica sustancialmente la definición de clases (o cosas similares a clases) en JavaScript.</p>\n<p>En el siguiente ejemplo definimos una \"clase\" llamada Person y dos objetos Person: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, my name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> adam <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Adam Ondra'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span>\nadam<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> janja <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Janja Garnbret'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span>\njanja<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cuando se trata de sintaxis, las clases y los objetos creados a partir de ellos recuerdan mucho a las clases y objetos de Java. Su comportamiento también es bastante similar al de los objetos Java. En el núcleo, siguen siendo objetos basados ​​en la <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance\">herencia prototípica</a> de JavaScript. El tipo de ambos objetos es en realidad <em>Object</em>, ya que JavaScript esencialmente solo define los tipos <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">Boolean, Null, Undefined, Number, String, Symbol, BigInt y Object</a>.</p>\n<p>La introducción de la sintaxis de clases fue una adición controvertida. Consulte <a href=\"https://github.com/petsel/not-awesome-es6-classes\">No es impresionante: clases de ES6</a> o <a href=\"Https://medium.com/@rajaraodv/is-class-in-es6-the-new-bad-part-6c4e6fe1ee65\">¿Es la \"clase\" en ES6 la nueva parte \"mala\"?</a> para obtener más detalles.</p>\n<p>La sintaxis de la clase ES6 se usa mucho en React \"antiguo\" y también en Node.js, por lo que comprenderlo es beneficioso incluso en este curso. Sin embargo, dado que estamos usando la nueva función <a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a> de React a lo largo de este curso, no tenemos un uso concreto para la sintaxis de clases de JavaScripts.</p>\n<h3>Materiales JavaScript</h3>\n<p>Existen guías buenas y malas para JavaScript en Internet. La mayoría de los enlaces de esta página relacionados con la referencia de características de JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">Guía de JavaScript de Mozilla</a>.</p>\n<p>Se recomienda leer inmediatamente <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Una reintroducción a JavaScript (tutorial de JS)</a> en el sitio web de Mozilla.</p>\n<p>Si desea conocer JavaScript en profundidad, hay una gran serie de libros gratuitos en Internet llamada <a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a>.</p>\n<p>Otro gran recurso para aprender JavaScript es <a href=\"https://javascript.info\">javascript.info</a>.</p>\n<p><a href=\"https://egghead.io\">egghead.io</a> tiene muchos screencasts de calidad sobre JavaScript, React y otros temas interesantes. Desafortunadamente, parte del material está detrás de un muro de pago.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/83f1c8a7795e9e8eaffaec29b1ee79b1/part-1.svg"},"part":1,"letter":"b","lang":"es"}}},"pageContext":{"part":1,"letter":"b","lang":"es"}},"staticQueryHashes":["3128451518"]}