{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part4/porbando_el_backend","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Ahora comenzaremos a escribir pruebas para el backend. Dado que el backend no contiene ninguna lógica complicada, no tiene sentido escribir <a href=\"https://en.wikipedia.org/wiki/Unit_testing\">pruebas unitarias</a> para él. Lo único que podríamos probar unitariamente es el método <em>toJSON</em> que se utiliza para formatear notas.</p>\n<p>En algunas situaciones, puede ser beneficioso implementar algunas de las pruebas de backend simulando la base de datos en lugar de usar una base de datos real. Una biblioteca que podría usarse para esto es <a href=\"https://github.com/williamkapke/mongo-mock\">mongo-mock</a>.</p>\n<p>Dado que el backend de nuestra aplicación todavía es relativamente simple, tomaremos la decisión de probar toda la aplicación a través de su API REST, de modo que la base de datos también esté incluida. Este tipo de prueba, en la que se prueban varios componentes del sistema como un grupo, se denomina <a href=\"https://en.wikipedia.org/wiki/Integration_testing\">prueba de integración</a>.</p>\n<h3>Entorno de prueba</h3>\n<p>En uno de los capítulos anteriores del material del curso, mencionamos que cuando su servidor backend se ejecuta en Heroku, está en modo <i>producción</i>.</p>\n<p>La convención en Node es definir el modo de ejecución de la aplicación con la variable de entorno <i> NODE_ENV</i>. En nuestra aplicación actual, solo cargamos las variables de entorno definidas en el archivo <i>.env</i> si la aplicación <i>no</i> esta en modo producción.</p>\n<p>Es una práctica común definir modos separados para desarrollo y prueba.</p>\n<p>A continuación, cambiemos los scripts en nuestro <i>package.json</i> para que cuando se ejecuten las pruebas, <i>NODE_ENV</i> obtenga el valor <i>test</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=production node index.js\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=development nodemon index.js\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token property\">\"build:ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -rf build &amp;&amp; cd ../../../2/luento/notes &amp;&amp; npm run build &amp;&amp; cp -r build ../../../3/luento/notes-backend\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"git push heroku master\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deploy:full\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build:ui &amp;&amp; git add . &amp;&amp; git commit -m uibuild &amp;&amp; git push &amp;&amp; npm run deploy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"logs:prod\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"heroku logs --tail\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=test jest --verbose --runInBand\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>También agregamos <a href=\"https://jestjs.io/docs/en/cli.html#--runinband\">runInBand</a> al script npm que ejecuta las pruebas. Esta opción evitará que Jest ejecute pruebas en paralelo; discutiremos su importancia una vez que nuestras pruebas comiencen a usar la base de datos.</p>\n<p>Especificamos el modo de la aplicación para que sea <i>development</i> en el script <em>npm run dev</em> que usa nodemon. También especificamos que el comando predeterminado <em>npm start</em> definirá el modo como <i>production</i>.</p>\n<p>Hay un pequeño problema en la forma en que hemos especificado el modo de la aplicación en nuestros scripts: no funcionará en Windows. Podemos corregir esto instalando el paquete <a href=\"https://www.npmjs.com/package/cross-env\">cross-env</a> como una dependencia de desarrollo con el comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev cross-env</code></pre></div>\n<p>Entonces podemos lograr la compatibilidad multiplataforma utilizando la biblioteca cross-env en nuestros scripts npm definidos en <i>package.json</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=production node index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=development nodemon index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=test jest --verbose --runInBand\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora podemos modificar la forma en que se ejecuta nuestra aplicación en diferentes modos. Como ejemplo de esto, podríamos definir la aplicación para usar una base de datos de prueba separada cuando esté ejecutando pruebas.</p>\n<p>Podemos crear nuestra base de datos de prueba separada en Mongo DB Atlas. Esta no es una solución óptima en situaciones en las que muchas personas desarrollan la misma aplicación. La ejecución de pruebas, en particular, generalmente requiere que las pruebas que se ejecutan simultáneamente no utilicen una sola instancia de base de datos.</p>\n<p>Sería mejor ejecutar nuestras pruebas usando una base de datos que esté instalada y ejecutándose en la máquina local del desarrollador. La solución óptima sería que cada ejecución de prueba use su propia base de datos separada. Esto es \"relativamente simple\" de lograr <a href=\"https://docs.mongodb.com/manual/core/inmemory/\">ejecutando Mongo en memoria</a> o usando contenedores <a href=\"https://www.docker.com\">Docker</a>. No complicaremos las cosas y en su lugar continuaremos usando la base de datos MongoDB Atlas.</p>\n<p>Hagamos algunos cambios en el módulo que define la configuración de la aplicación: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">MONGODB_URI</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MONGODB_URI</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token constant\">MONGODB_URI</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TEST_MONGODB_URI</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">MONGODB_URI</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">PORT</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El archivo <i>.env</i> tiene <i>variables independientes</i> para las direcciones de la base de datos de desarrollo y prueba:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">MONGODB_URI</span><span class=\"token operator\">=</span>mongodb+srv://fullstack:secred@cluster0-ostce.mongodb.net/note-app?retryWrites<span class=\"token operator\">=</span>true\n<span class=\"token assign-left variable\">PORT</span><span class=\"token operator\">=</span><span class=\"token number\">3001</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token assign-left variable\">TEST_MONGODB_URI</span><span class=\"token operator\">=</span>mongodb+srv://fullstack:secret@cluster0-ostce.mongodb.net/note-app-test?retryWrites<span class=\"token operator\">=</span>true</span></code></pre></div>\n<p>El módulo <em>config</em> que hemos implementado se parece ligeramente al paquete <a href=\"https://github.com/lorenwest/node-config\">node-config</a>. Escribir nuestra propia implementación está justificado porque nuestra aplicación es simple, y también porque nos enseña lecciones valiosas. </p>\n<p>Estos son los únicos cambios que debemos realizar en el código de nuestra aplicación. </p>\n<p>Puede encontrar el código para nuestra aplicación actual en su totalidad en la rama <i>part4-2</i> de <a href=\"https://github.com/fullstack-hy/part3-notes-backend/%C3%A1rbol/part4-2\">este repositorio de github</a>.</p>\n<h3>supertest</h3>\n<p>Usemos el paquete <a href=\"https://github.com/visionmedia/supertest\">supertest</a> para ayudarnos a escribir nuestras pruebas para probar la API.</p>\n<p>Instalaremos el paquete como una dependencia de desarrollo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev supertest</code></pre></div>\n<p>Escribamos nuestra primera prueba en el archivo <i>tests/note_api.test.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> supertest <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'supertest'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../app'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token function\">supertest</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notes are returned as json'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> api\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">/</span>application<span class=\"token operator\">/</span>json<span class=\"token operator\">/</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La prueba importa la aplicación Express del módulo <i>app.js</i> y la envuelve con la función <i>supertest</i> en un objeto llamado <a href=\"https://github.com/visionmedia/superagent\">superagent</a>. Este objeto se asigna a la variable <i>api</i> y las pruebas pueden usarlo para realizar solicitudes HTTP al backend.</p>\n<p>Nuestra prueba realiza una solicitud HTTP GET a la URL <i>api/notes</i> y verifica que se responda a la solicitud con el código de estado 200. La prueba también verifica que el encabezado <i>Content-Type</i> se establece en <i>application/json</i>, lo que indica que los datos están en el formato deseado.</p>\n<p>La prueba contiene algunos detalles que exploraremos <a href=\"/es/part4/testing_the_backend#async-await\">un poco más adelante</a>. La función de flecha que define la prueba está precedida por la palabra clave <i>async</i> y la llamada al método para el objeto <i>api</i> está precedida por la palabra clave <i>await</i>. Escribiremos algunas pruebas y luego echaremos un vistazo más de cerca a esta magia asyn/await. No se preocupe por ellos por ahora, solo tenga la seguridad de que las pruebas de ejemplo funcionan correctamente. La sintaxis async/await está relacionada con el hecho de que hacer una solicitud a la API es una operación <i>asincrónica</i>. La <a href=\"https://facebook.github.io/jest/docs/en/asynchronous.html\">sintaxis async/await</a> se puede utilizar para escribir código asincrónico con la apariencia de código síncrono.</p>\n<p>Una vez que todas las pruebas (actualmente solo hay una) hayan terminado de ejecutarse, tenemos que cerrar la conexión a la base de datos utilizada por Mongoose. Esto se puede lograr fácilmente con el método <a href=\"https://facebook.github.io/jest/docs/en/api.html#afterallfn-timeout\">afterAll</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Al ejecutar las pruebas, es posible que se encuentre con la siguiente advertencia de consola:</p>\n<picture><img src=\"/static/7532c5c3fb1d0e3adfdb44969c26ab14/5a190/8.png\" srcset=\"/static/7532c5c3fb1d0e3adfdb44969c26ab14/772e8/8.png 200w,\n/static/7532c5c3fb1d0e3adfdb44969c26ab14/e17e5/8.png 400w,\n/static/7532c5c3fb1d0e3adfdb44969c26ab14/5a190/8.png 800w,\n/static/7532c5c3fb1d0e3adfdb44969c26ab14/c1b63/8.png 1200w,\n/static/7532c5c3fb1d0e3adfdb44969c26ab14/29007/8.png 1600w,\n/static/7532c5c3fb1d0e3adfdb44969c26ab14/d3d45/8.png 1614w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Si esto ocurre, sigamos las <a href=\"https://mongoosejs.com/docs/jest.html\">instrucciones</a> y agregue un archivo <i>jest.config.js</i> en la raíz del proyecto con el siguiente contenido:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  testEnvironment<span class=\"token operator\">:</span> <span class=\"token string\">'node'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Un pequeño pero importante detalle: al <a href=\"/es/part4/structure_of_backend_application_introduction_to_testing#project-structure\">principio</a> de esta parte extrajimos la aplicación Express en el archivo <i>app.js</i>, y el rol del archivo <i>index.js</i> se cambió para iniciar la aplicación en el puerto especificado con el objeto <i>http</i> incorporado de Node:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./app'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the actual Express app</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils/config'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils/logger'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>config<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Las pruebas solo usan la aplicación express definida en el archivo <i>app.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> supertest <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'supertest'</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../app'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token function\">supertest</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span></span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>La documentación de supertest dice lo siguiente:</p>\n<blockquote>\n<p><i>si el servidor no está escuchando para las conexiones, entonces está vinculado a un puerto efímero para usted, por lo que no es necesario realizar un seguimiento de los puertos.</i></p>\n</blockquote>\n<p>En otras palabras, supertest se encarga de que la aplicación que se está probando se inicie en el puerto que utiliza internamente.</p>\n<p>Escribamos algunas pruebas más:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'there are two notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the first note is about HTTP methods'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HTML is easy'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ambas pruebas almacenan la respuesta de la solicitud a la variable <em>response</em>, y a diferencia de la prueba anterior que utilizó los métodos proporcionados por <em>supertest</em> para verificar el código de estado y los encabezados, esta vez estamos inspeccionando los datos de respuesta almacenados en la propiedad <i>response.body</i>. Nuestras pruebas verifican el formato y el contenido de los datos de respuesta con el método <a href=\"https://facebook.github.io/jest/docs/en/expect.html#content\">expect</a> de Jest.</p>\n<p>El beneficio de usar la sintaxis async/await está comenzando a ser evidente. Normalmente tendríamos que usar funciones de devolución de llamada para acceder a los datos devueltos por las promesas, pero con la nueva sintaxis las cosas son mucho más cómodas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// la ejecución llega aquí solo después de que se completa la solicitud HTTP</span>\n<span class=\"token comment\">// el resultado de la solicitud HTTP se guarda en respuesta variable</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- HTTP-pyyntöjen tiedot konsoliin kirjoittava middleware häiritsee hiukan testien tulostusta . Muutetaan loggeria siten, että testausmoodissa lokiviestit eivät tulostu konsoliin: -->\n<p>El middleware que genera información sobre las solicitudes HTTP está obstruyendo la salida de ejecución de la prueba. Modifiquemos el logger para que no imprima en la consola en modo de prueba:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">info</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">error</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  info<span class=\"token punctuation\">,</span> error\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Inicializando la base de datos antes de las pruebas</h3>\n<p>Las pruebas parecen ser fáciles y nuestras pruebas están pasando. Sin embargo, nuestras pruebas son malas, ya que dependen del estado de la base de datos (que resulta ser correcto en mi base de datos de prueba). Para hacer nuestras pruebas más robustas, tenemos que restablecer la base de datos y generar los datos de prueba necesarios de manera controlada antes de ejecutar las pruebas.</p>\n<p>Nuestras pruebas ya están usando la función <a href=\"https://facebook.github.io/jest/docs/en/api.html#afterallfn-timeout\">afterAll</a> de Jest para cerrar la conexión a la base de datos después de que las pruebas hayan terminado de ejecutarse . Jest ofrece muchas otras <a href=\"https://facebook.github.io/jest/docs/en/setup-teardown.html#content\">funciones</a> que se pueden usar para ejecutar operaciones una vez antes de que se ejecute cualquier prueba, o cada vez antes de que se ejecuta una prueba.</p>\n<p>Inicialicemos la base de datos <i>antes de cada prueba</i> con la función <a href=\"https://jestjs.io/docs/en/api.html#beforeeachfn-timeout\">beforeEach</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> supertest <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'supertest'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token function\">supertest</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/note'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> initialNotes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    content<span class=\"token operator\">:</span> <span class=\"token string\">'HTML is easy'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    content<span class=\"token operator\">:</span> <span class=\"token string\">'Browser can execute only Javascript'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">]</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">let</span> noteObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>initialNotes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">await</span> noteObject<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  noteObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>initialNotes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">await</span> noteObject<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token comment\">// ...</span></code></pre></div>\n<p>La base de datos se borra al principio, y luego guardamos las dos notas almacenadas en la matriz <em>initialNotes</em> en la base de datos. Al hacer esto, nos aseguramos de que la base de datos esté en el mismo estado antes de ejecutar cada prueba.</p>\n<p>También hagamos los siguientes cambios en las dos últimas pruebas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'all notes are returned'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>initialNotes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a specific note is within the returned notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">'Browser can execute only Javascript'</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Preste especial atención al expect en la última prueba. El comando <code>response.body.map (r => r.content)</code> se usa para crear una matriz que contiene el contenido de cada nota devuelta por la API. El método <a href=\"https://facebook.github.io/jest/docs/en/expect.html#tocontainitem\">toContain</a> se utiliza para comprobar que la nota que se le ha asignado como parámetro está en la lista de notas devueltas por la API.</p>\n<h3>Ejecución de pruebas una por una</h3>\n<p>El comando <em>npm test</em> ejecuta todas las pruebas de la aplicación. Cuando escribimos pruebas, generalmente es aconsejable ejecutar solo una o dos pruebas. Jest ofrece algunas formas diferentes de lograr esto, una de las cuales es el método <a href=\"https://jestjs.io/docs/en/api#testonlyname-fn-timeout\">only</a>. Si las pruebas se escriben en muchos archivos, este método no es excelente.</p>\n<p>Una mejor opción es especificar las pruebas que deben ejecutarse como parámetro del comando <i>npm test</i>.</p>\n<p>El siguiente comando solo ejecuta las pruebas que se encuentran en el archivo <i>tests/ note_api.test.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm test <span class=\"token operator\">--</span> tests<span class=\"token operator\">/</span>note_api<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>La opción <i>-t</i> se puede utilizar para ejecutar pruebas con un nombre específico:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm test <span class=\"token operator\">--</span> <span class=\"token operator\">-</span>t <span class=\"token string\">'a specific note is within the returned notes'</span></code></pre></div>\n<p>El parámetro proporcionado puede hacer referencia al nombre de la prueba o al bloque de descripción. El parámetro también puede contener solo una parte del nombre. El siguiente comando ejecutará todas las pruebas que contengan <i>notes</i> en su nombre:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm test <span class=\"token operator\">--</span> <span class=\"token operator\">-</span>t <span class=\"token string\">'notes'</span></code></pre></div>\n<!-- * HUOM *: yksittäisiä testejä suoritettaessa saattaa mangosta-yhteys jäädä auki, mikäli yhtään yhteyttä hyödyntävää testiä ei ajeta. Ongelma seurannee siitä, että supertest alustaa yhteyden, mutta jest ei suorita afterAll-osiota. -->\n<p><strong>NB</strong>: Cuando se ejecuta una sola prueba, la conexión de mongoose puede permanecer abierta si no se ejecuta ninguna prueba con la conexión.\nEl problema puede deberse al hecho de que supertest prepara la conexión, pero jest no ejecuta la parte afterAll del código.</p>\n<h3>async/await</h3>\n<p>Antes de escribir más pruebas, echemos un vistazo a las palabras clave <em>async</em> y <em>await</em>.</p>\n<p>La sintaxis async/await que se introdujo en ES7 hace posible el uso de <i>funciones asincrónicas que devuelven una promesa</i> de una manera que hace que el código parezca sincrónico.</p>\n<p>Como ejemplo, la obtención de notas de la base de datos con promesas se ve así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">notes</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'operation returned the following notes'</span><span class=\"token punctuation\">,</span> notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El método <em>Note.find()</em> devuelve una promesa y podemos acceder al resultado de la operación registrando una función de devolución de llamada con el método <em>then</em>.</p>\n<p>Todo el código que queremos ejecutar una vez que finalice la operación está escrito en la función de devolución de llamada. Si quisiéramos realizar varias llamadas a funciones asincrónicas en secuencia, la situación pronto se volvería dolorosa. Las llamadas asincrónicas deberían realizarse en la devolución de llamada. Esto probablemente conduciría a un código complicado y podría potencialmente dar lugar a un llamado <a href=\"http://callbackhell.com/\">infierno de devolución de llamada</a>.</p>\n<p>Al <a href=\"https://javascript.info/promise-chaining\">encadenar promesas</a> podríamos mantener la situación un poco bajo control y evitar el infierno de devolución de llamada creando una cadena bastante limpia de llamadas a métodos <em>then</em>. Hemos visto algunos de estos durante el curso. Para ilustrar esto, puede ver un ejemplo artificial de una función que recupera todas las notas y luego elimina la primera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">notes</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> notes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the first note is removed'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// more code here</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La cadena de then está bien, pero podemos hacerlo mejor. Las <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\">funciones del generador</a> introducidas en ES6 proporcionaron una <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch4.md#iterating-generators-asynchronously\">forma inteligente</a> de escribir código asincrónico de una manera que \"parezca sincrónica\". La sintaxis es un poco torpe y no se usa mucho.</p>\n<p>Las palabras clave <em>async</em> y <em>await</em> introducidas en ES7 traen la misma funcionalidad que los generadores, pero de una manera comprensible y sintácticamente más limpia a las manos de todos los ciudadanos del mundo JavaScript.</p>\n<p>Podríamos obtener todas las notas en la base de datos utilizando el operador <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\">await</a> como este:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'operation returned the following notes'</span><span class=\"token punctuation\">,</span> notes<span class=\"token punctuation\">)</span></code></pre></div>\n<p>El código se ve exactamente como el código síncrono. La ejecución del código se detiene en <em>const notes = await Note.find({})</em> y espera hasta que se <i>cumpla</i> la promesa relacionada, y luego continúa su ejecución a la siguiente línea. Cuando la ejecución continúa, el resultado de la operación que devolvió una promesa se asigna a la variable <em>notes</em>.</p>\n<p>El ejemplo un poco complicado presentado anteriormente podría implementarse usando await como este:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> notes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the first note is removed'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Gracias a la nueva sintaxis, el código es mucho más simple que la cadena then anterior.</p>\n<p>Hay algunos detalles importantes a los que se debe prestar atención cuando se usa la sintaxis async/await. Para utilizar el operador await con operaciones asincrónicas, deben devolver una promesa. Esto no es un problema como tal, ya que las funciones asincrónicas regulares que utilizan devoluciones de llamada son fáciles de envolver en promesas.</p>\n<p>La palabra clave await no se puede usar en cualquier parte del código JavaScript. El uso de await solo es posible dentro de una función <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async</a>.</p>\n<p>Esto significa que para que los ejemplos anteriores funcionen, deben utilizar funciones asíncronas. Observe la primera línea en la definición de la función de flecha:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'operation returned the following notes'</span><span class=\"token punctuation\">,</span> notes<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> notes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the first note is removed'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>El código declara que la función asignada a <em>main</em> es asíncrona. Después de esto, el código llama a la función con <code>main()</code>.</p>\n<h3>async/await en el backend</h3>\n<p>Cambiemos el backend a async y await. Como todas las operaciones asincrónicas se realizan actualmente dentro de una función, es suficiente cambiar las funciones del controlador de ruta en funciones asincrónicas.</p>\n<p>La ruta para obtener todas las notas se cambia a la siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Podemos verificar que nuestra refactorización fue exitosa probando el endpoint a través del navegador y ejecutando las pruebas que escribimos anteriormente. </p>\n<p>Puede encontrar el código para nuestra aplicación actual en su totalidad en la rama <i>part4-3</i> de <a href=\"https://github.com/fullstack-hy/part3-notes-backend/tree/part4-3\">este repositorio de Github</a>.</p>\n<h3>Más pruebas y refactorización del backend</h3>\n<p>Cuando el código se refactoriza, siempre existe el riesgo de <a href=\"https://en.wikipedia.org/wiki/Regression_testing\">regresión</a>, lo que significa que la funcionalidad existente puede romperse. Refactoricemos las operaciones restantes escribiendo primero una prueba para cada ruta de la API.</p>\n<p>Comencemos con la operación para agregar una nueva nota. Escribamos una prueba que agregue una nueva nota y verifique que la cantidad de notas devueltas por la API aumente y que la nota recién agregada esté en la lista.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a valid note can be added'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'async/await simplifies making async calls'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">await</span> api\n    <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>newNote<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">application\\/json</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>initialNotes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'async/await simplifies making async calls'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La prueba pasa justo como nosotros esperabamos que lo hiciera.</p>\n<p>Escribamos también una prueba que verifique que una nota sin contenido no se guardará en la base de datos.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'note without content is not added'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">await</span> api\n    <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>newNote<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>initialNotes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ambas pruebas verifican el estado almacenado en la base de datos después de la operación de guardado, obteniendo todas las notas de la aplicación.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Los mismos pasos de verificación se repetirán en otras pruebas más adelante, y es una buena idea extraer estos pasos en funciones auxiliares. Agreguemos la función en un nuevo archivo llamado <i>tests/test_helper.js</i> que está en el mismo directorio que el archivo de prueba.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/note'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> initialNotes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'HTML is easy'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Browser can execute only Javascript'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nonExistingId</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> content<span class=\"token operator\">:</span> <span class=\"token string\">'willremovethissoon'</span><span class=\"token punctuation\">,</span> date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> note<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">notesInDb</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  initialNotes<span class=\"token punctuation\">,</span> nonExistingId<span class=\"token punctuation\">,</span> notesInDb\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El módulo define la función <em>notesInDb</em> que se puede usar para verificar las notas almacenadas en la base de datos. La matriz <em>initialNotes</em> que contiene el estado inicial de la base de datos también está en el módulo. También definimos la función <em>nonExistingId</em> con anticipación, que se puede usar para crear un ID de objeto de base de datos que no pertenezca a ningún objeto de nota en la base de datos.</p>\n<p>Nuestras pruebas ahora pueden usar el módulo auxiliar y cambiarse así: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> supertest <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'supertest'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> helper <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test_helper'</span><span class=\"token punctuation\">)</span></span><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token function\">supertest</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/note'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">let</span> noteObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">await</span> noteObject<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  noteObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">await</span> noteObject<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notes are returned as json'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> api\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">application\\/json</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'all notes are returned'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a specific note is within the returned notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'Browser can execute only Javascript'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a valid note can be added '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'async/await simplifies making async calls'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">await</span> api\n    <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>newNote<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">application\\/json</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notesAtEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">notesInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>notesAtEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> notesAtEnd<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></span>  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'async/await simplifies making async calls'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'note without content is not added'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">await</span> api\n    <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>newNote<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notesAtEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">notesInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>notesAtEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> </code></pre></div>\n<p>El código que usa promesas funciona y las pruebas pasan. Estamos listos para refactorizar nuestro código para usar la sintaxis async/await.</p>\n<p>Realizamos los siguientes cambios en el código que se encarga de agregar una nueva nota (observe que la definición del controlador de ruta está precedida por la palabra clave <em>async</em>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> savedNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Hay un pequeño problema con nuestro código: no manejamos situaciones de error. ¿Cómo debemos lidiar con ellos?</p>\n<h3>Manejo de errores y async/await</h3>\n<p>Si hay una excepción al manejar la solicitud POST terminamos en una situación familiar:</p>\n<picture><img src=\"/static/58f3a7f3fa30d1a45c4330ee6f0c83d8/5a190/6.png\" srcset=\"/static/58f3a7f3fa30d1a45c4330ee6f0c83d8/772e8/6.png 200w,\n/static/58f3a7f3fa30d1a45c4330ee6f0c83d8/e17e5/6.png 400w,\n/static/58f3a7f3fa30d1a45c4330ee6f0c83d8/5a190/6.png 800w,\n/static/58f3a7f3fa30d1a45c4330ee6f0c83d8/c1b63/6.png 1200w,\n/static/58f3a7f3fa30d1a45c4330ee6f0c83d8/29007/6.png 1600w,\n/static/58f3a7f3fa30d1a45c4330ee6f0c83d8/6e29b/6.png 1610w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>En otras palabras, terminamos con un rechazo de promesa no gestionado, y la solicitud nunca recibe una respuesta.</p>\n<p>Con async/await, la forma recomendada de lidiar con las excepciones es el viejo y familiar mecanismo <em>try/catch</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> savedNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El bloque catch simplemente llama la función <em>next</em>, que pasa el manejo de solicitudes al middleware de manejo de errores.</p>\n<p>Después de realizar el cambio, todas nuestras pruebas pasarán una vez más.</p>\n<p>A continuación, escribamos pruebas para obtener y eliminar una nota individual:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a specific note can be viewed'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notesAtStart <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">notesInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> noteToView <span class=\"token operator\">=</span> notesAtStart<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> resultNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/notes/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>noteToView<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">application\\/json</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> processedNoteToView <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>noteToView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>resultNote<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>processedNoteToView<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a note can be deleted'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notesAtStart <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">notesInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> noteToDelete <span class=\"token operator\">=</span> notesAtStart<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">await</span> api</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/notes/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>noteToDelete<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> notesAtEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">notesInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>notesAtEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>\n    helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> notesAtEnd<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>noteToDelete<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>En la primera prueba, el objeto de nota que recibimos como que el cuerpo de la respuesta pasa por la serialización y el análisis de JSON. Este procesamiento convertirá el tipo de valor de propiedad <em>date</em> del objeto de nota del objeto <em>Date</em> en una cadena. Debido a esto, no podemos comparar directamente la igualdad de <em>resultNote.body</em> y <em>noteToView</em>. En su lugar, primero debemos realizar una serialización JSON y un análisis similares para <em>noteToView</em> como lo hace el servidor para el objeto note.</p>\n<p>Ambas pruebas comparten una estructura similar. En la fase de inicialización, obtienen una nota de la base de datos. Después de esto, las pruebas llaman a la operación real que se está probando, que se resalta en el bloque de código. Por último, las pruebas verifican que el resultado de la operación sea el esperado.</p>\n<p>Las pruebas pasan y podemos refactorizar con seguridad las rutas probadas para usar async/await:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nnotesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndRemove</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Puede encontrar el código para nuestra aplicación actual en su totalidad en la rama <i>part4-4</i> de <a href=\"https://github.com/fullstack-hy/part3-notes-backend/tree/part4-4\">este repositorio de Github</a>.</p>\n<h3>Eliminando el try-catch</h3>\n<!-- Async / await selkeyttää koodia jossain määrin, mutta sen 'hinta' en poikkeusten käsittelyn edellyttämä <i> try / catch </i> -rakenne. Kaikki routejen käsittelijät noudattavat samaa kaavaa -->\n<p>Async/await despeja un poco el código, pero el 'precio' es la estructura <i>try/catch</i> necesaria para detectar excepciones.\nTodos los manejadores de ruta siguen la misma estructura</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do the async operations here</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- Mieleen herää kysymys, olisiko koodia mahdollista refaktoroida siten, että <i> atrapar </i> saataisiin refaktoroitua ulos metodeista? -->\n<p>Uno comienza a preguntarse, ¿sería posible refactorizar el código para eliminar el <i>catch</i> de los métodos?</p>\n<!-- Kirjasto [express-async-errors] (https://github.com/davidbanham/express-async-errors) tuo tilanteeseen helpotuksen. -->\n<p>La biblioteca <a href=\"https://github.com/davidbanham/express-async-errors\">express-async-errors</a> tiene una solución para esto.</p>\n<!-- Asennetaan kirjasto -->\n<p>Instalemos la biblioteca</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express-async-errors</code></pre></div>\n<!-- Kirjaston käyttö en <i> todella </i> helppoa. \n Kirjaston koodi otetaan käyttöön tiedostossa <i> src / app.js </i>: -->\n<p>Usar la biblioteca es <i>muy</i> fácil.\nIntroduce la biblioteca en <i>app.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils/config'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-async-errors'</span><span class=\"token punctuation\">)</span></span><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cors'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> notesRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/notes'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils/middleware'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils/logger'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app</code></pre></div>\n<!-- Kirjaston koodiin sisällyttämän \"magian\" ansiosta pääsemme kokonaan eroon try-catch-lauseista. Muistiinpanon poistamisesta huolehtiva route -->\n<p>La 'magia' de la biblioteca nos permite eliminar por completo los bloques try-catch.\nPor ejemplo, la ruta para eliminar una nota</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndRemove</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- muuttuu muotoon -->\n<p>se convierte en</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndRemove</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- Kirjaston ansiosta kutsua _next (excepción) _ ei siis enää tarvita, kirjasto hoitaa asian konepellin alla, eli jos <i> async </i> -funktiona määritellyn routen sisällä syntyy poikkeus, siirtyy suoritus automaattisesti virheenkäsittelijämiddlewareen. -->\n<p>Debido a la biblioteca, ya no necesitamos la llamada <em>next(exception)</em>.\nLa biblioteca se encarga de todo lo que hay debajo del capó. Si ocurre una excepción en una ruta <i>async</i>, la ejecución se pasa automáticamente al middleware de manejo de errores.</p>\n<!-- Muut routet yksinkertaistuvat seuraavasti: -->\n<p>Las otras rutas se convierten en:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> savedNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nnotesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<!-- Sovelluksen tämänhetkinen koodi en kokonaisuudessaan [githubissa] (https://github.com / fullstack-hy2020 / part3-notes-backend / tree / part4-5), haarassa <i> part4-5 </i>. -->\n<p>El código de nuestra aplicación se puede encontrar en <a href=\"https://github.com/fullstack-hy/part3-notes-backend/tree/part4-5\">github</a>, rama <i>part4-5</i>.</p>\n<h3>Optimización de la función beforeEach</h3>\n<p>Volvamos a escribir nuestras pruebas y echemos un vistazo más de cerca a la función <em>beforeEach</em> que configura las pruebas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> noteObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> noteObject<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  noteObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> noteObject<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La función guarda las dos primeras notas de la matriz <em>helper.initialNotes</em> en la base de datos con dos operaciones separadas. La solución está bien, pero hay una mejor manera de guardar varios objetos en la base de datos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cleared'</span><span class=\"token punctuation\">)</span>\n\n  helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> noteObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> noteObject<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'saved'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notes are returned as json'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'entered test'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Guardamos las notas almacenadas en la matriz en la base de datos dentro de un loop <em>forEach</em>. Sin embargo, las pruebas no parecen funcionar del todo, por lo que hemos agregado algunos registros de la consola para ayudarnos a encontrar el problema.</p>\n<p>La consola muestra el siguiente resultado:</p>\n<pre>\ncleared\ndone\nentered test\nsaved\nsaved\n</pre>\n<p>A pesar de nuestra uso de la sintaxis async/await, nuestra solución no funciona como esperábamos. ¡La ejecución de la prueba comienza antes de que se inicialice la base de datos!</p>\n<p>El problema es que cada iteración del bucle forEach genera su propia operación asincrónica, y <em>beforeEach</em> no esperará a que terminen de ejecutarse. En otras palabras, los comandos <em>await</em> definidos dentro del bucle <em>forEach</em> no están en la función <em>beforeEach</em>, sino en funciones separadas que <em>beforeEach</em> no esperará.</p>\n<p>Dado que la ejecución de las pruebas comienza inmediatamente después de que <em>beforeEach</em> haya terminado de ejecutarse, la ejecución de las pruebas comienza antes de que se inicialice el estado de la base de datos.</p>\n<p>Una forma de arreglar esto es esperar a que todas las operaciones asincrónicas terminen de ejecutarse con el método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\">Promise.all</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> noteObjects <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span>initialNotes\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> promiseArray <span class=\"token operator\">=</span> noteObjects<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promiseArray<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La solución es bastante avanzado a pesar de su apariencia compacta. La variable <em>noteObjects</em> se asigna a una matriz de objetos Mongoose que se crean con el constructor <em>Note</em> para cada una de las notas en la matriz <em>helper.initialNotes</em>. La siguiente línea de código crea una nueva matriz que <i>consiste en promesas</i>, que se crean llamando al método <em>save</em> de cada elemento en la matriz <em>noteObjects</em>. En otras palabras, es una serie de promesas para guardar cada uno de los elementos en la base de datos.</p>\n<p>El método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\">Promise.all</a> se puede utilizar para transformar una serie de promesas en una única promesa, que se <i>cumplirá</i> una vez que se resuelva cada promesa en la matriz que se le pasa como parámetro. La última línea de código <em>await Promise.all(promiseArray)</em> espera que finalice cada promesa de guardar una nota, lo que significa que la base de datos se ha inicializado.</p>\n<blockquote>\n<p>Aún se puede acceder a los valores devueltos de cada promesa en la matriz cuando se usa el método Promise.all. Si esperamos a que se resuelvan las promesas con la sintaxis <em>await</em> <em>const results = await Promise.all (promiseArray)</em>, la operación devolverá una matriz que contiene los valores resueltos para cada promesa en <em>promiseArray</em>, y aparecen en el mismo orden que las promesas en la matriz.</p>\n</blockquote>\n<p>Promise.all ejecuta las promesas que recibe en paralelo. Si las promesas deben ejecutarse en un orden particular, esto será problemático. En situaciones como esta, las operaciones se pueden ejecutar dentro de un <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">for ... of</a>, que garantiza una determinada orden de ejecución.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> note <span class=\"token keyword\">of</span> helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> noteObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> noteObject<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La naturaleza asincrónica de JavaScript puede llevar a un comportamiento sorprendente por esta razón, es importante prestar mucha atención al usar la sintaxis async/await. Aunque la sintaxis hace que sea más fácil lidiar con las promesas, ¡es necesario entender cómo funcionan las promesas!</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 4.8.-4.12.</h3>\n<p><strong>NB:</strong> el material usa el comparador <a href=\"https://facebook.github.io/jest/docs/en/expect.html#tocontainitem\">toContain</a> en varios lugares para verificar que una matriz contiene un elemento específico. Vale la pena señalar que el método utiliza el operador === para comparar y hacer coincidir elementos, lo que significa que a menudo no es adecuado para hacer coincidir objetos. En la mayoría de los casos, el método apropiado para verificar objetos en matrices es el comparador <a href=\"https://facebook.github.io/jest/docs/en/expect.html#tocontainequalitem\">toContainEqual</a>. Sin embargo, las soluciones del modelo no comprueban objetos en matrices con comparadores, por lo que no es necesario utilizar el método para resolver los ejercicios.</p>\n<p><strong>Advertencia:</strong> Si se encuentra utilizando los métodos async/await y <i>then</i> en el mismo código, es casi seguro que está haciendo algo mal. Use uno u otro y no mezcle los dos.</p>\n<h4>4.8: Pruebas de lista de blogs, paso 1</h4>\n<p>Utilice el paquete supertest para escribir una prueba que realice una solicitud HTTP GET a la URL <i>/api/blogs</i>. Verifique que la aplicación de la lista de blogs devuelva la cantidad correcta de publicaciones de blog en formato JSON.</p>\n<p>Una vez finalizada la prueba, refactorice el controlador de ruta para usar la sintaxis async/await en lugar de promesas.</p>\n<p>Tenga en cuenta que tendrá que realizar cambios similares en el código que se hicieron <a href=\"/es/part4/testing_the_backend#test-environment\">en el material</a>,</p>\n<p><strong>NB:</strong> Al ejecutar las pruebas, es posible que se encuentre con la siguiente advertencia:</p>\n<picture><img src=\"/static/e8bcb367be162a9be3c71b7f47d855a2/5a190/8a.png\" srcset=\"/static/e8bcb367be162a9be3c71b7f47d855a2/772e8/8a.png 200w,\n/static/e8bcb367be162a9be3c71b7f47d855a2/e17e5/8a.png 400w,\n/static/e8bcb367be162a9be3c71b7f47d855a2/5a190/8a.png 800w,\n/static/e8bcb367be162a9be3c71b7f47d855a2/c1b63/8a.png 1200w,\n/static/e8bcb367be162a9be3c71b7f47d855a2/29007/8a.png 1600w,\n/static/e8bcb367be162a9be3c71b7f47d855a2/5eb90/8a.png 1612w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Si esto sucede, siga las <a href=\"https://mongoosejs.com/docs/jest.html\">instrucciones</a> y cree un nuevo archivo <i>jest.config.js</i> en la raíz del proyecto con el siguiente contenido:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  testEnvironment<span class=\"token operator\">:</span> <span class=\"token string\">'node'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>NB:</strong> cuando estás escribiendo tus pruebas <strong><i>es mejor no ejecutar todas tus pruebas</i></strong>, solo ejecuta aquellas en las que estás trabajando. Lea más sobre esto <a href=\"/es/part4/testing_the_backend#running-tests-one-by-one\">aquí</a>. </p>\n<h4>4.9*: Pruebas de lista de blogs, paso 2</h4>\n<p>Escriba una prueba que verifique que la propiedad de identificador único de las publicaciones del blog se llame <i>id</i>, de manera predeterminada, la base de datos nombra la propiedad <i>_id</i>. La verificación de la existencia de una propiedad se realiza fácilmente con el comparador <a href=\"https://jestjs.io/docs/en/expect#tobedefined\">toBeDefined</a> de Jest.</p>\n<p>Realice los cambios necesarios en el código para que pase la prueba. El método <a href=\"/es/part3/save_data_to_mongo_db#backend-connected-to-a-database\">toJSON</a> discutido en la parte 3 es un lugar apropiado para definir el parámetro <i>id</i>.</p>\n<h4>4.10: Pruebas de lista de blogs, paso 3</h4>\n<p>Escriba una prueba que verifique que al realizar una solicitud HTTP POST a la URL <i>/api/blogs</i> se crea correctamente una nueva publicación de blog. Como mínimo, verifique que el número total de blogs en el sistema se incremente en uno. También puede verificar que el contenido de la publicación del blog se guarde correctamente en la base de datos.</p>\n<p>Una vez finalizada la prueba, refactorice la operación para usar async/await en lugar de promesas.</p>\n<h4>4.11 *: Pruebas de lista de blogs, paso 4</h4>\n<p>Escribe una prueba que verifique que si la propiedad <i>likes</i> falta en la solicitud, tendrá el valor 0 por defecto. No pruebes las otras propiedades de los blogs creados todavía.</p>\n<p>Realice los cambios necesarios en el código para que pase la prueba. </p>\n<h4>4.12*: Pruebas de lista de blogs, paso 5</h4>\n<p>Escriba una prueba relacionada con la creación de blogs nuevos a través del endpoint <i>/api/blogs</i>, que verifique que si faltan las propiedades <i>title</i> y <i>url</i> de los datos solicitados, el backend responde a la solicitud con el código de estado <i>400 Bad Request</i>.</p>\n<p>Realice los cambios necesarios en el código para que pase la prueba.</p>\n</div>\n<div class=\"content\">\n<h3>Pruebas de refactorización</h3>\n<p>Actualmente, nuestra prueba esta falto de cobertura. Algunas solicitudes como <i> GET /api/notes/:id </i> y <i> DELETE /api/notes/:id </i> no se prueban cuando la solicitud se envía con una identificación no válida. La agrupación y organización de las pruebas también podría mejorar, ya que todas las pruebas existen en el mismo \"nivel superior\" en el archivo de prueba. La legibilidad de la prueba mejoraría si agrupamos las pruebas relacionadas con bloques <i>describe</i>.</p>\n<p>A continuación se muestra un ejemplo del archivo de prueba después de realizar algunas mejoras menores:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> supertest <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'supertest'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> helper <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test_helper'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token function\">supertest</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/note'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> noteObjects <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span>initialNotes\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> promiseArray <span class=\"token operator\">=</span> noteObjects<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promiseArray<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when there is initially some notes saved'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notes are returned as json'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> api\n      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">application\\/json</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'all notes are returned'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a specific note is within the returned notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'Browser can execute only Javascript'</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'viewing a specific note'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'succeeds with a valid id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> notesAtStart <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">notesInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> noteToView <span class=\"token operator\">=</span> notesAtStart<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">const</span> resultNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api\n      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/notes/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>noteToView<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">application\\/json</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n      \n    <span class=\"token keyword\">const</span> processedNoteToView <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>noteToView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>resultNote<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>processedNoteToView<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fails with statuscode 404 if note does not exist'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> validNonexistingId <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">nonExistingId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>validNonexistingId<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">await</span> api\n      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/notes/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>validNonexistingId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fails with statuscode 400 id is invalid'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> invalidId <span class=\"token operator\">=</span> <span class=\"token string\">'5a3d5da59070081a82a3445'</span>\n\n    <span class=\"token keyword\">await</span> api\n      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/notes/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invalidId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addition of a new note'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'succeeds with valid data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      content<span class=\"token operator\">:</span> <span class=\"token string\">'async/await simplifies making async calls'</span><span class=\"token punctuation\">,</span>\n      important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">await</span> api\n      <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>newNote<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">application\\/json</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">const</span> notesAtEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">notesInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>notesAtEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> notesAtEnd<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'async/await simplifies making async calls'</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fails with status code 400 if data invaild'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">await</span> api\n      <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>newNote<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> notesAtEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">notesInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>notesAtEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deletion of a note'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'succeeds with status code 204 if id is valid'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> notesAtStart <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">notesInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> noteToDelete <span class=\"token operator\">=</span> notesAtStart<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">await</span> api\n      <span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/notes/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>noteToDelete<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> notesAtEnd <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">notesInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>notesAtEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveLength</span><span class=\"token punctuation\">(</span>\n      helper<span class=\"token punctuation\">.</span>initialNotes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> notesAtEnd<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>noteToDelete<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La salida de prueba se agrupa de acuerdo con los bloques <i>describe</i>:</p>\n<picture><img src=\"/static/e01cd957a7650eae2082279222b7cb5a/5a190/7.png\" srcset=\"/static/e01cd957a7650eae2082279222b7cb5a/772e8/7.png 200w,\n/static/e01cd957a7650eae2082279222b7cb5a/e17e5/7.png 400w,\n/static/e01cd957a7650eae2082279222b7cb5a/5a190/7.png 800w,\n/static/e01cd957a7650eae2082279222b7cb5a/c1b63/7.png 1200w,\n/static/e01cd957a7650eae2082279222b7cb5a/016a8/7.png 1576w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Todavía hay margen de mejora, pero es hora de seguir adelante.</p>\n<p>Esta forma de probar la API, al realizar solicitudes HTTP e inspeccionar la base de datos con Mongoose, no es de ninguna manera la única ni la mejor forma de realizar pruebas de integración a nivel de API para aplicaciones de servidor. No existe una mejor forma universal de escribir pruebas, ya que todo depende de la aplicación que se esté probando y de los recursos disponibles.</p>\n<p>Puede encontrar el código para nuestra aplicación actual en su totalidad en la rama <i>part4-6</i> de <a href=\"https://github.com/fullstack-hy/part3-notes-backend/tree/part4-6\">este repositorio de Github</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 4.13.-4.14.</h3>\n<h4>4.13 Expansiones de la lista de blogs, paso 1</h4>\n<p>Implementar la funcionalidad para eliminar un solo recurso de publicación de blog.</p>\n<p>Utilice la sintaxis async/await. Siga las convenciones de <a href=\"/es/part3/node_js_and_express#rest\">RESTful</a> al definir la API HTTP.</p>\n<p>No dude en implementar pruebas para la funcionalidad si lo desea. De lo contrario, verifique que la funcionalidad funcione con Postman o alguna otra herramienta.</p>\n<h4>4.14 Expansiones de listas de blogs, paso 2</h4>\n<p>Implementar la funcionalidad para actualizar la información de una publicación de blog individual.</p>\n<p>Utilice async / await.</p>\n<p>La aplicación principalmente necesita actualizar la cantidad de <i>likes</i> para una publicación de blog. Puede implementar esta funcionalidad de la misma manera que implementamos las notas de actualización en la <a href=\"/es/part3/save_data_to_mongo_db#other-operations\">parte 3</a>.</p>\n<p>No dude en implementar pruebas para la funcionalidad si lo desea. De lo contrario, verifique que la funcionalidad funcione con Postman o alguna otra herramienta.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/f800638504cdf371a12947fc31d52030/part-4.svg"},"part":4,"letter":"b","lang":"es"}}},"pageContext":{"part":4,"letter":"b","lang":"es"}},"staticQueryHashes":["3128451518"]}