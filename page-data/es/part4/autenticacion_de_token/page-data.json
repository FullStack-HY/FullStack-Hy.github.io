{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part4/autenticacion_de_token","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Los usuarios deben poder iniciar sesión en nuestra aplicación , y cuando un usuario inicia sesión, su información de usuario debe adjuntarse automáticamente a cualquier nota nueva que cree.</p>\n<p>Ahora implementaremos soporte para <a href=\"https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication#toc-how-token-based-works\">autenticación basada en token</a> para el backend.</p>\n<p>Los principios de la autenticación basada en tokens se describen en el siguiente diagrama de secuencia:</p>\n<picture><img src=\"/static/8b2839fe97680c325df6647121af66c3/5a190/16e.png\" srcset=\"/static/8b2839fe97680c325df6647121af66c3/772e8/16e.png 200w,\n/static/8b2839fe97680c325df6647121af66c3/e17e5/16e.png 400w,\n/static/8b2839fe97680c325df6647121af66c3/5a190/16e.png 800w,\n/static/8b2839fe97680c325df6647121af66c3/c1b63/16e.png 1200w,\n/static/8b2839fe97680c325df6647121af66c3/c211c/16e.png 1502w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<ul>\n<li>\n<p>El usuario comienza iniciando sesión usando un formulario de inicio de sesión implementado con React</p>\n<ul>\n<li>Agregaremos el formulario de inicio de sesión a la interfaz en <a href=\"/es/part5\">parte 5</a></li>\n</ul>\n</li>\n<li>Esto hace que el código React envíe el nombre de usuario y la contraseña a la dirección del servidor <i>/api/login</i> como una solicitud HTTP POST.</li>\n<li>\n<p>Si el nombre de usuario y la contraseña son correctos, el servidor genera un <i>token</i> que identifica de alguna manera al usuario que inició sesión.</p>\n<ul>\n<li>El token está firmado digitalmente, por lo que es imposible falsificarlo (con medios criptográficos)</li>\n</ul>\n</li>\n<li>El backend responde con un código de estado que indica que la operación fue exitosa y devuelve el token con la respuesta.</li>\n<li>El navegador guarda el token, por ejemplo, en el estado de una aplicación React.</li>\n<li>Cuando el usuario crea una nueva nota (o realiza alguna otra operación que requiera identificación), el código React envía el token al servidor con la solicitud.</li>\n<li>El servidor usa el token para identificar al usuario</li>\n</ul>\n<p>Primero implementemos la funcionalidad para iniciar sesión. Instale la librería <a href=\"https://github.com/auth0/node-jsonwebtoken\">jsonwebtoken</a>, que nos permite generar <a href=\"https://jwt.io/\">tokens web JSON</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> jsonwebtoken</code></pre></div>\n<p>El código para la funcionalidad de inicio de sesión va a los controladores de controllers/login.js.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span>\n\nloginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token string\">'invalid username or password'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> loginRouter</code></pre></div>\n<p>El código comienza buscando al usuario en la base de datos por el <i>nombre de usuario</i> adjunto a la solicitud.\nA continuación, verifica la <i>contraseña</i>, también adjunta a la solicitud.\nDebido a que las contraseñas en sí no se guardan en la base de datos, sino <i>hash</i> calculadas a partir de las contraseñas, el método <em>bcrypt.compare</em> se usa para verificar si la contraseña es correcta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si no se encuentra el usuario o la contraseña es incorrecta, se responde a la solicitud con el código de estado <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 unauthorized</a>. El motivo del error se explica en el cuerpo de respuesta.</p>\n<p>Si la contraseña es correcta, se crea un token con el método <em>jwt.sign</em>. El token contiene el nombre de usuario y la identificación de usuario en un formulario firmado digitalmente.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El token ha sido firmado digitalmente usando una cadena de variable de entorno <i>SECRET</i> como <i>secreto</i>.\nLa firma digital garantiza que solo las partes que conocen el secreto puedan generar un token válido.\nEl valor de la variable de entorno debe establecerse en el archivo <i>.env</i>.</p>\n<p>Una solicitud exitosa se responde con el código de estado <i>200 OK</i>. El token generado y el nombre de usuario del usuario se devuelven al cuerpo de la respuesta.</p>\n<p>Ahora, el código de inicio de sesión solo debe agregarse a la aplicación agregando el nuevo enrutador a <i>app.js</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/login'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Vamos a intentar logearnos usando el cliente REST de VS Code:</p>\n<picture><img src=\"/static/5c4c0fb60e15ec9c753e541a05002c3f/5a190/17e.png\" srcset=\"/static/5c4c0fb60e15ec9c753e541a05002c3f/772e8/17e.png 200w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/e17e5/17e.png 400w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/5a190/17e.png 800w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/c1b63/17e.png 1200w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/0f586/17e.png 1498w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>No funciona. Se imprime lo siguiente en la consola:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>node:32911<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Error: secretOrPrivateKey must have a value\n    at Object.module.exports <span class=\"token punctuation\">[</span>as sign<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/sign.js:101:20<span class=\"token punctuation\">)</span>\n    at loginRouter.post <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/controllers/login.js:26:21<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>node:32911<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async <span class=\"token keyword\">function</span> without a catch block, or by rejecting a promise <span class=\"token function\">which</span> was not handled with .catch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>. <span class=\"token punctuation\">(</span>rejection id: <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El comando _jwt.sign(userForToken, process.env.SECRET) _ falla. Olvidamos establecer un valor para la variable de entorno <i>SECRET</i>. Puede ser cualquier string. Cuando establecemos el valor en el archivo <i>.env</i>, el inicio de sesión funciona.</p>\n<p>Un inicio de sesión exitoso devuelve los detalles del usuario y el token:</p>\n<picture><img src=\"/static/2e2ddac76483e17fded8f6fcc43fd7d4/5a190/18ea.png\" srcset=\"/static/2e2ddac76483e17fded8f6fcc43fd7d4/772e8/18ea.png 200w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/e17e5/18ea.png 400w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/5a190/18ea.png 800w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/c1b63/18ea.png 1200w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/29007/18ea.png 1600w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/6f175/18ea.png 2036w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Un nombre de usuario o contraseña incorrectos devuelve un mensaje de error y el código de estado correcto:</p>\n<picture><img src=\"/static/49fe09c494b9e591fa8811b1772404d5/5a190/19ea.png\" srcset=\"/static/49fe09c494b9e591fa8811b1772404d5/772e8/19ea.png 200w,\n/static/49fe09c494b9e591fa8811b1772404d5/e17e5/19ea.png 400w,\n/static/49fe09c494b9e591fa8811b1772404d5/5a190/19ea.png 800w,\n/static/49fe09c494b9e591fa8811b1772404d5/c1b63/19ea.png 1200w,\n/static/49fe09c494b9e591fa8811b1772404d5/29007/19ea.png 1600w,\n/static/49fe09c494b9e591fa8811b1772404d5/aea0a/19ea.png 2018w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Limitación de la creación de nuevas notas a los usuarios registrados</h3>\n<p>Cambiemos la creación de nuevas notas para que solo sea posible si la solicitud de publicación tiene un token válido adjunto.\nLuego, la nota se guarda en la lista de notas del usuario identificado por el token.</p>\n<p>Hay varias formas de enviar el token desde el navegador al servidor. Usaremos el encabezado <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization\">Authorization</a>. El encabezado también indica qué <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#Authentication_schemes\">esquema de autenticación</a> se utiliza. Esto puede ser necesario si el servidor ofrece varias formas de autenticación.\nLa identificación del esquema le dice al servidor cómo se deben interpretar las credenciales adjuntas.</p>\n<p>El esquema <i>Bearer</i> se adapta a nuestras necesidades.</p>\n<p>En la práctica, esto significa que si el token es, por ejemplo, la cadena <i>eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW</i>, el encabezado de autorización tendrá el valor:</p>\n<pre>\nBearer eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW\n</pre>\n<p>Creación de nuevas notas cambiará de este modo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTokenFrom</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">request</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> authorization <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization <span class=\"token operator\">&amp;&amp;</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\nnotesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token function\">getTokenFrom</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'token missing or invalid'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> savedNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  user<span class=\"token punctuation\">.</span>notes <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La función auxiliar <em>getTokenFrom</em> aísla el token del encabezado de <i>authorization</i>. La validez del token se comprueba con <em>jwt.verify</em>. El método también decodifica el token, o devuelve el objeto en el que se basó el token:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El objeto decodificado del token contiene los campos <i>username</i> y <i>id</i>, que le dice al servidor quién hizo la solicitud.</p>\n<p>Si no hay ningún token, o el objeto decodificado del token no contiene la identidad del usuario (<em>decodedToken.id</em> no está definido), el código de estado de error <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 unauthorized</a> es devuelto y el motivo del error se explica en el cuerpo de la respuesta.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    error<span class=\"token operator\">:</span> <span class=\"token string\">'token missing or invalid'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cuando se resuelve la identidad del autor de la solicitud, la ejecución continúa como antes.</p>\n<p>Ahora se puede crear una nueva nota usando Postman si el encabezado <i>authorization</i> tiene el valor correcto, la cadena <i>bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ</i>, donde el segundo valor es el token devuelto por la operación <i>iniciar sesión</i>.</p>\n<p>Usando Postman, esto se ve de la siguiente manera:</p>\n<picture><img src=\"/static/fbedde4a1b76cfc0594778a6833312b2/5a190/20e.png\" srcset=\"/static/fbedde4a1b76cfc0594778a6833312b2/772e8/20e.png 200w,\n/static/fbedde4a1b76cfc0594778a6833312b2/e17e5/20e.png 400w,\n/static/fbedde4a1b76cfc0594778a6833312b2/5a190/20e.png 800w,\n/static/fbedde4a1b76cfc0594778a6833312b2/c1b63/20e.png 1200w,\n/static/fbedde4a1b76cfc0594778a6833312b2/5d6a0/20e.png 1580w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>y con el cliente REST de Visual Studio Code</p>\n<picture><img src=\"/static/b52fbb45633b056b6e67b02bda722bc8/5a190/21e.png\" srcset=\"/static/b52fbb45633b056b6e67b02bda722bc8/772e8/21e.png 200w,\n/static/b52fbb45633b056b6e67b02bda722bc8/e17e5/21e.png 400w,\n/static/b52fbb45633b056b6e67b02bda722bc8/5a190/21e.png 800w,\n/static/b52fbb45633b056b6e67b02bda722bc8/c1b63/21e.png 1200w,\n/static/b52fbb45633b056b6e67b02bda722bc8/29007/21e.png 1600w,\n/static/b52fbb45633b056b6e67b02bda722bc8/dcb79/21e.png 1700w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Manejo de errores</h3>\n<p>La verificación del token también puede causar un <i>JsonWebTokenError</i>. Si, por ejemplo, eliminamos algunos caracteres del token e intentamos crear una nueva nota, esto sucede:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">JsonWebTokenError: invalid signature\n    at /Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/verify.js:126:19\n    at getSecret <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/verify.js:80:14<span class=\"token punctuation\">)</span>\n    at Object.module.exports <span class=\"token punctuation\">[</span>as verify<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/verify.js:84:10<span class=\"token punctuation\">)</span>\n    at notesRouter.post <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/controllers/notes.js:40:30<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Hay muchas razones posibles para un error de decodificación. El token puede ser defectuoso (como en nuestro ejemplo), falsificado o vencido. Extendamos nuestro middleware errorHandler para tener en cuenta los diferentes errores de decodificación.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unknownEndpoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'unknown endpoint'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'JsonWebTokenError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      error<span class=\"token operator\">:</span> <span class=\"token string\">'invalid token'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El código de la aplicación actual se puede encontrar en <a href=\"https://github.com/fullstack-hy/part3-notes-backend/tree/part4-9\">Github</a>, rama <i>part4-9</i>.</p>\n<p>Si la aplicación tiene múltiples interfaces que requieren identificación, la validación de JWT debe separarse en su propio middleware. También se podría utilizar alguna librería existente como <a href=\"https://www.npmjs.com/package/express-jwt\">express-jwt</a>.</p>\n<h3>Notas finales</h3>\n<p>Ha habido muchos cambios en el código que han causado un problema típico para un proyecto de software de ritmo rápido: la mayoría de las pruebas no funcionan. Debido a que esta parte del curso ya está repleta de nueva información, dejaremos la fijación de las pruebas a un ejercicio no obligatorio.</p>\n<p>Los nombres de usuario, las contraseñas y las aplicaciones que utilizan la autenticación de token siempre deben usarse en <a href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a>. Podríamos usar un servidor Node <a href=\"https://nodejs.org/api/https.html\">HTTPS</a> en nuestra aplicación en lugar del <a href=\"https://nodejs.org/docs/latest-v8.x/%20api%20/%20http.html\">HTTP</a> servidor (requiere más configuración). Por otro lado, la versión de producción de nuestra aplicación está en Heroku, por lo que nuestra aplicación permanece segura: Heroku enruta todo el tráfico entre un navegador y el servidor Heroku a través de HTTPS.</p>\n<p>Implementaremos el inicio de sesión en la interfaz en la <a href=\"/es/part5\">siguiente parte</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 4.15.-4.22.</h3>\n<p>En los próximos ejercicios, se implementarán los conceptos básicos de la gestión de usuarios para la aplicación Bloglist. La forma más segura es seguir la historia desde el capítulo de la parte 4 <a href=\"/es/part4/user_administration\">Administración de usuarios</a> hasta el capítulo <a href=\"/es/part4/token_authentication\">Autenticación basada en token</a>. Por supuesto, también puede utilizar su creatividad.</p>\n<p><strong>Una advertencia más:</strong> Si nota que está mezclando llamadas async/await y <em>then</em>, es 99% seguro que está haciendo algo mal. Utilice uno u otro, nunca ambos.</p>\n<h4>4.15: expansión de la lista de blogs, paso 3</h4>\n<p>Implemente una forma de crear nuevos usuarios realizando una solicitud POST HTTP para la dirección <i>api/users</i>. Los usuarios tienen <i>nombre de usuario, contraseña y nombre</i>.</p>\n<p>No guarde las contraseñas en la base de datos como texto sin cifrar, utilice la biblioteca <i>bcrypt</i> como hicimos en el capítulo de la parte 4 <a href=\"/es%E2%80%8B%E2%80%8B/part4/user_administration#creation-users\">Creación de nuevos usuarios</a>.</p>\n<p><strong>NB</strong> Algunos usuarios de Windows han tenido problemas con <i>bcrypt</i>. Si tiene problemas, elimine la librería con el comando</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> uninstall bcrypt </code></pre></div>\n<p>e instale <a href=\"https://www.npmjs.com/package/bcryptjs\">bcryptjs</a> en su lugar.</p>\n<p>Implemente una forma de ver los detalles de todos los usuarios realizando una solicitud HTTP adecuada.</p>\n<p>La lista de usuarios puede, por ejemplo, tener el siguiente aspecto:</p>\n<picture><img src=\"/static/b59bda1bd7e5987a5c805332d509e516/5a190/22.png\" srcset=\"/static/b59bda1bd7e5987a5c805332d509e516/772e8/22.png 200w,\n/static/b59bda1bd7e5987a5c805332d509e516/e17e5/22.png 400w,\n/static/b59bda1bd7e5987a5c805332d509e516/5a190/22.png 800w,\n/static/b59bda1bd7e5987a5c805332d509e516/c1b63/22.png 1200w,\n/static/b59bda1bd7e5987a5c805332d509e516/9685e/22.png 1336w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.16*: expansión de la lista de blogs, paso 4</h4>\n<p>Agrega una función que agrega las siguientes restricciones para la creación de nuevos usuarios: Deben proporcionarse tanto el nombre de usuario como la contraseña. Tanto el nombre de usuario como la contraseña deben tener al menos 3 caracteres. El nombre de usuario debe ser único.</p>\n<p>La operación debe responder con un código de estado adecuado y algún tipo de mensaje de error si se crea un usuario no válido.</p>\n<p><strong>NB</strong> No pruebe las restricciones de contraseña con las validaciones de Mongoose. No es una buena idea porque la contraseña recibida por el backend y el hash de contraseña guardado en la base de datos no son lo mismo. La longitud de la contraseña debe validarse en el controlador como hicimos en la <a href=\"/es/part3/validation_and_es_lint\">parte 3</a> antes de usar la validación de Mongoose.</p>\n<p>Además, implemente pruebas que verifiquen que no se creen usuarios no válidos y que la operación de agregar usuario no válida devuelva un código de estado adecuado y un mensaje de error.</p>\n<h4>4.17: expansión de la lista de blogs, paso 5</h4>\n<p>Expande los blogs para que cada blog contenga información sobre el creador del blog.</p>\n<p>Modifique la adición de nuevos blogs para que cuando se cree un nuevo blog, <i>cualquier</i> usuario de la base de datos sea designado como su creador (por ejemplo, el que se encontró primero). Implemente esto de acuerdo con el capítulo de la parte 4 <a href=\"/es/part4/user_administration#populate\">poblar</a>.\nEl usuario designado como creador no importa todavía. La funcionalidad se termina en el ejercicio 4.19.</p>\n<p>Modificar la lista de todos los blogs para que la información de usuario del creador se muestre con el blog:</p>\n<picture><img src=\"/static/199682ad74f50747c90997a967856ffa/5a190/23e.png\" srcset=\"/static/199682ad74f50747c90997a967856ffa/772e8/23e.png 200w,\n/static/199682ad74f50747c90997a967856ffa/e17e5/23e.png 400w,\n/static/199682ad74f50747c90997a967856ffa/5a190/23e.png 800w,\n/static/199682ad74f50747c90997a967856ffa/c1b63/23e.png 1200w,\n/static/199682ad74f50747c90997a967856ffa/ae28e/23e.png 1598w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>y la lista de todos los usuarios también muestra los blogs creados por cada usuario:</p>\n<picture><img src=\"/static/ac9967c89785b33440e9b1b4e87c17e5/5a190/24e.png\" srcset=\"/static/ac9967c89785b33440e9b1b4e87c17e5/772e8/24e.png 200w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/e17e5/24e.png 400w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/5a190/24e.png 800w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/c1b63/24e.png 1200w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/9f9a4/24e.png 1560w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.18: expansión de la lista de blogs, paso 6</h4>\n<p>Implementar la autenticación basada en token según la parte 4 capítulo <a href=\"/es/part4/token_authentication\">Autenticación de token</a>.</p>\n<h4>4.19: expansión de la lista de blogs , paso 7</h4>\n<p>Modificar la adición de nuevos blogs para que solo sea posible si se envía un token válido con la solicitud HTTP POST. El usuario identificado por el token se designa como el creador del blog.</p>\n<h4>4.20*: expansión de la lista de blogs, paso 8</h4>\n<p><a href=\"/es/part4/token_authentication\">Este ejemplo</a> de la parte 4 muestra cómo tomar el token del encabezado con la función auxiliar <em>getTokenFrom</em>.</p>\n<p>Si usó la misma solución, refactorice llevando el token a un <a href=\"/es/part3/node_js_and_express#middleware\">middleware</a>. El middleware debe tomar el token del encabezado <i>Authorization</i> y colocarlo en el campo <i>token</i> del objeto <i>request</i>.</p>\n<p>En otras palabras, si registra este middleware en el archivo <i>app.js</i> antes de todas las rutas</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>tokenExtractor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>routes can access the token with <em>request.token</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">blogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Recuerde que un [middleware] normal (/es/part3/node<em>js</em>and_express#middleware) es una función con tres parámetros, que al final llama al último parámetro <i>next</i> para mover el control al siguiente middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tokenExtractor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code that extracts the token</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>4.21*: expansión de la lista de blogs, paso 9</h4>\n<p>Cambie la operación de eliminación del blog para que El blog solo puede ser eliminado por el usuario que agregó el blog. Por lo tanto, eliminar un blog solo es posible si el token enviado con la solicitud es el mismo que el del creador del blog.</p>\n<p>Si se intenta eliminar un blog sin un token o por un usuario incorrecto, la operación debe devolver un código de estado adecuado.</p>\n<p>Tenga en cuenta que si obtiene un blog de la base de datos,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> blog <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Blog<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>el campo <i>blog.user</i> no contiene una cadena, sino una Objeto. Entonces, si desea comparar la identificación del objeto obtenido de la base de datos y una identificación de cadena, la operación de comparación normal no funciona. La identificación obtenida de la base de datos debe analizarse primero en una cadena.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> blog<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> userid<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span></code></pre></div>\n<h4>4.22*: expansión de la lista de blogs, paso 10</h4>\n<p>Después de agregar la autenticación basada en token, las pruebas para agregar un nuevo blog se rompió. Arregle las pruebas. También escriba una nueva prueba para asegurarse de que la adición de un blog falla con el código de estado adecuado <i>401 Unauthorized</i> si no se proporciona un token.</p>\n<p><a href=\"https://github.com/visionmedia/supertest/issues/398\">Esto</a> probablemente sea útil al hacer la corrección.</p>\n<p>Este es el último ejercicio de esta parte del curso y es hora de enviar su código a GitHub y marcar todos sus ejercicios terminados en el <a href=\"https://study.cs.helsinki.fi/stats/courses/fullstack2021\">sistema de envío de ejercicios</a>.</p>\n<!---\nnote left of user\n  user fills in login form with\n  username and password\nend note\nuser -> browser: login button pressed\n\nbrowser -> backend: HTTP POST /api/login { username, password }\nnote left of backend\n  backend generates TOKEN that identifies user \nend note\nbackend -> browser: TOKEN returned as message body \nnote left of browser\n  browser saves TOKEN\nend note\nnote left of user\n  user creates a note\nend note\nuser -> browser: create note button pressed\nbrowser -> backend: HTTP POST /api/notes { content } TOKEN in header\nnote left of backend\n  backend identifies userfrom the TOKEN\nend note\n\nbackend -> browser: 201 created\n\nuser -> user:\n-->\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/f800638504cdf371a12947fc31d52030/part-4.svg"},"part":4,"letter":"d","lang":"es"}}},"pageContext":{"part":4,"letter":"d","lang":"es"}},"staticQueryHashes":["3128451518"]}