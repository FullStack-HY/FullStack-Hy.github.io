{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part9/primeros_pasos_con_typescript","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Después de la breve introducción a los principios fundamentales de TypeScript, ahora estamos listos para comenzar nuestro viaje para convertirnos en desarrolladores FullStack de TypeScript. En lugar de brindarle una introducción completa a todos los aspectos de TypeScript, en esta parte nos centraremos en los problemas más comunes que surgen al desarrollar backends express o frontends de React con TypeScript. Además de las características del lenguaje, también tendremos un fuerte énfasis en las herramientas.</p>\n<h3>Configurando las cosas</h3>\n<p>Instale la compatibilidad con TypeScript en el editor de su elección. Para <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>, necesita la extensión <a href=\"https://marketplace.visualstudio.com/items?itemName=rbbit.typescript-hero\">typescript hero</a>.</p>\n<p>Como se mencionó anteriormente, el código TypeScript no es ejecutable por sí mismo, pero primero debe compilarse en JavaScript ejecutable. Cuando TypeScript se compila en JavaScript, el código se convierte en sujeto para el borrado de tipos. Esto significa que las anotaciones de tipos, interfaces, alias de tipos y otras construcciones del sistema de tipos se eliminan del código y el resultado es JavaScript puro y listo para ejecutar.</p>\n<p>En un entorno de producción, la necesidad de compilación a menudo significa que debe configurar un \"paso de compilación\". Durante el paso de compilación, todo el código TypeScript se compila en JavaScript en una carpeta separada, y el entorno de producción luego ejecuta el código desde esa carpeta. En un entorno de desarrollo, a menudo es más útil hacer uso de la compilación en tiempo real y la recarga automática para poder ver los cambios resultantes más rápido.</p>\n<p>Comencemos a escribir nuestra primera aplicación TypeScript. Para simplificar las cosas, comencemos usando el paquete <a href=\"https://github.com/TypeStrong/ts-node\">ts-node</a> de npm . Compila y ejecuta el archivo TypeScript especificado inmediatamente, por lo que no es necesario un paso de compilación por separado.</p>\n<p>Puede instalar tanto <i>ts-node</i> como el paquete oficial <i>typescript</i> a nivel global ejecutando</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g ts-node typescript</code></pre></div>\n<p>Si no puede o no quiere instalar paquetes globales, puede crear un proyecto npm que tenga las dependencias necesarias y ejecutar sus scripts en él. También tomaremos este enfoque.</p>\n<p>Como recordamos de la <a href=\"/es/part3\">parte 3</a>, un proyecto npm se configura ejecutando el comando <i>npm init</i> en un directorio vacío. Entonces podemos instalar las dependencias ejecutando</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev ts-node typescript</code></pre></div>\n<p>y configure <i>scripts</i> dentro del package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora, dentro de este directorio, puede usar <i>ts-node</i> ejecutando <i>npm run ts-node</i>. Tenga en cuenta que si está utilizando ts-node a través de package.json, todos los argumentos de la línea de comandos para el script deben tener el prefijo  <i>--</i>. Entonces, si desea ejecutar file.ts con <i>ts-node</i>, el comando completo es: --></p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run ts-node -- file.ts</code></pre></div>\n<p>Vale la pena mencionar que TypeScript también proporciona un área de juegos en línea, donde puede probar rápidamente el código TypeScript y ver instantáneamente el JavaScript resultante y los posibles errores de compilación. Puede acceder al área de juegos oficial de TypeScript <a href=\"https://www.typescriptlang.org/play/index.html\">aquí</a>.</p>\n<p><strong>NB:</strong> El área de juegos puede contener diferentes reglas tsconfig (que se presentarán más adelante) que su entorno local, por lo que es posible que vea advertencias diferentes en comparación con su entorno local. El tsconfig de la zona de juegos se puede modificar a través del menú de configuración desplegable.</p>\n<h4>Una nota sobre el estilo de codificación</h4>\n<p>JavaScript en sí mismo es un lenguaje bastante relajado y, a menudo, las cosas se pueden hacer de múltiples formas diferentes. Por ejemplo, tenemos funciones anónimas y con nombre, podemos usar const y let o var y usar el <i>punto y coma</i>. Esta parte del curso se diferencia del resto por el uso de punto y coma. No es un patrón específico de TypeScript, sino una decisión de estilo de codificación general al crear cualquier tipo de JavaScript. Utilizarlos o no suele estar en manos del programador, pero dado que se espera adaptar los hábitos de codificación al código base existente, en los ejercicios de esta parte se espera usar punto y coma y ajustarse al estilo de codificación de la parte. Esta parte también tiene otras diferencias de estilo de codificación en comparación con el resto del curso, por ejemplo, en el nombre del directorio.</p>\n<p>Comencemos creando un multiplicador simple. Se ve exactamente como se haría en JavaScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> printText</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Multiplied numbers 2 and 4, the result is:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Como puede ver, este sigue siendo JavaScript básico ordinario sin características adicionales de TS. Se compila y se ejecuta muy bien con <i>npm run ts-node -- multiplier.ts</i>, como lo haría con Node.\nPero, ¿qué sucede si terminamos pasando <i>tipos</i> incorrectos de argumentos a la función multiplicadora?</p>\n<p>¡Probémoslo!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> printText</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'how about a string?'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Multiplied a string and 4, the result is:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ahora, cuando ejecutamos el código, el resultado es: <i>Multiplied a string and 4, the result is: NaN</i>.</p>\n<p>¿No sería bueno si el lenguaje en sí pudiera evitar que terminemos en situaciones como esta? Aquí es donde vemos los primeros beneficios de TypeScript. Agreguemos tipos a los parámetros y veamos a dónde nos lleva.</p>\n<p>TypeScript admite de forma nativa varios tipos, incluidos <i>number</i>, <i>string</i> y <i>Array</i>. Vea la lista completa <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">aquí</a>. También se pueden crear tipos personalizados más complejos.</p>\n<p>Los dos primeros parámetros de nuestra función son del tipo <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#number\">number</a> y el último es un <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#string\">string</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> printText<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'how about a string?'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Multiplied a string and 4, the result is:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ahora el código ya no es JavaScript válido, sino TypeScript. Cuando intentamos ejecutar el código, notamos que no se compila:</p>\n<picture><img src=\"/static/362456a24c606b2a645642d550481c07/5a190/2a.png\" srcset=\"/static/362456a24c606b2a645642d550481c07/772e8/2a.png 200w,\n/static/362456a24c606b2a645642d550481c07/e17e5/2a.png 400w,\n/static/362456a24c606b2a645642d550481c07/5a190/2a.png 800w,\n/static/362456a24c606b2a645642d550481c07/c1b63/2a.png 1200w,\n/static/362456a24c606b2a645642d550481c07/29007/2a.png 1600w,\n/static/362456a24c606b2a645642d550481c07/74e37/2a.png 1732w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Una de las mejores cosas de la compatibilidad con el editor de TypeScript es que no es necesario que ni siquiera ejecutes el código para ver los problemas. El plugin de VSCode es tan eficiente que le informa inmediatamente cuando intenta utilizar un tipo incorrecto:</p>\n<picture><img src=\"/static/7a73285e6588983383eb619b671d99f5/5a190/2.png\" srcset=\"/static/7a73285e6588983383eb619b671d99f5/772e8/2.png 200w,\n/static/7a73285e6588983383eb619b671d99f5/e17e5/2.png 400w,\n/static/7a73285e6588983383eb619b671d99f5/5a190/2.png 800w,\n/static/7a73285e6588983383eb619b671d99f5/84a90/2.png 982w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Creando tus primeros tipos</h3>\n<p>Ampliemos nuestro multiplicador a una calculadora un poco más versátil que también admita sumas y divisiones. La calculadora debe aceptar tres argumentos: dos números y la operación, ya sea <i>multiplicar</i>, <i>sumar</i> o <i>dividir</i>, que le dice qué hacer con los números.</p>\n<p>En JavaScript, el código requeriría una validación adicional para asegurarse de que el último argumento sea un string. TypeScript ofrece una forma de definir tipos específicos de entradas, que describen exactamente qué tipo de entrada es aceptable. Además de eso, TypeScript también puede mostrar la información de los valores aceptados ya en el nivel de editor.</p>\n<p>Podemos crear un <i>tipo</i> usando la palabra clave nativa de TypeScript <i>type</i>. Describamos nuestro tipo <i>Operation</i>:\nCreating your first own types</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">'multiply'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ahora el tipo <i>Operation</i> acepta solo tres tipos de entrada; exactamente los tres strings que queríamos.\nUtilizando el operador OR  <em>|</em> podemos definir una variable para aceptar múltiples valores creando un <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types\">union type</a>. En este caso usamos strings exactos (que en términos técnicos se denominan <a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html#string-literal-types\">tipos literales de strings</a>) pero con uniones también podría hacer que el compilador acepte, por ejemplo, cadena y número:  <em>string | number</em>.</p>\n<p>La palabra clave <i>type</i> define un nuevo nombre para un tipo, un <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases\">alias de tipo</a>. Dado que el tipo definido es una unión de tres valores posibles, es útil asignarle un alias que tenga un nombre representativo.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">'multiply'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op <span class=\"token operator\">:</span> Operation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">'multiply'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'can\\'t divide by 0!'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora, cuando pasamos el cursor sobre el tipo <i>Operation</i> en la función calculator, podemos ver inmediatamente sugerencias sobre qué hacer con él:</p>\n<picture><img src=\"/static/c9e244a81232619f2c53c09b6d4c69df/5a190/3.png\" srcset=\"/static/c9e244a81232619f2c53c09b6d4c69df/772e8/3.png 200w,\n/static/c9e244a81232619f2c53c09b6d4c69df/e17e5/3.png 400w,\n/static/c9e244a81232619f2c53c09b6d4c69df/5a190/3.png 800w,\n/static/c9e244a81232619f2c53c09b6d4c69df/c1b63/3.png 1200w,\n/static/c9e244a81232619f2c53c09b6d4c69df/081d5/3.png 1264w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Y si intentamos usar un valor que no está dentro del tipo <i>Operation</i>, obtenemos la conocida señal de advertencia roja e información adicional de nuestro editor:</p>\n<picture><img src=\"/static/92c3e7f765c4359361de07e3183cab46/5a190/4.png\" srcset=\"/static/92c3e7f765c4359361de07e3183cab46/772e8/4.png 200w,\n/static/92c3e7f765c4359361de07e3183cab46/e17e5/4.png 400w,\n/static/92c3e7f765c4359361de07e3183cab46/5a190/4.png 800w,\n/static/92c3e7f765c4359361de07e3183cab46/3cd52/4.png 857w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Esto ya es bastante bueno, pero una cosa que aún no hemos tocado es tipear el valor de retorno de una función. Por lo general, desea saber qué devuelve una función, y sería bueno tener una garantía de que realmente devuelve lo que dice. Agreguemos un valor de retorno <i>number</i> a la función de calculadora:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">'multiply'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op<span class=\"token operator\">:</span> Operation<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">'multiply'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">===</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'this cannot be done'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El compilador se queja de inmediato, porque en un caso la función devuelve un string. Hay un par de formas de arreglar esto: podríamos extender el tipo de retorno para permitir valores string, así</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op<span class=\"token operator\">:</span> Operation<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>o podríamos crear un tipo de retorno que incluya ambos tipos posibles, muy parecido a nuestro tipo Operation</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Result <span class=\"token operator\">=</span> string <span class=\"token operator\">|</span> number\n\n<span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op<span class=\"token operator\">:</span> Operation<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">Result</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pero ahora la pregunta es si <i>realmente</i> está bien que la función devuelva un string.</p>\n<p>Cuando su código puede terminar en una situación en la que algo se divide por 0, es probable que algo haya salido terriblemente mal y se debe generar un error y manejarlo donde se llamó a la función. Cuando decide devolver valores que no esperaba originalmente, las advertencias que ve de TypeScript le impiden tomar decisiones apresuradas y le ayudan a mantener su código funcionando como se esperaba.</p>\n<p>Una cosa más a considerar es que, aunque hemos definido tipos para nuestros parámetros, el JavaScript generado que se usa en tiempo de ejecución no contiene las verificaciones de tipos.\nEntonces, si, por ejemplo, el valor del parámetro de <i>operation</i> proviene de una interfaz externa, no hay garantía definitiva de que sea uno de los valores permitidos. Por lo tanto, es mejor incluir el manejo de errores y estar preparado para lo inesperado.\nEn este caso, cuando hay múltiples valores aceptados posibles y todos los inesperados deberían dar como resultado un error, la declaración <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\">switch...case</a> se adapta mejor que if...else en nuestro código.</p>\n<p>El código de nuestra calculadora debería verse así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">'multiply'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">;</span>\n\ntype Result <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> op <span class=\"token operator\">:</span> Operation<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token parameter\">Result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'multiply'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'divide'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Can\\'t divide by 0!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'add'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Operation is not multiply, add or divide!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something went wrong, error message: '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los programas que hemos escrito están bien, pero seguro que sería mejor si pudiéramos usar argumentos de línea de comandos en lugar de tener que cambiar siempre el código para calcular cosas diferentes.\nProbémoslo, como lo haríamos en una aplicación Node normal, accediendo a <i>process.argv</i>.\nPero algo no va bien:</p>\n<picture><img src=\"/static/07d7898a48d092c789aa57608097678f/5a190/5.png\" srcset=\"/static/07d7898a48d092c789aa57608097678f/772e8/5.png 200w,\n/static/07d7898a48d092c789aa57608097678f/e17e5/5.png 400w,\n/static/07d7898a48d092c789aa57608097678f/5a190/5.png 800w,\n/static/07d7898a48d092c789aa57608097678f/9d76a/5.png 829w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>@types/{npm_package}</h3>\n<p>Volvamos a la idea básica de TypeScript. TypeScript espera que todo el código utilizado globalmente sea tipado, como usted lo hace con su propio código cuando su proyecto tiene una configuración razonable. La biblioteca de TypeScript en sí contiene solo tipificaciones para el código del paquete TypeScript. Es posible escribir sus propias tipificaciones para una librería, pero eso casi nunca es necesario, ¡ya que la comunidad de TypeScript lo ha hecho por nosotros!</p>\n<p>Al igual que con npm, el mundo TypeScript también celebra el código fuente abierto. La comunidad está activa y reacciona continuamente a las actualizaciones y cambios en los paquetes npm de uso común.\nCasi siempre puede encontrar las tipificaciones de paquetes npm, por lo que no tiene que crear tipificaciones para todas sus miles de dependencias.</p>\n<p>Por lo general, las tipificaciones de paquetes existentes se pueden encontrar en <i>@types</i>-organization dentro de npm, y puede agregar los tipos relevantes a su proyecto instalando un paquete npm con el nombre de su paquete con el prefijo @ types / -. Por ejemplo:  <i>npm install --save-dev @types/react @types/express @types/lodash @types/jest @types/mongoose</i> y así sucesivamente. Los <i>@types/*</i> son mantenidos por <a href=\"http://definitelytyped.org/\">Definitely typed</a>, un proyecto comunitario con el objetivo de mantener tipos de todo en un solo lugar.</p>\n<p>A veces, un paquete npm también puede incluir sus tipificaciones dentro del código y, en ese caso, no es necesario instalar los correspondientes <i>@types/*</i>.</p>\n<blockquote>\n<p><strong>NB:</strong> Dado que las tipificaciones solo se usan antes de la compilación, estas no son necesarias en la compilación de producción y siempre deben estar en devDependencies del package.json.</p>\n</blockquote>\n<p>Dado  la variable global <i>process</i> está definida por el propio Node, obtenemos sus tipificaciones instalando el paquete<i>@types/node</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install --save-dev @types/node</code></pre></div>\n<p>Después de instalar los tipos, nuestro compilador ya no se queja de la variable <i>process</i>. Tenga en cuenta que no es necesario requerir los tipos para el código, ¡la instalación del paquete es suficiente!</p>\n<h2>Mejorando el proyecto</h2>\n<p>A continuación, agreguemos scripts npm para ejecutar nuestros dos programas, <i>multiplier</i> y <i>calculator</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"part1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"multiply\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node multiplier.ts\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"calculate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node calculator.ts\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.6.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.8.2\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Podemos hacer que el multiplicador funcione con los parámetros de la línea de comando con los siguientes cambios</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> printText<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Multiplied </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, the result is:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>y podemos ejecutarlo con</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run multiply 5 2</code></pre></div>\n<p>si el programa se ejecuta con parámetros que no son del tipo correcto, p. ej.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run multiply 5 lol</code></pre></div>\n<p>\"funciona\" pero nos da la respuesta</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">Multiplied 5 and NaN, the result is: NaN</code></pre></div>\n<p>La razón de esto es que <i>Number('lol')</i> devuelve <i>NaN</i>, que en realidad es de tipo <i>number</i>, por lo que TypeScript no tiene poder para rescatarnos de este tipo de situación.</p>\n<p>Para evitar este tipo de comportamientos, tenemos que validar los datos que nos brindan desde la línea de comandos.</p>\n<p>La versión mejorada del multiplicador se ve así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MultiplyValues</span> <span class=\"token punctuation\">{</span>\n  value1<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  value2<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> parseArguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">MultiplyValues</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not enough arguments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Too many arguments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      value1<span class=\"token operator\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      value2<span class=\"token operator\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Provided values were not numbers!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> printText<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">parseArguments</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Multiplied </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, the result is:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error, something bad happened, message: '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cuando ahora ejecutamos el programa</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run multiply 1 lol</code></pre></div>\n<p>obtenemos un mensaje de error adecuado:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">Error, something bad happened, message:  Provided values were not numbers!</code></pre></div>\n<p>La definición de la función <i>parseArguments</i> tiene un par de cosas interesantes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseArguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">MultiplyValues</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En primer lugar, el parámetro <i>args</i> es un <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#array\">array</a> de strings. El valor de retorno tiene el tipo <i>MultiplyValues</i>, que se define de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MultiplyValues</span> <span class=\"token punctuation\">{</span>\n  value1<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  value2<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La definición utiliza la palabra clave <a href=\"http://www.typescriptlang.org/docs/handbook/interfaces.html\">Interface</a> de TypeScript, que es una forma de definir la \"forma\" que debe tener un objeto. En nuestro caso, es bastante obvio que el valor de retorno debe ser un objeto con dos propiedades <i>value1</i> y <i>value2</i>, que deben ser ambas del tipo number.</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 9.1.-9.3.</h3>\n<h4>setup</h4>\n<p>Ejercicios 9.1.-9.7. se realizarán todos en el mismo proyecto de node. Cree el proyecto en un directorio vacío con <i>npm init</i> e instale los paquetes ts-node y typescript. Cree también el archivo <i>tsconfig.json</i> en el directorio con el siguiente contenido:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El archivo <i>tsconfig.json</i> se usa para definir cómo el compilador de TypeScript debe interpretar el código, qué tan estrictamente debe funcionar el compilador, qué archivos observar o ignorar, y <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">mucho más</a>. Por ahora solo usaremos la opción del compilador <a href=\"https://www.typescriptlang.org/tsconfig#noImplicitAny\">noImplicitAny</a>, que hace que sea obligatorio tener tipos para todas las variables utilizadas.</p>\n<h4>9.1 Índice de masa corporal</h4>\n<p>Cree el código de este ejercicio en el archivo <i>bmiCalculator.ts</i></p>\n<p>Escriba una función <i>calculateBmi</i> que cuente el <a href=\"https://en.wikipedia.org/wiki/Body_mass_index\">IMC</a> según la altura (en centímetros) y el peso (en kilogramos) y luego devuelva un mensaje que se adapte a los resultados.</p>\n<p>Llame a la función en el mismo archivo con parámetros codificados e imprima el resultado. El código</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calculateBmi</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token punctuation\">,</span> <span class=\"token number\">74</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>debe imprimir el siguiente mensaje</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">Normal (healthy weight)</code></pre></div>\n<p>Cree un script npm para ejecutar el programa con el comando <i>npm run calculateBmi</i></p>\n<h4>9.2 Calculadora de ejercicio</h4>\n<p>Cree el código de este ejercicio en el archivo <i>exerciseCalculator.ts</i></p>\n<p>Escriba una función <i>calculateExercises</i> que calcule el tiempo promedio de las <i>horas diarias de ejercicio</i> y lo compare con la <i>cantidad objetivo</i> de horas diarias y devuelva un objeto que incluya los siguientes valores:</p>\n<ul>\n<li>el numero de dias</li>\n<li>el número de días de entrenamiento</li>\n<li>el valor objetivo original</li>\n<li>el tiempo promedio calculado</li>\n<li>valor booleano que describe si se alcanzó el objetivo</li>\n<li>una calificación entre los números 1-3 que indica qué tan bien se cumplen las horas. Puede decidir la métrica por su cuenta.</li>\n<li>un valor de texto que explica la calificación</li>\n</ul>\n<p>Las horas de ejercicio diarias se asignan a la función como un <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#array\">array</a> que contiene el número de horas de ejercicio de cada día en el período de entrenamiento. P.ej. una semana con 3 horas de entrenamiento el lunes, ninguna el martes, 2 horas el miércoles, 4,5 horas el jueves y así sucesivamente estaría representada por el siguiente array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Para el objeto Result, debe crear un <a href=\"https://www.typescriptlang.org/docs/handbook/interfaces.html\">interface</a>.</p>\n<p>Si llama a la función con los parámetros <i>[3, 0, 2, 4.5, 0, 3, 1]</i> y <i>2</i> , podría devolver</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> periodLength<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n  trainingDays<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  rating<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  ratingDescription<span class=\"token operator\">:</span> <span class=\"token string\">'not too bad but could be better'</span><span class=\"token punctuation\">,</span>\n  target<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  average<span class=\"token operator\">:</span> <span class=\"token number\">1.9285714285714286</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cree un script npm <i>npm run calculateExercises</i> para llamar a la función con valores codificados.</p>\n<h4>9.3 Línea de comando</h4>\n<p>Cambie los ejercicios anteriores para que pueda dar los parámetros de <i>bmiCalculator</i> y <i>exerciseCalculator</i>  como argumentos de línea de comando.</p>\n<p>Su programa podría funcionar, por ejemplo. como sigue:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npm run calculateBmi 180 91\n\nOverweight</code></pre></div>\n<p>y</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npm run calculateExercises 2 1 0 2 4.5 0 3 1 0 4\n\n{ periodLength: 9,\n  trainingDays: 6,\n  success: false,\n  rating: 2,\n  ratingDescription: &#39;not too bad but could be better&#39;,\n  target: 2,\n  average: 1.7222222222222223 }</code></pre></div>\n<p>En el ejemplo, el <i>primer argumento</i> es el valor objetivo.</p>\n<p>Maneje las excepciones y los errores de manera adecuada. exerciseCalculator debe aceptar entradas de diferentes longitudes. Determine usted mismo cómo se las arregla para recopilar toda la información necesaria.</p>\n</div>\n<div class=\"content\">\n<h3>Más acerca de tsconfig</h3>\n<p>En los ejercicios usamos solo una regla tsconfig <a href=\"https://www.typescriptlang.org/v2/en/tsconfig#noImplicitAny\">noImplicitAny</a>. Es un buen lugar para comenzar, pero ahora es el momento de profundizar un poco más en el archivo de configuración.</p>\n<p>El archivo <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">tsconfig.json</a> contiene todas sus configuraciones principales sobre cómo desea que TypeScript funcione en su proyecto.\nPuede definir qué tan estrictamente desea que se inspeccione el código, qué archivos incluir y excluir (<i>node_modules</i> está excluido de forma predeterminada) y dónde se deben colocar los archivos compilados (más sobre esto más adelante).</p>\n<p>Especifiquemos las siguientes configuraciones en nuestro archivo <i>tsconfig.json</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2020\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No se preocupe demasiado por <i>compilerOptions</i>, estarán bajo una inspección más cercana en la parte 2.</p>\n<p>Puede encontrar explicaciones para cada una de las configuraciones en la documentación de TypeScript, o en la <a href=\"https://www.staging-typescript.org/tsconfig\">página tsconfig</a> realmente útil , o en la <a href=\"http://json.schemastore.org/tsconfig\">definición del esquema</a> tsconfig , que desafortunadamente tiene un formato un poco peor que las dos primeras opciones.</p>\n<h3>Añadiendo express a la mezcla</h3>\n<p>Ahora mismo estamos en un lugar bastante bueno. Nuestro proyecto está configurado y tenemos dos calculadoras ejecutables en él. Sin embargo, dado que nuestro objetivo es aprender a desarrollar FullStack, es hora de empezar a trabajar con algunas solicitudes HTTP.</p>\n<p>Comencemos por instalar express:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install express</code></pre></div>\n<p>y luego agregue el script <i>start</i> a package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"multiply\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node multiplier.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"calculate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node calculator.ts\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node index.ts\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora podemos crear el archivo <i>index.ts</i> y escribirle el endpoint <i>ping</i> de HTTP GET:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3003</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Todo lo demás parece estar funcionando bien, pero como era de esperar, es necesario escribir los parámetros <i>req</i> y <i>res</i> de app.get necesitan tipado.\nSi observa con atención, VSCode también se queja de algo acerca de la importación express. Puede ver una pequeña línea amarilla de puntos debajo de <i>require</i>. Pasemos el cursor sobre el problema:</p>\n<picture><img src=\"/static/6aaed1ead88e0c5c5cf0bb2be6ab794e/0786c/6.png\" srcset=\"/static/6aaed1ead88e0c5c5cf0bb2be6ab794e/772e8/6.png 200w,\n/static/6aaed1ead88e0c5c5cf0bb2be6ab794e/e17e5/6.png 400w,\n/static/6aaed1ead88e0c5c5cf0bb2be6ab794e/0786c/6.png 663w\" sizes=\"(max-width: 663px) 100vw, 663px\"></picture>\n<p>La queja es que la llamada <i>'require' puede convertirse en un import</i>. Sigamos los consejos y escribamos el import de la siguiente manera</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>NB</strong>: VSCode le ofrece una posibilidad para solucionar los problemas de forma automática haciendo clic en el botón <i>Quick fix...</i>. Mantenga los ojos abiertos para estos ayudas/soluciones rápidas; escuchar a su editor generalmente hace que su código sea mejor y más fácil de leer. Las correcciones automáticas de problemas también pueden suponer un gran ahorro de tiempo.</p>\n<p>Ahora nos encontramos con otro problema: el compilador se queja de la declaración de importación. Una vez más, el editor es nuestro mejor amigo cuando tratamos de averiguar cuál es el problema:</p>\n<picture><img src=\"/static/42c8ddc465ac50724204530330e17888/5a190/7.png\" srcset=\"/static/42c8ddc465ac50724204530330e17888/772e8/7.png 200w,\n/static/42c8ddc465ac50724204530330e17888/e17e5/7.png 400w,\n/static/42c8ddc465ac50724204530330e17888/5a190/7.png 800w,\n/static/42c8ddc465ac50724204530330e17888/0eb6d/7.png 913w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>No hemos instalado tipos para <i>express</i>. Hagamos lo que dice la sugerencia y ejecutemos:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev @types/express</code></pre></div>\n<p>¡Y no más errores! Echemos un vistazo a lo que cambió.</p>\n<p>Cuando pasamos el cursor sobre la declaración <i>require</i>, podemos ver que el compilador interpreta todo lo relacionado con express para que sea del tipo <i>any</i>.</p>\n<picture><img src=\"/static/1cd92a8bd9863c3ce7156427741c4e93/5a190/8a.png\" srcset=\"/static/1cd92a8bd9863c3ce7156427741c4e93/772e8/8a.png 200w,\n/static/1cd92a8bd9863c3ce7156427741c4e93/e17e5/8a.png 400w,\n/static/1cd92a8bd9863c3ce7156427741c4e93/5a190/8a.png 800w,\n/static/1cd92a8bd9863c3ce7156427741c4e93/c1b63/8a.png 1200w,\n/static/1cd92a8bd9863c3ce7156427741c4e93/29007/8a.png 1600w,\n/static/1cd92a8bd9863c3ce7156427741c4e93/5fada/8a.png 1706w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Mientras que cuando usamos <i>import</i>, el editor conoce los tipos reales</p>\n<picture><img src=\"/static/d93e9d88496d703f0c4c1bdf83b246b2/5a190/9a.png\" srcset=\"/static/d93e9d88496d703f0c4c1bdf83b246b2/772e8/9a.png 200w,\n/static/d93e9d88496d703f0c4c1bdf83b246b2/e17e5/9a.png 400w,\n/static/d93e9d88496d703f0c4c1bdf83b246b2/5a190/9a.png 800w,\n/static/d93e9d88496d703f0c4c1bdf83b246b2/c1b63/9a.png 1200w,\n/static/d93e9d88496d703f0c4c1bdf83b246b2/78363/9a.png 1522w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>La declaración de importación que se utilizará depende del método de exportación utilizado en el paquete importado.</p>\n<p>Una buena regla general es intentar importar un módulo utilizando primero la declaración <i>import</i>. Siempre usaremos este método en el <i>frontend</i>. Si <i>import</i> no funciona, pruebe con un método combinado: <i>import ... = require('...')</i>.</p>\n<p>Le recomendamos encarecidamente que lea más sobre los módulos de TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/modules.html\">aquí</a>.</p>\n<p>Hay un problema más con el código.</p>\n<picture><img src=\"/static/b8b508be11f6f46ca98515ef7dcf11c0/5a190/9b.png\" srcset=\"/static/b8b508be11f6f46ca98515ef7dcf11c0/772e8/9b.png 200w,\n/static/b8b508be11f6f46ca98515ef7dcf11c0/e17e5/9b.png 400w,\n/static/b8b508be11f6f46ca98515ef7dcf11c0/5a190/9b.png 800w,\n/static/b8b508be11f6f46ca98515ef7dcf11c0/c1b63/9b.png 1200w,\n/static/b8b508be11f6f46ca98515ef7dcf11c0/29007/9b.png 1600w,\n/static/b8b508be11f6f46ca98515ef7dcf11c0/1d499/9b.png 1632w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Esto se debe a que prohibimos los parámetros no utilizados en nuestro <i>tsconfig.json</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2020\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span>    <span class=\"token string\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esta configuración puede crear problemas si tiene funciones predefinidas en toda la biblioteca que requieran declarar una variable incluso si no se usa en absoluto, como es el caso aquí.\nAfortunadamente, este problema ya se ha resuelto a nivel de configuración.\nUna vez más, pasar el cursor sobre el problema nos da una solución. Esta vez podemos hacer clic en el botón quick fix:</p>\n<picture><img src=\"/static/1c9e9465bd26936e8e95df71cf69292f/5a190/14a.png\" srcset=\"/static/1c9e9465bd26936e8e95df71cf69292f/772e8/14a.png 200w,\n/static/1c9e9465bd26936e8e95df71cf69292f/e17e5/14a.png 400w,\n/static/1c9e9465bd26936e8e95df71cf69292f/5a190/14a.png 800w,\n/static/1c9e9465bd26936e8e95df71cf69292f/c1b63/14a.png 1200w,\n/static/1c9e9465bd26936e8e95df71cf69292f/29007/14a.png 1600w,\n/static/1c9e9465bd26936e8e95df71cf69292f/bf286/14a.png 1688w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Si es absolutamente imposible deshacerse de una variable no utilizada, puede prefijarla con un guión bajo para informar al compilador que ha pensado en ello y que no hay nada que pueda hacer.</p>\n<p>Cambiemos el nombre de la variable <i>req</i> a <i>_req</i>.</p>\n<p>Finalmente estamos listos para iniciar la aplicación. Parece que funciona bien:</p>\n<picture><img src=\"/static/0ce223dcd8032134d6854a274d4b8ef9/5a190/11a.png\" srcset=\"/static/0ce223dcd8032134d6854a274d4b8ef9/772e8/11a.png 200w,\n/static/0ce223dcd8032134d6854a274d4b8ef9/e17e5/11a.png 400w,\n/static/0ce223dcd8032134d6854a274d4b8ef9/5a190/11a.png 800w,\n/static/0ce223dcd8032134d6854a274d4b8ef9/c1b63/11a.png 1200w,\n/static/0ce223dcd8032134d6854a274d4b8ef9/3ceac/11a.png 1456w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Para simplificar el desarrollo, deberíamos habilitar la <i>recarga automática</i> para mejorar nuestro flujo de trabajo. En este curso ya usó <i>nodemon</i>, pero ts-node tiene una alternativa llamada <i>ts-node-dev</i>. Está destinado a ser utilizado solo con un entorno de desarrollo que se encarga de la recompilación en cada cambio, por lo que no será necesario reiniciar la aplicación.</p>\n<p>Instalemos <i>ts-node-dev</i> en nuestras dependencias de desarrollo</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev ts-node-dev</code></pre></div>\n<p>agregemos un script a <i>package.json</i></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>¡Y ahora, al ejecutar <i>npm run dev</i>, tenemos un entorno de desarrollo que funciona y que se recarga automáticamente para nuestro proyecto!</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 9.4.-9.5.</h3>\n<h4>9.4 Express</h4>\n<p>Agregue express a sus dependencias y cree endpoint HTTP GET de saludo que responda 'Hello Full Stack!'</p>\n<p>La aplicación web debe iniciarse con el comando <i>npm start</i> en modo de producción y <i>npm run dev</i> en modo de desarrollo, que debe usar <i>ts-node-dev</i> para ejecutar la aplicación.</p>\n<p>Reemplace también su archivo <i>tsconfig.json</i> existente con el siguiente contenido:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictPropertyInitialization\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictBindCallApply\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitThis\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>¡asegúrese de que no haya errores!</p>\n<h4>9.5 WebBMI</h4>\n<p>Agregue un endpoint para la calculadora de IMC que se puede usar haciendo una solicitud HTTP GET al endpoint <i>bmi</i> y especificando el input con <a href=\"https://en.wikipedia.org/wiki/Query_string\">query string parameters</a>. Por ejemplo, para obtener el IMC de una persona que tiene una altura de 180 y un peso de 72, la URL es <a href=\"http://localhost:3002/bmi?height=180&#x26;weight=72\">http://localhost:3002/bmi?height=180&#x26;weight=72</a></p>\n<p>La respuesta es un json de la forma</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  weight<span class=\"token operator\">:</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span>\n  height<span class=\"token operator\">:</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span>\n  bmi<span class=\"token operator\">:</span> <span class=\"token string\">\"Normal (healthy weight)\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Consulte la <a href=\"http://expressjs.com/en/5x/api.html#req.query\">documentación de express</a> para obtener información sobre cómo acceder a los parámetros de consulta.</p>\n<p>Si los parámetros de consulta de la solicitud son del tipo incorrecto o faltan, se proporciona una respuesta con el código de estado y el mensaje de error adecuados</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  error<span class=\"token operator\">:</span> <span class=\"token string\">\"malformatted parameters\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No copie el código de la calculadora en el archivo <i>index.ts</i>, conviértalo en un <a href=\"https://www.typescriptlang.org/docs/handbook/modules.html\">módulo detypescript</a> que se puede importar en <i>index.ts</i>.</p>\n</div>\n<div class=\"content\">\n<h3>Los horrrores de <i>any</i></h3>\n<p>Ahora que hemos completado nuestros primeros endpoints, es posible que observe que apenas hemos usado TypeScript en estos pequeños ejemplos.\nAl examinar el código un poco más de cerca, podemos ver algunos peligros acechando allí.</p>\n<p>Agreguemos un HTTP GET endpoint <i>calculate</i> a nuestra aplicación:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> calculator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./calculator'</span>\n\n<span class=\"token comment\">// ...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/calculate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> op <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> op<span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cuando pasa el cursor sobre la función <i>calculate</i>, puede ver el tipeado de <i>calculator</i> aunque el código en sí no contiene ningun tipying:</p>\n<picture><img src=\"/static/9cad49a5955eb0dbdaea64417151983b/5a190/12a.png\" srcset=\"/static/9cad49a5955eb0dbdaea64417151983b/772e8/12a.png 200w,\n/static/9cad49a5955eb0dbdaea64417151983b/e17e5/12a.png 400w,\n/static/9cad49a5955eb0dbdaea64417151983b/5a190/12a.png 800w,\n/static/9cad49a5955eb0dbdaea64417151983b/c1b63/12a.png 1200w,\n/static/9cad49a5955eb0dbdaea64417151983b/29007/12a.png 1600w,\n/static/9cad49a5955eb0dbdaea64417151983b/b88bf/12a.png 1702w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Pero si pasa el cursor sobre los valores del request, surge un problema:</p>\n<picture><img src=\"/static/533645e072e442e23bf7576e3d022c01/5a190/13a.png\" srcset=\"/static/533645e072e442e23bf7576e3d022c01/772e8/13a.png 200w,\n/static/533645e072e442e23bf7576e3d022c01/e17e5/13a.png 400w,\n/static/533645e072e442e23bf7576e3d022c01/5a190/13a.png 800w,\n/static/533645e072e442e23bf7576e3d022c01/c1b63/13a.png 1200w,\n/static/533645e072e442e23bf7576e3d022c01/29007/13a.png 1600w,\n/static/533645e072e442e23bf7576e3d022c01/21e8f/13a.png 1684w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Todas las variables tienen el tipo <i>any</i>. No es tan sorprendente, ya que nadie les ha dado un tipo todavía. Hay un par de maneras de solucionar este problema, pero la primera que tenemos que considerar por qué esto es aceptado y de dónde el tipo <i>any</i> viene?</p>\n<p>En TypeScript, cada variable sin tipo cuyo tipo no se puede inferir, se convierte implícitamente en tipo <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\">any</a>. Cualquiera es una especie de \"comodín\" que literalmente significa <i>cualquier tipo</i>.\nLas cosas se convierten implícitamente de cualquier tipo con bastante frecuencia cuando uno se olvida de darle tipo a las funciones.</p>\n<p>También podemos explicitar el tipo <i>any</i>. La única diferencia entre cualquier tipo implícito y explícito es cómo se ve el código, al compilador no le importa la diferencia.</p>\n<p>Sin embargo, los programadores ven el código de manera diferente cuando se aplica explícitamente <i>any</i> que cuando se infiere implícitamente.\n<i>any</i> de manera implicita generalmente se considera problemático, ya que a menudo se debe a que el codificador se olvida de asignar tipos (o es demasiado perezoso para hacerlo), y también significa que no se aprovecha todo el poder de TypeScript.</p>\n<p>Es por eso que la regla de configuración <a href=\"https://www.typescriptlang.org/v2/en/tsconfig#noImplicitAny\">noImplicitAny</a> existe a nivel de compilador, y es muy recomendable mantenerla activada en todo momento.\nEn las raras ocasiones en que no pueda saber en serio cuál es el tipo de variable, debe indicarlo explícitamente en el código</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token comment\">/* no clue what the type will be! */</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>Ya hemos configurado <i>noImplicitAny</i> en nuestro ejemplo, ¿por qué el compilador no se queja del tipo implicito <i>any</i>?\nLa razón es que el campo de consulta de un objeto Request de express es explícitamente tipado como <i>any</i>. Lo mismo ocurre con el campo <i>request.body</i> que usamos para publicar datos en una aplicación.</p>\n<p>¿Y si quisiéramos evitar que los desarrolladores utilicen <i>any</i>? Afortunadamente, tenemos otros métodos además de <i>tsconfig.json</i> para hacer cumplir el estilo de codificación. Lo que podemos hacer es usar <i>eslint</i> para administrar nuestro código.\nInstalemos eslint y sus extensiones de typescript:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install --save-dev eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser</code></pre></div>\n<p>Configuraremos eslint para <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-explicit-any.md\">no permitir any explicito</a>. Escriba las siguientes reglas en <i>.eslintrc</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@typescript-eslint/no-explicit-any\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Configuremos también un script <i>lint</i> npm para inspeccionar los archivos con la extensión <i>.ts</i> modificando el archivo <i>package.json</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node index.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .ts .\"</span></span>      <span class=\"token comment\">//  ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora lint se quejará si intentamos definir una variable de tipo <i>any</i>:</p>\n<picture><img src=\"/static/b507fd23131ab2c569e987469a3f2265/5a190/13b.png\" srcset=\"/static/b507fd23131ab2c569e987469a3f2265/772e8/13b.png 200w,\n/static/b507fd23131ab2c569e987469a3f2265/e17e5/13b.png 400w,\n/static/b507fd23131ab2c569e987469a3f2265/5a190/13b.png 800w,\n/static/b507fd23131ab2c569e987469a3f2265/c1b63/13b.png 1200w,\n/static/b507fd23131ab2c569e987469a3f2265/08c33/13b.png 1570w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>El <a href=\"https://github.com/typescript-eslint/typescript-eslint\">@typescript-eslint</a> tiene un montón de reglas específicas eslint de TypeScript, pero también se puede utilizar todas las reglas básicas eslint en proyectos de TypeScript. Por ahora, probablemente deberíamos ir con la configuración recomendada y modificar las reglas a medida que avanzamos cada vez que encontramos algo que queremos que se comporte de manera diferente.</p>\n<p>Además de la configuración recomendada, deberíamos intentar familiarizarnos con el estilo de codificación requerido en esta parte y <i>ubicar el punto y coma al final de cada línea de código como requerido<i>.</p>\n<p>Entonces usaremos el siguiente <i>.eslintrc</i></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended-requiring-type-checking\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@typescript-eslint/semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-explicit-any\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-function-return-type\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"argsIgnorePattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-case-declarations\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.json\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Faltan algunos puntos y comas, pero son fáciles de agregar.</p>\n<p>¡Y ahora arreglemos todo lo que hay que arreglar!</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 9.6.-9.7.</h3>\n<h4>9.6 Eslint</h4>\n<p>Configure su proyecto para utilizar la configuración de eslint anterior y corrija todas las advertencias.</p>\n<h4>9.7 WebExercises</h4>\n<p>Agregue un endpoint a su aplicación para la calculadora de ejercicio. Debe usarse haciendo una solicitud HTTP POST al endpoint <i>exercises</i> con la entrada en el cuerpo de la solicitud</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"daily_exercises\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2.5</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La respuesta es un json de la siguiente forma</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"periodLength\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"trainingDays\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"success\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"rating\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ratingDescription\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"average\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1.2142857142857142</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si el cuerpo de la solicitud no tiene el formato correcto, se da una respuesta con el código de estado y el mensaje de error adecuados. El mensaje de error es</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  error<span class=\"token operator\">:</span> <span class=\"token string\">\"parameters missing\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>o</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  error<span class=\"token operator\">:</span> <span class=\"token string\">\"malformatted parameters\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>dependiendo del error. Esto último ocurre si los valores de entrada no tienen el tipo correcto, es decir, no son números ni se pueden convertir en números.</p>\n<p>En este ejercicio, puede que le resulte beneficioso utilizar el tipo <i>any explícito</i> cuando maneje los datos en el cuerpo de la solicitud. Nuestra configuración de eslint evita esto, pero puede desarmar esta regla para una línea en particular insertando el siguiente comentario como la línea anterior:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span></code></pre></div>\n<p>Tenga en cuenta que debe tener una configuración correcta para poder acceder al cuerpo de la solicitud, consulte la <a href=\"/es/part3/node_js_and_express#receiving-data\">parte 3</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/ed8ae98c5d885b4d1928a681eefbe7c4/part-9.svg"},"part":9,"letter":"b","lang":"es"}}},"pageContext":{"part":9,"letter":"b","lang":"es"}},"staticQueryHashes":["3128451518"]}