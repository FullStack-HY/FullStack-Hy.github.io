{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part2/obteniendo_datos_del_servidor","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Desde hace un tiempo solo hemos estado trabajando en \"frontend\", es decir, funcionalidad del lado del cliente (navegador). Comenzaremos a trabajar en el \"backend\", es decir, la funcionalidad del lado del servidor en la tercera parte de este curso. No obstante, ahora daremos un paso en esa dirección familiarizándonos con cómo el código que se ejecuta en el navegador se comunica con el backend.</p>\n<p>Usemos una herramienta diseñada para ser utilizada durante el desarrollo de software llamada <a href=\"https://github.com/typicode/json-server\">JSON Server</a> para que actúe como nuestro servidor.</p>\n<p>Cree un archivo llamado <i>db.json</i> en el directorio raíz del proyecto con el siguiente contenido:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"notes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML is easy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-05-30T17:30:31.098Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Browser can execute only JavaScript\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-05-30T18:39:34.091Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET and POST are the most important methods of HTTP protocol\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-05-30T19:20:14.298Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Puede <a href=\"https://github.com/typicode/json-server#getting-started\">instalar</a> el servidor JSON globalmente en su máquina usando el comando <em>npm install -g json-server</em>. Una instalación global requiere privilegios administrativos, lo que significa que no es posible en las computadoras de la facultad o en las computadoras portátiles de primer año.</p>\n<p>Sin embargo, no es necesaria una instalación global. Desde el directorio raíz de su aplicación, podemos ejecutar <i>json-server</i> usando el comando <em>npx</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npx json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>port <span class=\"token number\">3001</span> <span class=\"token operator\">--</span>watch db<span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>El <i>json-server</i> comienza a ejecutarse en el puerto 3000 de forma predeterminada; pero dado que los proyectos se crearon usando el puerto reservado 3000 de create-react-app, debemos definir un puerto alternativo, como el puerto 3001, para el servidor json.</p>\n<p>Naveguemos hasta la dirección <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a> en el navegador. Podemos ver que <i>json-server</i> sirve las notas que escribimos previamente en el archivo en formato JSON:</p>\n<picture><img src=\"/static/37694498d0930f7b32df06ee8de181e6/5a190/14e.png\" srcset=\"/static/37694498d0930f7b32df06ee8de181e6/772e8/14e.png 200w,\n/static/37694498d0930f7b32df06ee8de181e6/e17e5/14e.png 400w,\n/static/37694498d0930f7b32df06ee8de181e6/5a190/14e.png 800w,\n/static/37694498d0930f7b32df06ee8de181e6/c1b63/14e.png 1200w,\n/static/37694498d0930f7b32df06ee8de181e6/c8ad9/14e.png 1564w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Si su navegador no lo hace tiene una forma de formatear la visualización de datos JSON, luego instale un complemento apropiado, por ejemplo, <a href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\">JSONView</a> para hacer su vida más fácil.</p>\n<p>De ahora en adelante, la idea será guardar las notas en el servidor, lo que en este caso significa guardarlas en el servidor json. El código de React obtiene las notas del servidor y las muestra en la pantalla. Siempre que se agrega una nueva nota a la aplicación, el código de React también la envía al servidor para que la nueva nota persista en la \"memoria\".</p>\n<p>json-server almacena todos los datos en el archivo <i>db.json</i>, que reside en el servidor. En el mundo real, los datos se almacenarían en algún tipo de base de datos. Sin embargo, json-server es una herramienta útil que permite el uso de la funcionalidad del lado del servidor en la fase de desarrollo sin la necesidad de programar nada de eso.</p>\n<p>Nos familiarizaremos con los principios de implementación de la funcionalidad del lado del servidor con más detalle en la <a href=\"/es/part3\">parte 3</a> de este curso.</p>\n<h3>El navegador como entorno de ejecución</h3>\n<p>Nuestra primera tarea es recuperar las notas ya existentes en nuestra aplicación React desde la dirección <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a>.</p>\n<p>En el <a href=\"/es/part0/fundamentos_de_las_aplicaiones_web#corriendo-la-logica-la-aplicacion-en-el-navegador\">proyecto de ejemplo</a> ya aprendimos una manera de obtener datos de un servidor usando JavaScript. El código del ejemplo obtenía los datos mediante <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>, también conocido como solicitud HTTP realizada mediante un objeto XHR. Esta es una técnica introducida en 1999, que todos los navegadores han admitido durante un buen tiempo.</p>\n<p>Ya no se recomienda el uso de XHR, y los navegadores ya admiten ampliamente el método <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch</a>, que se basa en las llamadas <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promesas (promises)</a>, en lugar del modelo impulsado por eventos utilizado por XHR.</p>\n<p>Como recordatorio de la parte 0 (que de hecho se debería <i>recordar no usar</i> sin una razón urgente), los datos se obtuvieron usando XHR de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> xhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// handle the response that is saved in variable data</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Justo al principio, registramos un <i>controlador de eventos</i> en el objeto <em>xhttp</em> que representa la solicitud HTTP, que será invocada por el tiempo de ejecución de JavaScript siempre que el estado del objeto <em>xhttp</em> cambie. Si el cambio de estado significa que ha llegado la respuesta a la solicitud, los datos se manejan en consecuencia.</p>\n<p>Vale la pena señalar que el código en el controlador de eventos se define antes de que la solicitud se envíe al servidor. A pesar de esto, el código dentro del controlador de eventos se ejecutará en un momento posterior. Por lo tanto, el código no se ejecuta de forma síncrona \"de arriba a abajo\", sino que lo hace <i>asincrónicamente</i>. JavaScript llama al controlador de eventos que se registró para la solicitud en algún momento.</p>\n<p>Una forma síncrona de realizar solicitudes que es común en la programación Java, por ejemplo, se desarrollaría de la siguiente manera (NB, esto no es realmente un código Java que funcione):</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">HTTPRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTTPRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://fullstack-exampleapp.herokuapp.com/data.json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Note</span><span class=\"token punctuation\">></span></span> notes <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnotes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>En Java el código se ejecuta línea por línea y se detiene para esperar la solicitud HTTP, lo que significa esperar a que finalice el comando <em>request.get(...)</em>. Los datos devueltos por el comando, en este caso las notas, se almacenan en una variable y comenzamos a manipular los datos de la manera deseada.</p>\n<p>Por otro lado, los motores JavaScript o los entornos de ejecución siguen el <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\">modelo asincrónico</a>. En principio, esto requiere que todas las <a href=\"https://en.wikipedia.org/wiki/Input/output\">operaciones IO</a> (con algunas excepciones) se ejecuten como no bloqueantes. Esto significa que la ejecución del código continúa inmediatamente después de llamar a una función IO, sin esperar a que regrese.</p>\n<p>Cuando se completa una operación asincrónica, o más específicamente, en algún momento después de su finalización, el motor de JavaScript llama a los controladores de eventos registrados en la operación.</p>\n<p>Actualmente, los motores de JavaScript son <i>de un solo subproceso</i>, lo que significa que no pueden ejecutar código en paralelo. Como resultado, es un requisito en la práctica utilizar un modelo sin bloqueo para ejecutar operaciones IO. De lo contrario, el navegador se \"congelaría\" durante, por ejemplo, la obtención de datos de un servidor.</p>\n<p>Otra consecuencia de esta naturaleza de un solo subproceso de los motores de JavaScript es que si la ejecución de algún código lleva mucho tiempo, el navegador se atascará mientras dure la ejecución. Si agregamos el siguiente código en la parte superior de nuestra aplicación:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loop..'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50000000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>todo funcionaría normalmente durante 5 segundos. Sin embargo, cuando se ejecuta la función definida como parámetro para <em>setTimeout</em>, el navegador se bloqueará mientras dure la ejecución del ciclo largo. Incluso la pestaña del navegador no se puede cerrar durante la ejecución del bucle, al menos no en Chrome.</p>\n<p>Para que el navegador permanezca <i>receptivo</i>, es decir, para poder reaccionar continuamente a las operaciones del usuario con suficiente velocidad, la lógica del código debe ser tal que ningún cálculo individual pueda llevar demasiado tiempo.</p>\n<p>Existe una gran cantidad de material adicional sobre el tema que se puede encontrar en Internet. Una presentación particularmente clara del tema es el discurso de apertura de Philip Roberts titulado <a href=\"Https://www.youtube.com/watch?v=8aGhZQkoFbQ\">¿Qué diablos es el ciclo del evento de todos modos?</a></p>\n<p>En los navegadores actuales, es posible ejecutar código paralelo con la ayuda de los llamados <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">web Workers</a>. Sin embargo, el bucle de eventos de una ventana individual del navegador solo lo maneja un <a href=\"https://medium.com/techtrument/multithreading-javascript-46156179cf9a\">hilo único</a>.</p>\n<h3>npm</h3>\n<p>Volvamos al tema de la obtención de datos del servidor.</p>\n<p>Podríamos usar la función basada en promesas <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch</a> mencionada anteriormente para extraer los datos del servidor. Fetch es una gran herramienta. Está estandarizado y es compatible con todos los navegadores modernos (excepto IE).</p>\n<p>Dicho esto, usaremos la biblioteca <a href=\"https://github.com/axios/axios\">axios</a> en su lugar para la comunicación entre el navegador y el servidor. Funciona como fetch, pero es algo más agradable de usar. Otra buena razón para usar axios es que nos familiarizamos con la adición de bibliotecas externas, los llamados <i>paquetes npm</i>, a los proyectos de React.</p>\n<p>Hoy en día, prácticamente todos los proyectos de JavaScript se definen utilizando el administrador de paquetes de node, también conocido como <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\">npm</a>. Los proyectos creados con create-react-app también siguen el formato npm. Un indicador claro de que un proyecto usa npm es el archivo <i>package.json</i> ubicado en la raíz del proyecto:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"notes\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@testing-library/jest-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.2.4\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^9.4.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/user-event\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.2.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.12.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.12.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-scripts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.3.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslintConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-app\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"production\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\">0.2%\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"not dead\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"not op_mini all\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"development\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"last 1 chrome version\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"last 1 firefox version\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"last 1 safari version\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En este punto, la parte de <i>dependencias</i> es de mayor interés para nosotros ya que define qué <i>dependencias</i>, o librerías externas, tiene el proyecto.</p>\n<p>Ahora queremos usar axios. En teoría, podríamos definir la librería directamente en el archivo <i>package.json</i>, pero es mejor instalarlo desde la línea de comandos.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install axios</code></pre></div>\n<p><strong>NB los comandos de <em>npm</em> siempre deben ejecutarse en el directorio raíz del proyecto</strong>, que es donde se puede encontrar el archivo <i>package.json</i>.</p>\n<p>Axios ahora se incluye entre las otras dependencias:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@testing-library/jest-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.2.4\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^9.4.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@testing-library/user-event\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.2.1\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"axios\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.19.2\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.12.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.12.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-scripts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.3.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Además de agregar axios a las dependencias, el comando <em>npm install</em> también <i>descargó</i> el código de la librería. Al igual que con otras dependencias, el código se puede encontrar en el directorio <i>node<em>modules</i> ubicado en la raíz. Como uno podría haber notado, <i>node</em>modules</i> contiene una buena cantidad de cosas interesantes.</p>\n<p>Hagamos otra adición. Instale <i>json-server</i> como una dependencia de desarrollo (solo se usa durante el desarrollo) ejecutando el comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>y haciendo una pequeña adición a la parte <i>scripts</i> del archivo <i>package.json</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... </span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server -p3001 --watch db.json\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora podemos convenientemente, sin definiciones de parámetros, iniciar json-server desde el directorio raíz del proyecto con el comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm run server</code></pre></div>\n<p>Nos familiarizaremos con la herramienta <em>npm</em> en la <a href=\"/es/part3\">tercera parte del curso</a>.</p>\n<p><strong>NB</strong> El servidor json iniciado previamente debe terminarse antes de iniciar uno nuevo, de lo contrario habrá problemas:</p>\n<picture><img src=\"/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/5a190/15b.png\" srcset=\"/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/772e8/15b.png 200w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/e17e5/15b.png 400w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/5a190/15b.png 800w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/c1b63/15b.png 1200w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/5df5d/15b.png 1572w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>La letra roja en el mensaje de error nos informa sobre el problema:</p>\n<p><i>Cannot bind to the port 3001. Please specify another port number either through --port argument or through the json-server.json configuration file</i> </p>\n<p><i>(No se puede vincular al puerto 3001. Especifique otro número de puerto a través del argumento --port o mediante el archivo de configuración json-server.json)</i></p>\n<p>Como podemos ver, la aplicación no es capaz de vincularse al <a href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">puerto</a>. La razón es que el puerto 3001 ya está ocupado por el servidor json iniciado anteriormente.</p>\n<p>Usamos el comando <em>npm install</em> dos veces, pero con ligeras diferencias:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install axios\nnpm install json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>Hay una pequeña diferencia en los parámetros. <i>axios</i> se instala como una dependencia de tiempo de ejecución de la aplicación, porque la ejecución del programa requiere la existencia de la librería. Por otro lado, <i>json-server</i> se instaló como una dependencia de desarrollo (<em>-- save-dev</em>), ya que el programa en sí no lo requiere. Se utiliza como ayuda durante el desarrollo de software. Habrá más sobre diferentes dependencias en la próxima parte del curso.</p>\n<h3>Axios y promesas</h3>\n<p>Ahora estamos listos para usar axios. En el futuro, se asume que json-server se está ejecutando en el puerto 3001.</p>\n<p>NB: Para ejecutar json-server y su aplicación react simultáneamente, es posible que deba usar dos ventanas de terminal. Uno para mantener json-server en ejecución y el otro para ejecutar react-app.</p>\n<p>La librería se puede poner en uso de la misma manera que otras librerías, por ejemplo, React, es decir, utilizando una instrucción <em>import</em> adecuada.</p>\n<p>Agregue lo siguiente al archivo <i>index.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> promise2 <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/foobar'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Si abre <a href=\"http://localhost:3000\">http://localhost:3000</a> en el navegador, debe imprimirse a la consola:</p>\n<picture><img src=\"/static/823a2e7f414c99cb849a42470e4f372d/5a190/16b.png\" srcset=\"/static/823a2e7f414c99cb849a42470e4f372d/772e8/16b.png 200w,\n/static/823a2e7f414c99cb849a42470e4f372d/e17e5/16b.png 400w,\n/static/823a2e7f414c99cb849a42470e4f372d/5a190/16b.png 800w,\n/static/823a2e7f414c99cb849a42470e4f372d/c1b63/16b.png 1200w,\n/static/823a2e7f414c99cb849a42470e4f372d/29007/16b.png 1600w,\n/static/823a2e7f414c99cb849a42470e4f372d/5b6ee/16b.png 1672w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>El método de Axios <em>get</em> devuelve una <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/%20Guide/Using_promises\">promesa</a>.</p>\n<p>La documentación del sitio de Mozilla establece lo siguiente sobre las promesas:</p>\n<blockquote>\n<p><i>Una promesa es un objeto que representa la eventual finalización o falla de una operación asincrónica.</i></p>\n</blockquote>\n<p>En otras palabras, una promesa es un objeto que representa una operación asincrónica. Una promesa puede tener tres estados distintos:</p>\n<ol>\n<li>La promesa está <i>pendiente</i>: significa que el valor final (uno de los dos siguientes) aún no está disponible.</li>\n<li>La promesa está <i>cumplida</i>: Significa que la operación se ha completado y el valor final está disponible, que generalmente es una operación exitosa. Este estado a veces también se denomina <i>resuelto</i>.</li>\n<li>La promesa es <i>rechazada</i>: Significa que un error impidió determinar el valor final, que generalmente representa una operación fallida.</li>\n</ol>\n<p>La primera promesa en nuestro ejemplo es <i>cumplida</i>, que representa una solicitud <em>axios.get('<a href=\"http://localhost:3001/notes&#x27;\">http://localhost:3001/notes'</a>)</em> exitosa. El segundo, sin embargo, es <i>rechazado</i> y la consola nos dice el motivo. Parece que estábamos intentando realizar una solicitud HTTP GET a una dirección inexistente.</p>\n<p>Si, y cuando, queremos acceder al resultado de la operación representada por la promesa, debemos registrar un controlador de eventos en la promesa. Esto se logra usando el método <em>then</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Se imprime lo siguiente en la consola:</p>\n<picture><img src=\"/static/ea48db35e4b6b6ee75bd0b7795ea958c/5a190/17e.png\" srcset=\"/static/ea48db35e4b6b6ee75bd0b7795ea958c/772e8/17e.png 200w,\n/static/ea48db35e4b6b6ee75bd0b7795ea958c/e17e5/17e.png 400w,\n/static/ea48db35e4b6b6ee75bd0b7795ea958c/5a190/17e.png 800w,\n/static/ea48db35e4b6b6ee75bd0b7795ea958c/c1b63/17e.png 1200w,\n/static/ea48db35e4b6b6ee75bd0b7795ea958c/29007/17e.png 1600w,\n/static/ea48db35e4b6b6ee75bd0b7795ea958c/e92cd/17e.png 1778w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>El entorno de ejecución de JavaScript llama a la función de devolución de llamada registrada por el método <em>then</em> proporcionándole un objeto <em>response</em> como parámetro. El objeto <em>response</em> contiene todos los datos esenciales relacionados con la respuesta de una solicitud HTTP GET, que incluirían los <i>datos (data)</i>, el <i>código de estado (status code)</i> y <i>encabezados (headers)</i>.</p>\n<p>Por lo general, no es necesario almacenar el objeto de promesa en una variable y, en cambio, es común encadenar la llamada al método <em>then</em> a la llamada al método axios, de modo que la siga directamente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>La función de devolución de llamada ahora toma los datos contenidos en la respuesta, los almacena en una variable e imprime las notas en la consola.</p>\n<p>Una forma más legible de formatear llamadas de método <i>encadenadas</i> es colocar cada llamada en su propia línea:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Los datos devueltos por el servidor son texto sin formato, básicamente solo una cadena larga. La biblioteca axios aún puede analizar los datos en una matriz de JavaScript, ya que el servidor ha especificado que el formato de datos es <i>application/json; charset=utf-8</i> (ver imagen anterior) usando el encabezado <i>content-type</i>.</p>\n<p>Finalmente podemos comenzar a utilizar los datos obtenidos del servidor.</p>\n<p>Intentemos solicitar las notas de nuestro servidor local y renderizarlas, inicialmente como el componente App. Tenga en cuenta que este enfoque tiene muchos problemas, ya que estamos procesando todo el componente <i>App</i> solo cuando recuperamos con éxito una respuesta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>App notes<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Este método podría ser aceptable en algunas circunstancias, pero es algo problemático. En su lugar, movamos la búsqueda de datos al componente <i>App</i>.</p>\n<p>Sin embargo, lo que no es inmediatamente obvio es dónde se debe colocar el comando <em>axios.get</em> dentro del componente.</p>\n<h3>Effect-hooks</h3>\n<p>Ya hemos utilizado <a href=\"https://reactjs.org/docs/hooks-state.html\">state hooks</a> que se introdujeron junto con la versión de React <a href=\"https://www.npmjs.com/package/react/v/16.8.0\">16.8.0</a>, que proporciona el estado de los componentes de React definidos como funciones, los llamados <i>componentes funcionales</i>. La versión 16.8.0 también presenta los <a href=\"https://reactjs.org/docs/hooks-effect.html\">hooks de efectos</a> como una nueva característica. Según los documentos oficiales:</p>\n<blockquote>\n<p><i>Effect Hook le permite realizar efectos secundarios en componentes de funciones.</i>\n<i>Obtener datos, configurar una suscripción y cambiar manualmente el DOM en los componentes de React son todos ejemplos de efectos secundarios.</i></p>\n</blockquote>\n<p>Como tal, los hooks de efectos son precisamente la herramienta adecuada para usar cuando se obtienen datos de un servidor.</p>\n<p>Eliminemos la obtención de datos de <i>index.js</i>. Dado que vamos a recuperar las notas del servidor, ya no es necesario pasar datos como props al componente <i>App</i>. Entonces <i>index.js</i> se puede simplificar a:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El componente <i>App</i> cambia de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    axios</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render'</span><span class=\"token punctuation\">,</span> notes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">'notes'</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>También hemos agregado algunas impresiones útiles, que aclaran la progresión de la ejecución.</p>\n<p>Esto se imprime en la consola</p>\n<pre>\nrender 0 notes\neffect\npromise fulfilled\nrender 3 notes\n</pre>\n<p>Primero se ejecuta el cuerpo de la función que define el componente y el componente se renderiza por primera vez. En este punto, se imprime <i>render 0 notes</i>, lo que significa que los datos aún no se han obtenido del servidor.</p>\n<p>La siguiente función, o efecto en el lenguaje de React:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n  axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>se ejecuta inmediatamente después de la renderización. La ejecución de la función da como resultado que <i>effect</i> se imprima en la consola, y el comando <em>axios.get</em> inicia la búsqueda de datos del servidor y registra la siguiente función como un <i>controlador de eventos</i> para la operación:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cuando llegan datos del servidor, el tiempo de ejecución de JavaScript llama a la función registrada como el controlador de eventos, que imprime <i>promise fulfilled</i> en la consola y almacena las notas recibidas del servidor en el estado mediante la función <em>setNotes(response.data)</em>.</p>\n<p>Como siempre, una llamada a una función de actualización de estado desencadena la re-renderización del componente. Como resultado, <i>render 3 notes</i> se imprime en la consola y las notas obtenidas del servidor se renderizan en la pantalla.</p>\n<p>Finalmente, echemos un vistazo a la definición del hook de efectos como un todo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n  axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Reescribamos el código de forma un poco diferente. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n  axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ahora podemos ver más claramente que la función <a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\">useEffect</a> en realidad toma <i>dos parámetros</i>. La primera es una función, el <i>efecto</i> en sí mismo. Según la documentación:</p>\n<blockquote>\n<p><i>De forma predeterminada, los efectos se ejecutan después de cada renderizado completo, pero puede elegir activarlo solo cuando ciertos valores han cambiado.</i></p>\n</blockquote>\n<p>Por lo tanto, por defecto, el efecto <i>siempre</i> se ejecuta después de que el componente ha sido renderizado. En nuestro caso, sin embargo, solo queremos ejecutar el efecto junto con el primer render.</p>\n<p>El segundo parámetro de <em>useEffect</em> se usa para <a href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\">especificar la frecuencia con la que se ejecuta el efecto</a>. Si el segundo parámetro es una matriz vacía <em>[]</em>, entonces el efecto solo se ejecuta junto con el primer renderizado del componente.</p>\n<p>Hay muchos casos de uso posibles para un hook de efecto distintos de la obtención de datos del servidor. Sin embargo, este uso es suficiente para nosotros, por ahora.</p>\n<p>Piense en la secuencia de eventos que acabamos de comentar. ¿Qué partes del código se ejecutan? ¿En qué orden? ¿Con qué frecuencia? ¡Entender el orden de los eventos es fundamental!</p>\n<p>Tenga en cuenta que también podríamos haber escrito el código de la función de efecto de esta manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">eventHandler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n  promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>eventHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Se asigna una referencia a una función de controlador de eventos a la variable <em>eventHandler</em>. La promesa devuelta por el método <em>get</em> de Axios se almacena en la variable <em>promise</em>. El registro de la devolución de llamada ocurre dando la variable <em>eventHandler</em>, refiriéndose a la función del manejador de eventos, como un parámetro para el método <em>then</em> de la promesa. Por lo general, no es necesario asignar funciones y promesas a las variables, y una forma más compacta de representar las cosas, como se ve más arriba, es suficiente.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n  axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Todavía tenemos un problema en nuestra aplicación. Al agregar nuevas notas, no se almacenan en el servidor.</p>\n<p>El código de la aplicación, como se ha descrito hasta ahora, se puede encontrar completo en <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part2-4\">github</a>, en la rama <i>part2-4</i>.</p>\n<h3>El entorno de ejecución de desarrollo</h3>\n<p>La configuración de toda nuestra aplicación se ha vuelto cada vez más compleja. Repasemos qué pasa y dónde. La siguiente imagen describe la composición de la aplicación</p>\n<picture><img src=\"/static/0e3766361ce9d08f0c4fdd39152cf493/5a190/18e.png\" srcset=\"/static/0e3766361ce9d08f0c4fdd39152cf493/772e8/18e.png 200w,\n/static/0e3766361ce9d08f0c4fdd39152cf493/e17e5/18e.png 400w,\n/static/0e3766361ce9d08f0c4fdd39152cf493/5a190/18e.png 800w,\n/static/0e3766361ce9d08f0c4fdd39152cf493/77672/18e.png 1060w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>El código JavaScript que compone nuestra aplicación React se ejecuta en el navegador. El navegador obtiene el JavaScript del <i>servidor de desarrollo React</i>, que es la aplicación que se ejecuta después de ejecutar el comando <em>npm start</em>. El servidor de desarrollo transforma el JavaScript en un formato comprendido por el navegador. Entre otras cosas, une JavaScript de diferentes archivos en un solo archivo. Analizaremos el servidor de desarrollo con más detalle en la parte 7 del curso.</p>\n<p>La aplicación React que se ejecuta en el navegador obtiene los datos formateados JSON desde <i>json-server</i> que se ejecuta en el puerto 3001 de la máquina. El servidor del que consultamos los datos - <i>json-server</i> - obtiene sus datos del archivo <i>db.json</i>.</p>\n<p>En este punto del desarrollo, todas las partes de la aplicación residen en la máquina del desarrollador de software, también conocida como localhost. La situación cambia cuando la aplicación se implementa en Internet. Haremos esto en la parte 3.</p>\n</div> \n<div class=\"tasks\">\n<h3>Ejercicios 2.11.-2.14.</h3>\n<h4>2.11: La guía telefónica Paso6</h4>\n<p>Continuamos con el desarrollo del directorio telefónico. Almacene el estado inicial de la aplicación en el archivo <i>db.json</i>, que debe ubicarse en la raíz del proyecto.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"persons\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> \n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"040-123456\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> \n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ada Lovelace\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"39-44-5323523\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> \n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dan Abramov\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"12-43-234345\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> \n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mary Poppendieck\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"39-23-6423122\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Inicie el servidor json en el puerto 3001 y asegúrese de que el servidor devuelve la lista de personas yendo a la dirección <a href=\"http://localhost:3001/persons\">http://localhost:3001/persons</a> en el navegador.</p>\n<p>Si recibe el siguiente mensaje de error: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">events<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">182</span>\n      <span class=\"token keyword\">throw</span> er<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unhandled 'error' event</span>\n      <span class=\"token operator\">^</span>\n\nError<span class=\"token operator\">:</span> listen <span class=\"token constant\">EADDRINUSE</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token operator\">:</span><span class=\"token number\">3001</span>\n    at Object<span class=\"token punctuation\">.</span><span class=\"token function\">_errnoException</span> <span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">1019</span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">_exceptionWithHostPort</span> <span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">1041</span><span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>significa que el puerto 3001 ya está en uso por otra aplicación, por ejemplo en uso por un servidor json que ya se está ejecutando. Cierre la otra aplicación o cambie el puerto en caso de que no funcione.</p>\n<p>Modifique la aplicación de modo que el estado inicial de los datos se obtenga del servidor mediante la librería <i>axios</i>. Complete la búsqueda con un <a href=\"https://reactjs.org/docs/hooks-effect.html\">hook de efecto</a>.</p>\n<h4>2.12* Datos para países, paso1</h4> \n<p>La API <a href=\"https://restcountries.eu\">https://restcountries.eu</a> proporciona datos para diferentes países en un formato legible para máquinas, llamada API REST.</p>\n<p>Cree una aplicación en la que se puedan ver datos de varios países. La aplicación probablemente debería obtener los datos del endpoint <a href=\"https://restcountries.eu/#api-endpoints-all\">all</a>. </p>\n<p>La interfaz de usuario es muy sencilla. El país que se mostrará se encuentra escribiendo una consulta de búsqueda en el campo de búsqueda.</p>\n<p>Si hay demasiados países (más de 10) que coinciden con la consulta, se solicita al usuario que haga su consulta más específica:</p>\n<picture><img src=\"/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/5a190/19b1.png\" srcset=\"/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/772e8/19b1.png 200w,\n/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/e17e5/19b1.png 400w,\n/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/5a190/19b1.png 800w,\n/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/c1b63/19b1.png 1200w,\n/static/d8a3e3b3af8907d0c3dd495ef0d26ba6/2a08f/19b1.png 1422w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Si hay diez o menos países, pero más de uno, entonces se muestran todos los países que coinciden con la consulta:</p>\n<picture><img src=\"/static/1d4ebf199806ccfe0df529c08e2a0c6d/5a190/19b2.png\" srcset=\"/static/1d4ebf199806ccfe0df529c08e2a0c6d/772e8/19b2.png 200w,\n/static/1d4ebf199806ccfe0df529c08e2a0c6d/e17e5/19b2.png 400w,\n/static/1d4ebf199806ccfe0df529c08e2a0c6d/5a190/19b2.png 800w,\n/static/1d4ebf199806ccfe0df529c08e2a0c6d/c1b63/19b2.png 1200w,\n/static/1d4ebf199806ccfe0df529c08e2a0c6d/1e093/19b2.png 1376w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Cuando solo hay un país que coincide con la consulta, entonces los datos básicos del país, su bandera y los idiomas que allí se hablan, son mostrados:</p>\n<picture><img src=\"/static/1d4bba516fb538c5214f37c4a2ab0f8e/5a190/19b3.png\" srcset=\"/static/1d4bba516fb538c5214f37c4a2ab0f8e/772e8/19b3.png 200w,\n/static/1d4bba516fb538c5214f37c4a2ab0f8e/e17e5/19b3.png 400w,\n/static/1d4bba516fb538c5214f37c4a2ab0f8e/5a190/19b3.png 800w,\n/static/1d4bba516fb538c5214f37c4a2ab0f8e/c1b63/19b3.png 1200w,\n/static/1d4bba516fb538c5214f37c4a2ab0f8e/9685e/19b3.png 1336w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>NB</strong>: Es suficiente que su aplicación funcione para la mayoría de los países. Algunos países, como <i>Sudán</i>, pueden resultar difíciles de mantener, ya que el nombre del país es parte del nombre de otro país, <i>Sudán del Sur</i>. No necesita preocuparse por estos casos extremos.</p>\n<p><strong>ADVERTENCIA</strong> create-react-app convertirá automáticamente su proyecto en un repositorio git a menos que cree su aplicación dentro de un repositorio git existente. <strong>Lo más probable es que no desee que cada uno de sus proyectos sea un repositorio separado</strong>, así que simplemente ejecute el comando <em>rm -rf .git</em> en la raíz de su aplicación.</p>\n<h4>2.13*: Datos para países, paso2</h4>\n<p><strong>Todavía queda mucho por hacer en esta parte, ¡así que no se quede atascado en este ejercicio!</strong></p>\n<p>Mejore la aplicación en el ejercicio anterior, de manera que cuando se muestran los nombres de varios países en la página hay un botón junto al nombre del país, que cuando se presiona muestra la vista de ese país:</p>\n<picture><img src=\"/static/b8986829d36bd14bbbd6270e0e8d2edf/5a190/19b4.png\" srcset=\"/static/b8986829d36bd14bbbd6270e0e8d2edf/772e8/19b4.png 200w,\n/static/b8986829d36bd14bbbd6270e0e8d2edf/e17e5/19b4.png 400w,\n/static/b8986829d36bd14bbbd6270e0e8d2edf/5a190/19b4.png 800w,\n/static/b8986829d36bd14bbbd6270e0e8d2edf/c1b63/19b4.png 1200w,\n/static/b8986829d36bd14bbbd6270e0e8d2edf/c1bea/19b4.png 1388w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>En este ejercicio también es suficiente que su aplicación funcione para la mayoría de los países. Los países cuyo nombre aparece en el nombre de otro país, como <i>Sudán</i>, pueden ignorarse.</p>\n<h4>2.14*: Datos de países, paso 3</h4>\n<p><strong>Todavía queda mucho por hacer en esta parte, ¡así que no se quede atascado en este ejercicio!</strong></p>\n<p>Agregue a la vista que muestra los datos de un país, el informe meteorológico de la capital de ese país. Hay docenas de proveedores de datos meteorológicos. Usé <a href=\"https://weatherstack.com/\">https://weatherstack.com/</a></p>\n<picture><img src=\"/static/55e0007d51bf9506697001f03860a4d9/5a190/19ba.png\" srcset=\"/static/55e0007d51bf9506697001f03860a4d9/772e8/19ba.png 200w,\n/static/55e0007d51bf9506697001f03860a4d9/e17e5/19ba.png 400w,\n/static/55e0007d51bf9506697001f03860a4d9/5a190/19ba.png 800w,\n/static/55e0007d51bf9506697001f03860a4d9/c1b63/19ba.png 1200w,\n/static/55e0007d51bf9506697001f03860a4d9/ddb6a/19ba.png 1592w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<!-- ** Huom: ** tarvitset melkein kaikkia säätietoja tarjoavia palveluja käyttääksesi api-avaimen. Älä talleta avainta versionhallintaan, eli älä kirjoita avainta suoraan koodiin. Avaimen arvo kannattaa määritellä ns. [ympäristömuuttujana] (https://create-react-app.dev/docs/adding-custom-environment-variables/). -->\n<p><strong>NB:</strong> Necesita una clave de API para utilizar casi todos los servicios meteorológicos. ¡No guarde la clave de API en el control de código fuente! Tampoco codifique la clave api en su código fuente. En su lugar, utilice una <a href=\"https://create-react-app.dev/docs/adding-custom-environment-variables/\">variable de entorno</a> para guardar la clave.</p>\n<!-- Oletetaan että api-avaimen arvo en <i> t0p53cr3t4p1k3yv4lu3 </i>. Kun ohjelma käynnistetään seuraavasti -->\n<p>Suponiendo que la clave api es <i>t0p53cr3t4p1k3yv4lu3</i>, cuando la aplicación se inicia así:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">REACT_APP_API_KEY</span><span class=\"token operator\">=</span><span class=\"token string\">'t0p53cr3t4p1k3yv4lu3'</span> <span class=\"token function\">npm</span> start // For Linux/macOS Bash\n<span class=\"token punctuation\">(</span><span class=\"token variable\">$env</span>:REACT_APP_API_KEY<span class=\"token operator\">=</span><span class=\"token string\">'t0p53cr3t4p1k3yv4lu3'</span><span class=\"token punctuation\">)</span> -and <span class=\"token punctuation\">(</span>npm start<span class=\"token punctuation\">)</span> // For Windows PowerShell\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">REACT_APP_API_KEY</span><span class=\"token operator\">=</span><span class=\"token string\">'t0p53cr3t4p1k3yv4lu3'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> start // For Windows cmd.exe</code></pre></div>\n<!--koodista päästään avaimen arvoon käsiksi Olion _process.env_ kautta: -->\n<p>usted puede acceder al valor de la clave desde el objeto <em>process.env</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> api_key <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">REACT_APP_API_KEY</span>\n<span class=\"token comment\">// variable api_key has now the value set in startup</span></code></pre></div>\n<p>Tenga en cuenta que si creó la aplicación usando <code class=\"language-text\">npx create-react-app ...</code> y desea usar un nombre diferente para su variable de entorno, entonces el nombre de la variable de entorno debe comenzar con <code class=\"language-text\">REACT_APP_</code>. También puede usar un archivo <code class=\"language-text\">.env</code> en lugar de definirlo en la línea de comando cada vez creando un archivo titulado '.env' en la raíz del proyecto y agregando lo siguiente. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># .env\n\nREACT_APP_API_KEY=t0p53cr3t4p1k3yv4lu3</code></pre></div>\n<p>Tenga en cuenta que deberá reiniciar el servidor para aplicar los cambios.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8869c2e065a6ae187c633a378e6fa6be/part-2.svg"},"part":2,"letter":"c","lang":"es"}}},"pageContext":{"part":2,"letter":"c","lang":"es"}},"staticQueryHashes":["3128451518"]}