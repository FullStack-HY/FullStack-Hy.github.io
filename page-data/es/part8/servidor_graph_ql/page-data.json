{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part8/servidor_graph_ql","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>REST, familiar para nosotros de las partes anteriores del curso, ha sido durante mucho tiempo la forma más frecuente de implementar las interfaces que ofrecen los servidores para los navegadores y, en general, la integración entre diferentes aplicaciones en la web.</p>\n<p>En los últimos años <a href=\"http://graphql.org/\">GraphQL</a>, desarrollado por Facebook, se ha vuelto popular para la comunicación entre aplicaciones web y servidores.</p>\n<p>La filosofía GraphQL es muy diferente a REST. REST está <i>basado en recursos</i>. Cada recurso, por ejemplo un <i>usuario</i> tiene su propia dirección que lo identifica, por ejemplo <i>/users/10</i>. Todas las operaciones realizadas en el recurso se realizan con solicitudes HTTP a su URL. La acción depende del método HTTP utilizado.</p>\n<p>La base de recursos de REST funciona bien en la mayoría de situaciones. Sin embargo, a veces puede resultar un poco incómodo.</p>\n<p>Supongamos que nuestra aplicación de lista de blogs contiene una funcionalidad similar a las de las redes sociales y, por ejemplo, queremos mostrar una lista de todos los blogs que los usuarios que han comentado sobre los blogs que seguimos han agregado.</p>\n<p>Si el servidor implementara una API REST, probablemente tendríamos que hacer varias solicitudes HTTP desde el navegador antes de tener todos los datos que queríamos. Las solicitudes también devolverían una gran cantidad de datos innecesarios y el código en el navegador probablemente sería bastante complicado.</p>\n<p>Si esta fuera una funcionalidad de uso frecuente, podría haber un endpoint REST para ella. Sin embargo, si hubiera muchos de estos tipos de escenarios, sería muy laborioso implementar endpoints REST para todos ellos.</p>\n<p>Un servidor GraphQL es adecuado para este tipo de situaciones.</p>\n<p>El principio fundamental de GraphQL es que el código del navegador forma una <i>consulta</i> que describe los datos deseados y los envía a la API con una solicitud HTTP POST. A diferencia de REST, todas las consultas GraphQL se envían a la misma dirección y su tipo es POST.</p>\n<p>Los datos descritos en el escenario anterior podrían obtenerse con (aproximadamente) la siguiente consulta:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">query FetchBlogsQuery <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">(</span>username: <span class=\"token string\">\"mluukkai\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    followedUsers <span class=\"token punctuation\">{</span>\n      blogs <span class=\"token punctuation\">{</span>\n        comments <span class=\"token punctuation\">{</span>\n          user <span class=\"token punctuation\">{</span>\n            blogs <span class=\"token punctuation\">{</span>\n              title\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La respuesta de los servidores sería sobre el siguiente objeto JSON:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"followedUsers\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"blogs\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"comments\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n              <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"user\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token string\">\"blogs\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">{</span>\n                      <span class=\"token string\">\"title\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Goto considered harmful\"</span>\n                    <span class=\"token punctuation\">}</span>,\n                    <span class=\"token punctuation\">{</span>\n                      <span class=\"token string\">\"title\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"End to End Testing with Cypress is most enjoyable\"</span>\n                    <span class=\"token punctuation\">}</span>,\n                    <span class=\"token punctuation\">{</span>\n                      <span class=\"token string\">\"title\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Navigating your transition to GraphQL\"</span>\n                    <span class=\"token punctuation\">}</span>,\n                    <span class=\"token punctuation\">{</span>\n                      <span class=\"token string\">\"title\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"From REST to GraphQL\"</span>\n                    <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La lógica de la aplicación se mantiene simple y el código en el navegador obtiene exactamente los datos que necesita con una sola consulta.</p>\n<h3>Esquemas y consultas</h3>\n<p>Conoceremos los conceptos básicos de GraphQL mediante la implementación de una versión GraphQL de la aplicación de directorio telefónico de las partes 2 y 3.</p>\n<p>En el corazón de todas las aplicaciones GraphQL hay un <a href=\"https://graphql.org/learn/schema/\">esquema</a>, que describe los datos enviados entre el cliente y el servidor. El esquema inicial de nuestra agenda telefónica es el siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Person <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  phone<span class=\"token operator\">:</span> String\n  street<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  city<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span> \n<span class=\"token punctuation\">}</span>\n\ntype Query <span class=\"token punctuation\">{</span>\n  personCount<span class=\"token operator\">:</span> Int<span class=\"token operator\">!</span>\n  allPersons<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Person<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El esquema describe dos <a href=\"https://graphql.org/learn/schema/#type-system\">tipos</a>. El primer tipo, <i>Person</i>, determina que las personas tienen cinco campos. Cuatro de los campos son de tipo <i>String</i>, que es uno de los <a href=\"https://graphql.org/learn/schema/#scalar-types\">tipos escalares</a> de GraphQL.\nTodos los campos de cadena, excepto <i>phone</i>, deben tener un valor. Esto está marcado por el signo de exclamación en el esquema. El tipo de campo <i>id</i> es <i>ID</i>. Los campos <i>ID</i> son cadenas, pero GraphQL garantiza que sean únicos.</p>\n<p>El segundo tipo es una <a href=\"https://graphql.org/learn/schema/#the-query-and-mutation-types\">Consulta</a>. Prácticamente todos los esquemas GraphQL describen una consulta, que indica qué tipo de consultas se pueden realizar a la API.</p>\n<p>La agenda telefónica describe tres consultas diferentes. <em>personCount</em> devuelve un número entero, <em>allPersons</em> devuelve una lista de objetos <i>Person</i> y <i>findPerson</i> recibe un parámetro de cadena y devuelve un objeto <i>Person</i>.</p>\n<p>Nuevamente, los signos de exclamación se utilizan para marcar qué valores y parámetros de retorno son <i>No nulos</i>. <em>personCount</em>, seguro, devolverá un número entero. La consulta <em>findPerson</em> debe recibir una cadena como parámetro. La consulta devuelve un objeto <i>Person</i> o <i>null</i>. <em>allPersons</em> devuelve una lista de objetos <i>Person</i> y la lista no contiene ningún valor <i>nulo</i>.</p>\n<p>Entonces, el esquema describe qué consultas puede enviar el cliente al servidor, qué tipo de parámetros pueden tener las consultas y qué tipo de datos devuelven las consultas.</p>\n<p>La consulta más simple, <em>personCount</em>, tiene el siguiente aspecto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  personCount\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Suponiendo que nuestras aplicaciones han guardado la información de tres personas, la respuesta se vería así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"personCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La consulta que obtiene la información de todas las personas, <em>allPersons</em>, es un poco más complicada. Como la consulta devuelve una lista de objetos <i>Person</i>, la consulta debe describir\n<i>que <a href=\"https://graphql.org/learn/queries/#fields\">campos</a></i> de los objetos devuelve la consulta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allPersons <span class=\"token punctuation\">{</span>\n    name\n    phone\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El la respuesta podría verse así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"allPersons\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"phone\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"040-123543\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"phone\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"040-432342\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Venla Ruuska\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"phone\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se puede realizar una consulta para devolver cualquier campo descrito en el esquema. Por ejemplo, lo siguiente también sería posible:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allPersons<span class=\"token punctuation\">{</span>\n    name\n    city\n    street\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El último ejemplo muestra una consulta que requiere un parámetro y devuelve los detalles de una persona.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    phone \n    city \n    street\n    id\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Entonces, primero el parámetro se describe entre paréntesis y luego los campos del objeto de valor de retorno se enumeran entre paréntesis.</p>\n<p>La respuesta es así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"findPerson\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"phone\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"040-123543\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"city\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Espoo\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"street\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Tapiolankatu 5 A\"</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3d594650-3436-11e9-bc57-8b80ba54c431\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El valor de retorno se marcó como anulable, así que si buscamos los detalles de una consulta desconocida</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Donald Trump\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    phone \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>el valor de retorno es <i>nulo</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"findPerson\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Como puede ver, existe un vínculo directo entre una consulta GraphQL y el objeto JSON devuelto. Se puede pensar que la consulta describe qué tipo de datos quiere como respuesta.\nLa diferencia con las consultas REST es marcada. Con REST, la URL y el tipo de solicitud no tienen nada que ver con la forma de los datos devueltos.</p>\n<p>La consulta GraphQL describe solo los datos que se mueven entre un servidor y el cliente. En el servidor los datos se pueden organizar y guardar como queramos.</p>\n<p>A pesar de su nombre, GraphQL en realidad no tiene nada que ver con las bases de datos. No le importa cómo se guardan los datos.\nLos datos que utiliza una API GraphQL se pueden guardar en una base de datos relacional, base de datos de documentos o en otros servidores a los que el servidor GraphQL puede acceder con, por ejemplo, REST.</p>\n<h3>servidor Apollo</h3>\n<p>Implementemos un servidor GraphQL con la biblioteca líder en la actualidad <a href=\"https://www.apollographql.com/docs/apollo-server/\">Apollo-server</a>.</p>\n<p>Cree un nuevo proyecto npm con <em>npm init</em> e instale las dependencias necesarias.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> apollo-server graphql</code></pre></div>\n<p>El código inicial es el siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> persons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"040-123543\"</span><span class=\"token punctuation\">,</span>\n    street<span class=\"token operator\">:</span> <span class=\"token string\">\"Tapiolankatu 5 A\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">\"Espoo\"</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">\"3d594650-3436-11e9-bc57-8b80ba54c431\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"040-432342\"</span><span class=\"token punctuation\">,</span>\n    street<span class=\"token operator\">:</span> <span class=\"token string\">\"Malminkaari 10 A\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">\"Helsinki\"</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'3d599470-3436-11e9-bc57-8b80ba54c431'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Venla Ruuska\"</span><span class=\"token punctuation\">,</span>\n    street<span class=\"token operator\">:</span> <span class=\"token string\">\"Nallemäentie 22 C\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">\"Helsinki\"</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'3d599471-3436-11e9-bc57-8b80ba54c431'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Person {\n    name: String!\n    phone: String\n    street: String!\n    city: String! \n    id: ID!\n  }\n\n  type Query {\n    personCount: Int!\n    allPersons: [Person!]!\n    findPerson(name: String!): Person\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">personCount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">allPersons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">findPerson</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      persons<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El corazón del código es un <em>ApolloServer</em>, al que se le dan dos parámetros</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El primer parámetro, <em>typeDefs</em>, contiene el esquema GraphQL.</p>\n<p>El segundo parámetro es un objeto, que contiene los <a href=\"https://www.apollographql.com/docs/tutorial/resolvers/\">resolutores</a> del servidor. Estos son el código, que define <i>cómo</i> se responde a las consultas GraphQL.</p>\n<p>El código de los resolutores es el siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">personCount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">allPersons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">findPerson</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      persons<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Como puede ver, los resolutores corresponden a las consultas descritas en el esquema.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Query <span class=\"token punctuation\">{</span>\n  personCount<span class=\"token operator\">:</span> Int<span class=\"token operator\">!</span>\n  allPersons<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Person<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Así que hay un campo debajo de <i>Query</i> para cada consulta descrita en el esquema.</p>\n<p>La consulta</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  personCount\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tiene el resolutor</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span>length</code></pre></div>\n<p>Por tanto, la respuesta a la consulta es la longitud de la matriz <em>persons</em>.</p>\n<p>La consulta que obtiene todas las personas</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allPersons <span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>tiene un resolutor que devuelve <i>todos</i> los objetos de la matriz <em>persons</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons</code></pre></div>\n<h3>GraphQL-playground</h3>\n<p>Cuando Apollo-server se ejecuta en modo de desarrollo (<em>node filename.js</em>), inicia un <a href=\"https://www.apollographql.com/docs/apollo-server/testing/graphql-playground/\">GraphQL-playground</a> en la dirección <a href=\"http://localhost:4000/graphql\">http://localhost:4000/graphql</a>. Esto es muy útil para un desarrollador y se puede utilizar para realizar consultas al servidor.</p>\n<p>Probemos</p>\n<picture><img src=\"/static/4d5c5a2b6f5e8141123b87fa1ab49e94/5a190/1.png\" srcset=\"/static/4d5c5a2b6f5e8141123b87fa1ab49e94/772e8/1.png 200w,\n/static/4d5c5a2b6f5e8141123b87fa1ab49e94/e17e5/1.png 400w,\n/static/4d5c5a2b6f5e8141123b87fa1ab49e94/5a190/1.png 800w,\n/static/4d5c5a2b6f5e8141123b87fa1ab49e94/c1b63/1.png 1200w,\n/static/4d5c5a2b6f5e8141123b87fa1ab49e94/29007/1.png 1600w,\n/static/4d5c5a2b6f5e8141123b87fa1ab49e94/2adcb/1.png 1984w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A veces, Playground requiere que seas bastante pedante. Si la sintaxis de una consulta es incorrecta, el mensaje de error es bastante imperceptible y no sucede nada cuando presiona go.</p>\n<picture><img src=\"/static/dc95465e66af26cee553a04865345461/5a190/2.png\" srcset=\"/static/dc95465e66af26cee553a04865345461/772e8/2.png 200w,\n/static/dc95465e66af26cee553a04865345461/e17e5/2.png 400w,\n/static/dc95465e66af26cee553a04865345461/5a190/2.png 800w,\n/static/dc95465e66af26cee553a04865345461/c1b63/2.png 1200w,\n/static/dc95465e66af26cee553a04865345461/29007/2.png 1600w,\n/static/dc95465e66af26cee553a04865345461/05244/2.png 1752w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>El resultado de la consulta anterior permanece visible en el lado derecho del campo de juegos incluso cuando la consulta actual es defectuosa.</p>\n<p>Al señalar el lugar correcto en la línea con los errores, puede ver el mensaje de error</p>\n<picture><img src=\"/static/f4d91f847d2f1abec1d1b57496086250/5a190/3.png\" srcset=\"/static/f4d91f847d2f1abec1d1b57496086250/772e8/3.png 200w,\n/static/f4d91f847d2f1abec1d1b57496086250/e17e5/3.png 400w,\n/static/f4d91f847d2f1abec1d1b57496086250/5a190/3.png 800w,\n/static/f4d91f847d2f1abec1d1b57496086250/c1b63/3.png 1200w,\n/static/f4d91f847d2f1abec1d1b57496086250/29007/3.png 1600w,\n/static/f4d91f847d2f1abec1d1b57496086250/9efb3/3.png 1894w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Si el patio de juegos parece estar atascado, actualizar la página generalmente ayuda.</p>\n<p>Al hacer clic en el texto <i>DOCS</i> a la derecha, la zona de juegos muestra el esquema GraphQL del servidor.</p>\n<picture><img src=\"/static/57b7e8a2112ff1b0ef02f57de816cfb4/5a190/4e.png\" srcset=\"/static/57b7e8a2112ff1b0ef02f57de816cfb4/772e8/4e.png 200w,\n/static/57b7e8a2112ff1b0ef02f57de816cfb4/e17e5/4e.png 400w,\n/static/57b7e8a2112ff1b0ef02f57de816cfb4/5a190/4e.png 800w,\n/static/57b7e8a2112ff1b0ef02f57de816cfb4/c1b63/4e.png 1200w,\n/static/57b7e8a2112ff1b0ef02f57de816cfb4/29007/4e.png 1600w,\n/static/57b7e8a2112ff1b0ef02f57de816cfb4/cc418/4e.png 1992w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Parámetros de un resolutor</h3>\n<p>La consulta que obtiene una sola persona</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    phone \n    city \n    street\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>tiene un resolutor que se diferencia de los anteriores porque se le dan <i>dos parámetros</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<p>El segundo parámetro, <em>args</em>, contiene los parámetros de la consulta.\nEl resolutor luego devuelve del arreglo <em>persons</em> a la persona cuyo nombre es el mismo que el valor de <i>args.name</i>.\nEl resolutor no necesita el primer parámetro <em>root</em>.</p>\n<p>De hecho, todas las funciones de resolución tienen <a href=\"https://www.graphql-tools.com/docs/resolvers#resolver-function-signature\">cuatro parámetros</a>. Con JavaScript, los parámetros no tienen que estar definidos, si no son necesarios. Usaremos el primer y tercer parámetro de un resolutor más adelante en esta parte.</p>\n<h3>El solucionador predeterminado</h3>\n<p>Cuando hacemos una consulta, por ejemplo</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    phone \n    city \n    street\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>el servidor sabe devolver exactamente los campos requeridos por la consulta. ¿Cómo sucede eso?</p>\n<p>Un servidor GraphQL debe definir resolutores para <i>cada</i> campo de cada tipo en el esquema.\nHasta ahora solo hemos definido resolutores para campos del tipo <i>Query</i>, es decir, para cada consulta de la aplicación.</p>\n<p>Debido a que no definimos resolutores para los campos del tipo <i>Person</i>, Apollo ha definido <a href=\"https://www.graphql-tools.com/docs/resolvers/#default-resolver\">resolutores predeterminados</a> para ellos.\nFuncionan como el que se muestra a continuación:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">personCount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">allPersons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">findPerson</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  Person<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> root<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">phone</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> root<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">street</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> root<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">city</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> root<span class=\"token punctuation\">.</span>city<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">id</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> root<span class=\"token punctuation\">.</span>id</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>El solucionador predeterminado devuelve el valor del campo correspondiente del objeto. Se puede acceder al objeto en sí a través del primer parámetro del resolutor, <em>root</em>.</p>\n<p>Si la funcionalidad del solucionador predeterminado es suficiente, no es necesario que defina la suya propia. También es posible definir resolutores solo para algunos campos de un tipo y dejar que los resolutores predeterminados manejen el resto.</p>\n<p>Podríamos, por ejemplo, definir que la dirección de todas las personas es <i>Manhattan Nueva York</i> codificando de forma rígida lo siguiente para los resolutores de los campos de calle y ciudad del tipo <i> Persona </i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Person<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">street</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Manhattan\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">city</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"New York\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Objeto dentro de un objeto</h3>\n<p>Modifiquemos un poco el esquema</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\">type Address <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  street<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span></span><span class=\"gatsby-highlight-code-line\">  city<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span> </span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\ntype Person <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  phone<span class=\"token operator\">:</span> String\n<span class=\"gatsby-highlight-code-line\">  address<span class=\"token operator\">:</span> Address<span class=\"token operator\">!</span></span>  id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\ntype Query <span class=\"token punctuation\">{</span>\n  personCount<span class=\"token operator\">:</span> Int<span class=\"token operator\">!</span>\n  allPersons<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Person<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>por lo que una persona ahora tiene un campo con el tipo <i>Address</i>, que contiene la calle y la ciudad.</p>\n<p>Las consultas que requieren la dirección cambian a</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    phone \n    address <span class=\"token punctuation\">{</span>\n      city \n      street\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>y la respuesta ahora es un objeto persona, que <i>contiene</i> un objeto de dirección.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"findPerson\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"phone\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"040-123543\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"address\"</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"city\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Espoo\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"street\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Tapiolankatu 5 A\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Todavía guardamos a las personas en el servidor de la misma manera que lo hacíamos antes.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> persons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"040-123543\"</span><span class=\"token punctuation\">,</span>\n    street<span class=\"token operator\">:</span> <span class=\"token string\">\"Tapiolankatu 5 A\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">\"Espoo\"</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">\"3d594650-3436-11e9-bc57-8b80ba54c431\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Por lo tanto, los objetos de persona guardados en el servidor no son exactamente los mismos que los objetos de tipo <i>Person</i> GraphQL descritos en el esquema.</p>\n<p>A diferencia del tipo <i>Person</i>, el tipo <i>Address</i> no tiene un campo <i>id</i> porque no se guardan en su propia estructura de datos en el servidor.</p>\n<p>Debido a que los objetos guardados en la matriz no tienen un campo <i>address</i>, el resolutor predeterminado no es suficiente.\nAgreguemos un resolutor para el campo <i>address</i> de tipo <i>Person</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">personCount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">allPersons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">findPerson</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      persons<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  Person<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function-variable function\">address</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> </span><span class=\"gatsby-highlight-code-line\">        street<span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        city<span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>city</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Así que cada vez que un objeto <i>Person</i> es devuelto, los campos <i>name</i>, <i>phone</i> e <i>id</i> se devuelven utilizando sus resolutores predeterminados, pero el campo <i>address</i> se forma utilizando un resolutor autodefinido. El parámetro <em>root</em> de la función de resolución es el objeto-persona, por lo que la calle y la ciudad de la dirección se pueden tomar de sus campos.</p>\n<p>El código actual de la aplicación se puede encontrar en <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-backend/tree/part8-1\">Github</a>, rama <i>part8-1</i>.</p>\n<h3>Mutaciones</h3>\n<p>Agreguemos una funcionalidad para agregar nuevas personas a la agenda. En GraphQL, todas las operaciones que provocan un cambio se realizan con <a href=\"https://graphql.org/learn/queries/#mutations\">mutaciones</a>. Las mutaciones se describen en el esquema como claves de tipo <i>Mutation</i>.</p>\n<p>El esquema de una mutación para agregar una nueva persona tiene el siguiente aspecto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addPerson</span><span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n    phone<span class=\"token operator\">:</span> String\n    street<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n    city<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A la mutación se le dan los detalles de la persona como parámetros. El parámetro <i>phone</i> es el único que admite valores NULL. La mutación también tiene un valor de retorno. El valor de retorno es de tipo <i>Person</i>, la idea es que los detalles de la persona agregada se devuelvan si la operación es exitosa y si no, nula. El valor del campo <i>id</i> no se proporciona como parámetro. Es mejor dejar la generación de una identificación para el servidor.</p>\n<p>Las mutaciones también requieren un resolutor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> v1<span class=\"token operator\">:</span> uuid <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uuid'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  Mutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">addPerson</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n      persons <span class=\"token operator\">=</span> persons<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> person\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La mutación agrega el objeto que se le dio como parámetro <em>args</em> al arreglo <em>persons</em>, y devuelve el objeto que agregó al arreglo.</p>\n<p>El campo <i>id</i> recibe un valor único utilizando la librería <a href=\"https://github.com/kelektiv/node-uuid#readme\">uuid</a>.</p>\n<p>Se puede agregar una nueva persona con la siguiente mutación</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addPerson</span><span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Pekka Mikkola\"</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"045-2374321\"</span>\n    street<span class=\"token operator\">:</span> <span class=\"token string\">\"Vilppulantie 25\"</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">\"Helsinki\"</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    phone\n    address<span class=\"token punctuation\">{</span>\n      city\n      street\n    <span class=\"token punctuation\">}</span>\n    id\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ten en cuenta que la persona se guarda en la matriz <em>persons</em> como</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Pekka Mikkola\"</span><span class=\"token punctuation\">,</span>\n  phone<span class=\"token operator\">:</span> <span class=\"token string\">\"045-2374321\"</span><span class=\"token punctuation\">,</span>\n  street<span class=\"token operator\">:</span> <span class=\"token string\">\"Vilppulantie 25\"</span><span class=\"token punctuation\">,</span>\n  city<span class=\"token operator\">:</span> <span class=\"token string\">\"Helsinki\"</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">\"2b24e0b0-343c-11e9-8c2a-cb57c2bf804f\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pero la respuesta a la mutación es</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"addPerson\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pekka Mikkola\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"phone\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"045-2374321\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"address\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"city\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Helsinki\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"street\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vilppulantie 25\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2b24e0b0-343c-11e9-8c2a-cb57c2bf804f\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Entonces, el resolutor del campo <i>address</i> del tipo <i>Person</i> formatea el objeto de respuesta en la forma correcta.</p>\n<h3>Manejo de errores</h3>\n<p>Si intentamos crear una nueva persona, pero los parámetros no se corresponden con la descripción del esquema, el servidor muestra un mensaje de error:</p>\n<picture><img src=\"/static/67154a621319c0a6b4c268bcaac92d42/5a190/5.png\" srcset=\"/static/67154a621319c0a6b4c268bcaac92d42/772e8/5.png 200w,\n/static/67154a621319c0a6b4c268bcaac92d42/e17e5/5.png 400w,\n/static/67154a621319c0a6b4c268bcaac92d42/5a190/5.png 800w,\n/static/67154a621319c0a6b4c268bcaac92d42/c1b63/5.png 1200w,\n/static/67154a621319c0a6b4c268bcaac92d42/29007/5.png 1600w,\n/static/67154a621319c0a6b4c268bcaac92d42/720e3/5.png 1962w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Por lo tanto, parte del manejo de errores se puede realizar automáticamente con <a href=\"https://graphql.org/learn/validation/\">validación</a> GraphQL.</p>\n<p>Sin embargo, GraphQL no puede manejar todo automáticamente. Por ejemplo, las reglas más estrictas para los datos enviados a una mutación deben agregarse manualmente.\nLos errores de esas reglas son manejados por <a href=\"https://www.apollographql.com/docs/apollo-server/data/errors\">el mecanismo de manejo de errores de Apollo Server</a>.</p>\n<p>Bloqueemos agregar el mismo nombre al directorio telefónico varias veces:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> UserInputError<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  Mutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">addPerson</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInputError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Name must be unique'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">          invalidArgs<span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span>\n      <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n      persons <span class=\"token operator\">=</span> persons<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> person\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Entonces, si el nombre que se agregará ya existe en la agenda, arroje el error <em>UserInputError</em>.</p>\n<picture><img src=\"/static/1f8c1c7f0bc21f29a0d9c0ec0c9ee17e/5a190/6.png\" srcset=\"/static/1f8c1c7f0bc21f29a0d9c0ec0c9ee17e/772e8/6.png 200w,\n/static/1f8c1c7f0bc21f29a0d9c0ec0c9ee17e/e17e5/6.png 400w,\n/static/1f8c1c7f0bc21f29a0d9c0ec0c9ee17e/5a190/6.png 800w,\n/static/1f8c1c7f0bc21f29a0d9c0ec0c9ee17e/c1b63/6.png 1200w,\n/static/1f8c1c7f0bc21f29a0d9c0ec0c9ee17e/29007/6.png 1600w,\n/static/1f8c1c7f0bc21f29a0d9c0ec0c9ee17e/912fc/6.png 1934w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>El código actual de la aplicación se puede encontrar en <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-backend/tree/part8-2\">Github</a>, rama <i>part8-2</i>.</p>\n<h3>Enum</h3>\n<p>Agreguemos la posibilidad de filtrar la consulta que devuelve todas las personas con el parámetro <i>phone</i> para que solo devuelva personas con un número de teléfono</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">allPersons</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phone<span class=\"token operator\">:</span> <span class=\"token constant\">YES</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    phone \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>o personas sin un número de teléfono</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">allPersons</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phone<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El esquema cambia así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">enum</span> YesNo <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token constant\">YES</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token constant\">NO</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\ntype Query <span class=\"token punctuation\">{</span>\n  personCount<span class=\"token operator\">:</span> Int<span class=\"token operator\">!</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">allPersons</span><span class=\"token punctuation\">(</span>phone<span class=\"token operator\">:</span> YesNo<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Person<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span></span>  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El tipo <i>YesNo</i> es GraphQL <a href=\"https://graphql.org/learn/schema/#enumeration-types\">enum</a>, o un enumerable, con dos valores posibles <i>YES</i> o <i>NO</i>. En la consulta <em>allPersons</em> el parámetro <em>phone</em> tiene el tipo <i>YesNo</i>, pero acepta valores NULL.</p>\n<p>El solucionador cambia así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">personCount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">allPersons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>args<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> persons</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">byPhone</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span><span class=\"gatsby-highlight-code-line\">      args<span class=\"token punctuation\">.</span>phone <span class=\"token operator\">===</span> <span class=\"token string\">'YES'</span> <span class=\"token operator\">?</span> person<span class=\"token punctuation\">.</span>phone <span class=\"token operator\">:</span> <span class=\"token operator\">!</span>person<span class=\"token punctuation\">.</span>phone</span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> persons<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>byPhone<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>  <span class=\"token function-variable function\">findPerson</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    persons<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3>Cambiar un número de teléfono</h3>\n<p>Agreguemos una mutación para cambiar el número de teléfono de una persona. El esquema de esta mutación se ve como sigue:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addPerson</span><span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n    phone<span class=\"token operator\">:</span> String\n    street<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n    city<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">editNumber</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span></span><span class=\"gatsby-highlight-code-line\">    phone<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>y lo hace un solucionador:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Mutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function-variable function\">editNumber</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> persons<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> updatedPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>person<span class=\"token punctuation\">,</span> phone<span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span>phone <span class=\"token punctuation\">}</span>\n    persons <span class=\"token operator\">=</span> persons<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name <span class=\"token operator\">?</span> updatedPerson <span class=\"token operator\">:</span> p<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> updatedPerson\n  <span class=\"token punctuation\">}</span>   \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La mutación encuentra a la persona que se actualizará mediante el campo <i>name</i>.</p>\n<p>El código actual de la aplicación se puede encontrar en <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-backend/tree/part8-3\">Github</a>, rama <i>part8-3</i>.</p>\n<h3>Más sobre consultas</h3>\n<p>Con GraphQL es posible combinar varios campos de tipo <i>Query</i>, o \"consultas separadas\" en una sola consulta. Por ejemplo, la siguiente consulta devuelve tanto la cantidad de personas en la agenda telefónica como sus nombres:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  personCount\n  allPersons <span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La respuesta se ve como sigue</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"personCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"allPersons\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Venla Ruuska\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La consulta combinada también puede usar la misma consulta varias veces. Sin embargo, debe dar a las consultas nombres alternativos como</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  havePhone<span class=\"token operator\">:</span> <span class=\"token function\">allPersons</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phone<span class=\"token operator\">:</span> <span class=\"token constant\">YES</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n  phoneless<span class=\"token operator\">:</span> <span class=\"token function\">allPersons</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phone<span class=\"token operator\">:</span> <span class=\"token constant\">NO</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La respuesta se ve como</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"havePhone\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"phoneless\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Venla Ruuska\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>En en algunos casos, puede resultar beneficioso nombrar las consultas. Este es el caso especialmente cuando las consultas o mutaciones tienen <a href=\"https://graphql.org/learn/queries/#variables\">parámetros</a>. Pronto entraremos en los parámetros.</p>\n<p>Si hay varias consultas, Playground le pide que elija cuál de ellas ejecutar:</p>\n<picture><img src=\"/static/0f06c367200859083e559542fedb9700/5a190/7.png\" srcset=\"/static/0f06c367200859083e559542fedb9700/772e8/7.png 200w,\n/static/0f06c367200859083e559542fedb9700/e17e5/7.png 400w,\n/static/0f06c367200859083e559542fedb9700/5a190/7.png 800w,\n/static/0f06c367200859083e559542fedb9700/c1b63/7.png 1200w,\n/static/0f06c367200859083e559542fedb9700/29007/7.png 1600w,\n/static/0f06c367200859083e559542fedb9700/460fa/7.png 1910w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 8.1.-8.7.</h3>\n<p>A través de los ejercicios, implementaremos un backend GraphQL para una pequeña biblioteca.\nComience con <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/library-backend.js\">este archivo</a>. ¡Recuerde <em>npm init</em> e instalar dependencias!</p>\n<p>Tenga en cuenta que el código no funciona inicialmente porque la definición del esquema no está completa.</p>\n<h4>8.1: El número de libros y autores</h4>\n<p>Implementar consultas <em>bookCount</em> y <em>authorCount</em> que devuelven el número de libros y el número de autores.</p>\n<p>La consulta</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  bookCount\n  authorCount\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>debe devolver</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"bookCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"authorCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>8.2: Todos los libros</h4>\n<p>Implementar la consulta <em>allBooks</em>, que devuelve los detalles de todos los libros.</p>\n<p>Al final, el usuario debería poder realizar la siguiente consulta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allBooks <span class=\"token punctuation\">{</span> \n    title \n    author\n    published \n    genres\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>8.3: Todos los autores</h4>\n<p>Implementar la consulta <em>allAuthors</em>, que devuelve los detalles de todos autores. La respuesta debe incluir un campo <em>bookCount</em> que contenga el número de libros que ha escrito el autor.</p>\n<p>Por ejemplo, la consulta</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allAuthors <span class=\"token punctuation\">{</span>\n    name\n    bookCount\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>debería devolver`</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"allAuthors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Robert Martin\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"bookCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Martin Fowler\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"bookCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Fyodor Dostoevsky\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"bookCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joshua Kerievsky\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"bookCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sandi Metz\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"bookCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>8.4: Libros de un autor</h4>\n<p>Modifique la consulta <em>allBooks</em> para que un usuario pueda dar un parámetro opcional <i>author</i>. La respuesta debe incluir solo libros escritos por ese autor.</p>\n<p>Por ejemplo, la consulta</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">allBooks</span><span class=\"token punctuation\">(</span>author<span class=\"token operator\">:</span> <span class=\"token string\">\"Robert Martin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>debería devolver</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"allBooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Clean Code\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Agile software development\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>8.5: Libros por género</h4>\n<p>Modifique la consulta <em>allBooks</em> para que un usuario pueda dar un parámetro opcional <i>genre</i>. La respuesta debe incluir solo libros de ese género.</p>\n<p>Por ejemplo, la consulta</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">allBooks</span><span class=\"token punctuation\">(</span>genre<span class=\"token operator\">:</span> <span class=\"token string\">\"refactoring\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n    author\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>debería devolver</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"allBooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Clean Code\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Robert Martin\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Refactoring, edition 2\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Martin Fowler\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Refactoring to patterns\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Joshua Kerievsky\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Practical Object-Oriented Design, An Agile Primer Using Ruby\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sandi Metz\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La consulta debe funcionar cuando ambos parámetros opcionales son proporcionados:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">allBooks</span><span class=\"token punctuation\">(</span>author<span class=\"token operator\">:</span> <span class=\"token string\">\"Robert Martin\"</span><span class=\"token punctuation\">,</span> genre<span class=\"token operator\">:</span> <span class=\"token string\">\"refactoring\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n    author\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>8.6: Agregar un libro</h4>\n<p>Implementar la mutación <em>addBook</em>, que puede ser usado así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addBook</span><span class=\"token punctuation\">(</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">\"NoSQL Distilled\"</span><span class=\"token punctuation\">,</span>\n    author<span class=\"token operator\">:</span> <span class=\"token string\">\"Martin Fowler\"</span><span class=\"token punctuation\">,</span>\n    published<span class=\"token operator\">:</span> <span class=\"token number\">2012</span><span class=\"token punctuation\">,</span>\n    genres<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"database\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nosql\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">,</span>\n    author\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La mutación funciona incluso si el autor no está todavía guardado en el servidor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addBook</span><span class=\"token punctuation\">(</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">\"Pimeyden tango\"</span><span class=\"token punctuation\">,</span>\n    author<span class=\"token operator\">:</span> <span class=\"token string\">\"Reijo Mäki\"</span><span class=\"token punctuation\">,</span>\n    published<span class=\"token operator\">:</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span>\n    genres<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"crime\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">,</span>\n    author\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si el autor aún no está guardado en el servidor , se agrega un nuevo autor al sistema. Los años de nacimiento de los autores aún no se guardan en el servidor, entonces la consulta</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allAuthors <span class=\"token punctuation\">{</span>\n    name\n    born\n    bookCount\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>devuelve</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"allAuthors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Reijo Mäki\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"born\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"bookCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>8.7: Actualización del año de nacimiento de un autor</h4>\n<p>Implemente la mutación <em>editAuthor</em>, que se puede usar para establecer un año de nacimiento para un autor. La mutación se usa así</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">editAuthor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Reijo Mäki\"</span><span class=\"token punctuation\">,</span> setBornTo<span class=\"token operator\">:</span> <span class=\"token number\">1958</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    born\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si se encuentra el autor correcto, la operación devuelve el autor editado:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"editAuthor\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Reijo Mäki\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"born\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1958</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si el autor no está en el sistema, se devuelve <i>null</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"editAuthor\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/255b3daaf137d97fa5b78561e6ef4e3f/part-8.svg"},"part":8,"letter":"a","lang":"es"}}},"pageContext":{"part":8,"letter":"a","lang":"es"}},"staticQueryHashes":["3128451518"]}