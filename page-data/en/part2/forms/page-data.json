{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part2/forms","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Let's continue expanding our application by allowing users to add new notes. You can find the code for our current application <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part2-1\">here</a>. </p>\n<p>To get our page to update when new notes are added it's best to store the notes in the <i>App</i> component's state. Let's import the <a href=\"https://reactjs.org/docs/hooks-state.html\">useState</a> function and use it to define a piece of state that gets initialized with the initial notes array passed in the props. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span><span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App </code></pre></div>\n<p>The component uses the <em>useState</em> function to initialize the piece of state stored in <em>notes</em> with the array of notes passed in the props:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can also use React Developer Tools to see that this really happens:</p>\n<picture><img src=\"/static/f6f9f2e421d47bc42e08c761897c64d9/5a190/30.png\" srcset=\"/static/f6f9f2e421d47bc42e08c761897c64d9/772e8/30.png 200w,\n/static/f6f9f2e421d47bc42e08c761897c64d9/e17e5/30.png 400w,\n/static/f6f9f2e421d47bc42e08c761897c64d9/5a190/30.png 800w,\n/static/f6f9f2e421d47bc42e08c761897c64d9/c1b63/30.png 1200w,\n/static/f6f9f2e421d47bc42e08c761897c64d9/29007/30.png 1600w,\n/static/f6f9f2e421d47bc42e08c761897c64d9/0ddab/30.png 2220w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If we wanted to start with an empty list of notes, we would set the initial value as an empty array, and since the props would not be used, we could omit the <em>props</em> parameter from the function definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>Let's stick with the initial value passed in the props for the time being.</p>\n<p>Next, let's add an HTML <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms\">form</a> to the component that will be used for adding new notes.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>   </span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have added the <em>addNote</em> function as an event handler to the form element that will be called when the form is submitted, by clicking the submit button.</p>\n<p>We use the method discussed in <a href=\"/en/part1/component_state_event_handlers#event-handling\">part 1</a> for defining our event handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <em>event</em> parameter is the <a href=\"https://reactjs.org/docs/handling-events.html\">event</a> that triggers the call to the event handler function: </p>\n<p>The event handler immediately calls the <em>event.preventDefault()</em> method, which prevents the default action of submitting a form. The default action would, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event\">among other things</a>, cause the page to reload.</p>\n<p>The target of the event stored in <em>event.target</em> is logged to the console:</p>\n<picture><img src=\"/static/74fb6fa76af47ec0301ec15163cf74e8/5a190/6e.png\" alt=\"button clicked with form object console\" srcset=\"/static/74fb6fa76af47ec0301ec15163cf74e8/772e8/6e.png 200w,\n/static/74fb6fa76af47ec0301ec15163cf74e8/e17e5/6e.png 400w,\n/static/74fb6fa76af47ec0301ec15163cf74e8/5a190/6e.png 800w,\n/static/74fb6fa76af47ec0301ec15163cf74e8/c1b63/6e.png 1200w,\n/static/74fb6fa76af47ec0301ec15163cf74e8/1acf3/6e.png 1596w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The target in this case is the form that we have defined in our component.</p>\n<p>How do we access the data contained in the form's <i>input</i> element?</p>\n<h3>Controlled component</h3>\n<p>There are many ways to accomplish this; the first method we will take a look at is through the use of so-called <a href=\"https://reactjs.org/docs/forms.html#controlled-components\">controlled components</a>.</p>\n<p>Let's add a new piece of state called <em>newNote</em> for storing the user-submitted input <strong>and</strong> let's set it as the <i>input</i> element's <i>value</i> attribute:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">'a new note...'</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span> </span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button clicked'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>   \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The placeholder text stored as the initial value of the <em>newNote</em> state appears in the <i>input</i> element, but the input text can't be edited. The console displays a warning that gives us a clue as to what might be wrong:</p>\n<picture><img src=\"/static/2905b1f4edfe786a70566fe4a7a3a0e9/5a190/7e.png\" alt=\"provided value to prop without onchange console error\" srcset=\"/static/2905b1f4edfe786a70566fe4a7a3a0e9/772e8/7e.png 200w,\n/static/2905b1f4edfe786a70566fe4a7a3a0e9/e17e5/7e.png 400w,\n/static/2905b1f4edfe786a70566fe4a7a3a0e9/5a190/7e.png 800w,\n/static/2905b1f4edfe786a70566fe4a7a3a0e9/c1b63/7e.png 1200w,\n/static/2905b1f4edfe786a70566fe4a7a3a0e9/29007/7e.png 1600w,\n/static/2905b1f4edfe786a70566fe4a7a3a0e9/05244/7e.png 1752w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Since we assigned a piece of the <i>App</i> component's state as the <i>value</i> attribute of the input element, the <i>App</i> component now <a href=\"https://reactjs.org/docs/forms.html#controlled-components\">controls</a> the behavior of the input element.</p>\n<p>To enable editing of the input element, we have to register an <i>event handler</i> that synchronizes the changes made to the input with the component's state:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'a new note...'</span>\n  <span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleNoteChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> \n          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleNoteChange<span class=\"token punctuation\">}</span></span>        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>   \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have now registered an event handler to the <i>onChange</i> attribute of the form's <i>input</i> element:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>input\n  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleNoteChange<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>The event handler is called every time <i>a change occurs in the input element</i>. The event handler function receives the event object as its <em>event</em> parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleNoteChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <em>target</em> property of the event object now corresponds to the controlled <i>input</i> element, and <em>event.target.value</em> refers to the input value of that element.</p>\n<p>Note that we did not need to call the <em>event.preventDefault()</em> method like we did in the <i>onSubmit</i> event handler. This is because no default action occurs on an input change, unlike a form submission.</p>\n<p>You can follow along in the console to see how the event handler is called:</p>\n<picture><img src=\"/static/a8548b60018e45a30412b33bf4a76c62/5a190/8e.png\" alt=\"multiple console calls with typing text\" srcset=\"/static/a8548b60018e45a30412b33bf4a76c62/772e8/8e.png 200w,\n/static/a8548b60018e45a30412b33bf4a76c62/e17e5/8e.png 400w,\n/static/a8548b60018e45a30412b33bf4a76c62/5a190/8e.png 800w,\n/static/a8548b60018e45a30412b33bf4a76c62/c1b63/8e.png 1200w,\n/static/a8548b60018e45a30412b33bf4a76c62/08c33/8e.png 1570w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You did remember to install <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React devtools</a>, right? Good. You can directly view how the state changes from the React Devtools tab:</p>\n<picture><img src=\"/static/befc5ce08f93dc38d3ebd4db5863a4dc/5a190/9ea.png\" alt=\"state changes in react devtools shows typing too\" srcset=\"/static/befc5ce08f93dc38d3ebd4db5863a4dc/772e8/9ea.png 200w,\n/static/befc5ce08f93dc38d3ebd4db5863a4dc/e17e5/9ea.png 400w,\n/static/befc5ce08f93dc38d3ebd4db5863a4dc/5a190/9ea.png 800w,\n/static/befc5ce08f93dc38d3ebd4db5863a4dc/c1b63/9ea.png 1200w,\n/static/befc5ce08f93dc38d3ebd4db5863a4dc/29007/9ea.png 1600w,\n/static/befc5ce08f93dc38d3ebd4db5863a4dc/27f8b/9ea.png 1730w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Now the <i>App</i> component's <em>newNote</em> state reflects the current value of the input, which means that we can complete the <em>addNote</em> function for creating new notes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> noteObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> newNote<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> notes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, we create a new object for the note called <em>noteObject</em> that will receive its content from the component's <em>newNote</em> state. The unique identifier <i>id</i> is generated based on the total number of notes. This method works for our application since notes are never deleted. With the help of the <em>Math.random()</em> function, our note has a 50% chance of being marked as important.</p>\n<p>The new note is added to the list of notes using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a> array method, introduced in <a href=\"/en/part1/java_script#arrays\">part 1</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The method does not mutate the original <em>notes</em> array, but rather creates <i>a new copy of the array with the new item added to the end</i>. This is important since we must <a href=\"https://reactjs.org/docs/state-and-lifecycle.html#using-state-correctly\">never mutate state directly</a> in React!</p>\n<p>The event handler also resets the value of the controlled input element by calling the <em>setNewNote</em> function of the <em>newNote</em> state:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can find the code for our current application in its entirety in the <i>part2-2</i> branch of <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part2-2\">this GitHub repository</a>.</p>\n<h3>Filtering Displayed Elements</h3>\n<p>Let's add some new functionality to our application that allows us to only view the important notes.</p>\n<p>Let's add a piece of state to the <i>App</i> component that keeps track of which notes should be displayed:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span>  \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's change the component so that it stores a list of all the notes to be displayed in the <em>notesToShow</em> variable. The items on the list depend on the state of the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notesToShow <span class=\"token operator\">=</span> showAll</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">?</span> notes</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">:</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span>notesToShow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span></span>          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The definition of the <em>notesToShow</em> variable is rather compact:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notesToShow <span class=\"token operator\">=</span> showAll\n  <span class=\"token operator\">?</span> notes\n  <span class=\"token operator\">:</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The definition uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">conditional</a> operator also found in many other programming languages.</p>\n<p>The operator functions as follows. If we have:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> condition <span class=\"token operator\">?</span> val1 <span class=\"token operator\">:</span> val2</code></pre></div>\n<p>the <em>result</em> variable will be set to the value of <em>val1</em> if <em>condition</em> is true. If <em>condition</em> is false, the <em>result</em> variable will be set to the value of<em>val2</em>.</p>\n<p>If the value of <em>showAll</em> is false, the <em>notesToShow</em> variable will be assigned to a list that only contains notes that have the <em>important</em> property set to true. Filtering is done with the help of the array <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">filter</a> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The comparison operator is redundant, since the value of <em>note.important</em> is either <i>true</i> or <i>false</i>, which means that we can simply write:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The reason we showed the comparison operator first was to emphasize an important detail: in JavaScript <em>val1 == val2</em> does not work as expected in all situations and it's safer to use <em>val1 === val2</em> exclusively in comparisons. You can read more about the topic <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">here</a>.</p>\n<p>You can test out the filtering functionality by changing the initial value of the <em>showAll</em> state.</p>\n<p>Next, let's add functionality that enables users to toggle the <em>showAll</em> state of the application from the user interface.</p>\n<p>The relevant changes are shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span> \n<span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">          show <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'all'</span> <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>notesToShow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">note</span> <span class=\"token operator\">=></span>\n          <span class=\"token operator\">&lt;</span>Note key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...    </span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The displayed notes (all versus important) are controlled with a button. The event handler for the button is so simple that it has been defined directly in the attribute of the button element. The event handler switches the value of <em>showAll</em> from true to false and vice versa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The text of the button depends on the value of the <em>showAll</em> state:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">show <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'important'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can find the code for our current application in its entirety in the <i>part2-3</i> branch of <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part2-3\">this GitHub repository</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 2.6.-2.10.</h3>\n<p>In the first exercise, we will start working on an application that will be further developed in the later exercises. In related sets of exercises, it is sufficient to return the final version of your application. You may also make a separate commit after you have finished each part of the exercise set, but doing so is not required.</p>\n<p><strong>WARNING</strong> create-react-app will automatically turn your project into a git-repository unless you create your application inside of an existing git repository. You likely <strong>do not want</strong> your project to be a repository, so simply run the <em>rm -rf .git</em> command at the root of your application.</p>\n<h4>2.6: The Phonebook Step1</h4>\n<p>Let's create a simple phonebook. <i><strong>In this part, we will only be adding names to the phonebook.</strong></i></p>\n<p>Let us start by implementing the addition of a person to the phonebook.</p>\n<p>You can use the code below as a starting point for the <i>App</i> component of your application:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>persons<span class=\"token punctuation\">,</span> setPersons<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newName<span class=\"token punctuation\">,</span> setNewName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Phonebook<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          name<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Numbers<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The <em>newName</em> state is meant for controlling the form input element.</p>\n<p>Sometimes it can be useful to render state and other variables as text for debugging purposes. You can temporarily add the following element to the rendered component:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div&gt;debug: {newName}&lt;/div&gt;</code></pre></div>\n<p>It's also important to put what we learned in the <a href=\"/en/part1/a_more_complex_state_debugging_react_apps\">debugging React applications</a> chapter of part one into good use. The <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React developer tools</a> extension is <i>incredibly</i> useful for tracking changes that occur in the application's state.</p>\n<p>After finishing this exercise your application should look something like this:</p>\n<picture><img src=\"/static/501199c4a6d7a5702a7bdf31998d5a1d/5a190/10e.png\" alt=\"screenshot of 2.6 finished\" srcset=\"/static/501199c4a6d7a5702a7bdf31998d5a1d/772e8/10e.png 200w,\n/static/501199c4a6d7a5702a7bdf31998d5a1d/e17e5/10e.png 400w,\n/static/501199c4a6d7a5702a7bdf31998d5a1d/5a190/10e.png 800w,\n/static/501199c4a6d7a5702a7bdf31998d5a1d/c1b63/10e.png 1200w,\n/static/501199c4a6d7a5702a7bdf31998d5a1d/5df5d/10e.png 1572w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Note the use of the React developer tools extension in the picture above!</p>\n<p><strong>NB:</strong></p>\n<ul>\n<li>you can use the person's name as a value of the <i>key</i> property</li>\n<li>remember to prevent the default action of submitting HTML forms!</li>\n</ul>\n<h4>2.7: The Phonebook Step2</h4>\n<p>Prevent the user from being able to add names that already exist in the phonebook. JavaScript arrays have numerous suitable <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">methods</a> for accomplishing this task. Keep in mind <a href=\"https://www.joshbritz.co/posts/why-its-so-hard-to-check-object-equality/\">how object equality works</a> in Javascript.</p>\n<p>Issue a warning with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">alert</a> command when such an action is attempted:</p>\n<picture><img src=\"/static/d5be58590c1460090cb1c87adf201886/5a190/11e.png\" alt=\"2.7 sample screenshot\" srcset=\"/static/d5be58590c1460090cb1c87adf201886/772e8/11e.png 200w,\n/static/d5be58590c1460090cb1c87adf201886/e17e5/11e.png 400w,\n/static/d5be58590c1460090cb1c87adf201886/5a190/11e.png 800w,\n/static/d5be58590c1460090cb1c87adf201886/c1b63/11e.png 1200w,\n/static/d5be58590c1460090cb1c87adf201886/2a333/11e.png 1484w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>Hint:</strong> when you are forming strings that contain values from variables, it is recommended to use a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template string</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is already added to phonebook</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>If the <em>newName</em> variable holds the value <i>Arto Hellas</i>, the template string expression returns the string</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Arto Hellas is already added to phonebook</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>The same could be done in a more Java-like fashion by using the plus operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">newName <span class=\"token operator\">+</span> <span class=\"token string\">' is already added to phonebook'</span></code></pre></div>\n<p>Using template strings is the more idiomatic option and the sign of a true JavaScript professional.</p>\n<h4>2.8: The Phonebook Step3</h4>\n<p>Expand your application by allowing users to add phone numbers to the phone book. You will need to add a second <i>input</i> element to the form (along with its own event handler):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>name<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>number<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>add<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></code></pre></div>\n<p>At this point, the application could look something like this. The image also displays the application's state with the help of <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React developer tools</a>:</p>\n<picture><img src=\"/static/3068a34af61692773a06d60ee93638a9/5a190/12e.png\" alt=\"2.8 sample screenshot\" srcset=\"/static/3068a34af61692773a06d60ee93638a9/772e8/12e.png 200w,\n/static/3068a34af61692773a06d60ee93638a9/e17e5/12e.png 400w,\n/static/3068a34af61692773a06d60ee93638a9/5a190/12e.png 800w,\n/static/3068a34af61692773a06d60ee93638a9/c1b63/12e.png 1200w,\n/static/3068a34af61692773a06d60ee93638a9/29007/12e.png 1600w,\n/static/3068a34af61692773a06d60ee93638a9/f98ee/12e.png 1808w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>2.9*: The Phonebook Step4</h4>\n<p>Implement a search field that can be used to filter the list of people by name:</p>\n<picture><img src=\"/static/4b5897029d4c9e2eb61631ca4c1a4f24/5a190/13e.png\" alt=\"2.9 sample screenshot\" srcset=\"/static/4b5897029d4c9e2eb61631ca4c1a4f24/772e8/13e.png 200w,\n/static/4b5897029d4c9e2eb61631ca4c1a4f24/e17e5/13e.png 400w,\n/static/4b5897029d4c9e2eb61631ca4c1a4f24/5a190/13e.png 800w,\n/static/4b5897029d4c9e2eb61631ca4c1a4f24/c1b63/13e.png 1200w,\n/static/4b5897029d4c9e2eb61631ca4c1a4f24/9f9a4/13e.png 1560w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can implement the search field as an <i>input</i> element that is placed outside the HTML form. The filtering logic shown in the image is <i>case insensitive</i>, meaning that the search term <i>arto</i> also returns results that contain Arto with an uppercase A.</p>\n<p><strong>NB:</strong> When you are working on new functionality, it's often useful to \"hardcode\" some dummy data into your application, e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>persons<span class=\"token punctuation\">,</span> setPersons<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">:</span> <span class=\"token string\">'040-123456'</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Ada Lovelace'</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">:</span> <span class=\"token string\">'39-44-5323523'</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Dan Abramov'</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">:</span> <span class=\"token string\">'12-43-234345'</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Mary Poppendieck'</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">:</span> <span class=\"token string\">'39-23-6423122'</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This saves you from having to manually input data into your application for testing out your new functionality.</p>\n<h4>2.10: The Phonebook Step5</h4>\n<p>If you have implemented your application in a single component, refactor it by extracting suitable parts into new components. Maintain the application's state and all event handlers in the <i>App</i> root component.</p>\n<p>It is sufficient to extract <i><strong>three</strong></i> components from the application. Good candidates for separate components are, for example, the search filter, the form for adding new people to the phonebook, a component that renders all people from the phonebook, and a component that renders a single person's details.</p>\n<p>The application's root component could look similar to this after the refactoring. The refactored root component below only renders titles and lets the extracted components take care of the rest.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Phonebook<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Filter <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Add a <span class=\"token keyword\">new</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>PersonForm \n        <span class=\"token operator\">...</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Numbers<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Persons <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>NB</strong>: You might run into problems in this exercise if you define your components \"in the wrong place\". Now would be a good time to rehearse\nthe chapter <a href=\"/en/part1/a_more_complex_state_debugging_react_apps#do-not-define-components-within-components\">do not define a component in another component</a>\nfrom the last part.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8869c2e065a6ae187c633a378e6fa6be/part-2.svg"},"part":2,"letter":"b","lang":"en"}}},"pageContext":{"part":2,"letter":"b","lang":"en"}},"staticQueryHashes":["3128451518"]}