{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part5/props_children_and_proptypes","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Displaying the login form only when appropriate</h3>\n<p>Let's modify the application so that the login form is not displayed by default:</p>\n<picture><img src=\"/static/da248f79ad2c71a9e834c174065dc694/5a190/10e.png\" alt=\"browser showing log in button by default\" srcset=\"/static/da248f79ad2c71a9e834c174065dc694/772e8/10e.png 200w,\n/static/da248f79ad2c71a9e834c174065dc694/e17e5/10e.png 400w,\n/static/da248f79ad2c71a9e834c174065dc694/5a190/10e.png 800w,\n/static/da248f79ad2c71a9e834c174065dc694/c1b63/10e.png 1200w,\n/static/da248f79ad2c71a9e834c174065dc694/3ceac/10e.png 1456w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The login form appears when the user presses the <i>login</i> button:</p>\n<picture><img src=\"/static/bb9909156016418fc4cc9a1b60424f13/5a190/11e.png\" alt=\"user at login screen about to press cancel\" srcset=\"/static/bb9909156016418fc4cc9a1b60424f13/772e8/11e.png 200w,\n/static/bb9909156016418fc4cc9a1b60424f13/e17e5/11e.png 400w,\n/static/bb9909156016418fc4cc9a1b60424f13/5a190/11e.png 800w,\n/static/bb9909156016418fc4cc9a1b60424f13/c1b63/11e.png 1200w,\n/static/bb9909156016418fc4cc9a1b60424f13/8b936/11e.png 1368w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The user can close the login form by clicking the <i>cancel</i> button.</p>\n<p>Let's start by extracting the login form into its own component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n   handleSubmit<span class=\"token punctuation\">,</span>\n   handleUsernameChange<span class=\"token punctuation\">,</span>\n   handlePasswordChange<span class=\"token punctuation\">,</span>\n   username<span class=\"token punctuation\">,</span>\n   password\n  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username\n          <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleUsernameChange<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          password\n          <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handlePasswordChange<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoginForm</code></pre></div>\n<p>The state and all the functions related to it are defined outside of the component and are passed to the component as props.</p>\n<p>Notice that the props are assigned to variables through <i>destructuring</i>, which means that instead of writing:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username\n          <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span>\n            name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>where the properties of the <em>props</em> object are accessed through e.g. <em>props.handleSubmit</em>, the properties are assigned directly to their own variables.</p>\n<p>One fast way of implementing the functionality is to change the <em>loginForm</em> function of the <i>App</i> component like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loginVisible<span class=\"token punctuation\">,</span> setLoginVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>log <span class=\"token keyword\">in</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>LoginForm\n            username<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            password<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            handleUsernameChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            handlePasswordChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            handleSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <i>App</i> components state now contains the boolean <i>loginVisible</i>, which defines if the login form should be shown to the user or not.</p>\n<p>The value of <em>loginVisible</em> is toggled with two buttons. Both buttons have their event handlers defined directly in the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>log <span class=\"token keyword\">in</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoginVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>The visibility of the component is defined by giving the component an <a href=\"/en/part2/adding_styles_to_react_app#inline-styles\">inline</a> style rule, where the value of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">display</a> property is <i>none</i> if we do not want the component to be displayed:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> loginVisible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token comment\">// button</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token comment\">// button</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>We are once again using the \"question mark\" ternary operator. If <em>loginVisible</em> is <i>true</i>, then the CSS rule of the component will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If <em>loginVisible</em> is <i>false</i>, then <i>display</i> will not receive any value related to the visibility of the component.</p>\n<h3>The components children, aka. props.children</h3>\n<p>The code related to managing the visibility of the login form could be considered to be its own logical entity, and for this reason, it would be good to extract it from the <i>App</i> component into a separate component.</p>\n<p>Our goal is to implement a new <i>Togglable</i> component that can be used in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">'login'</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>LoginForm\n    username<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n    password<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n    handleUsernameChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    handlePasswordChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    handleSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>The way that the component is used is slightly different from our previous components. The component has both opening and closing tags that surround a <i>LoginForm</i> component. In React terminology <i>LoginForm</i> is a child component of <i>Togglable</i>.</p>\n<p>We can add any React elements we want between the opening and closing tags of <i>Togglable</i>, like this for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"reveal\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token keyword\">this</span> line is at start hidden<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>also <span class=\"token keyword\">this</span> is hidden<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>The code for the <i>Togglable</i> component is shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Togglable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleVisibility</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visible<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>buttonLabel<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<p>The new and interesting part of the code is <a href=\"https://reactjs.org/docs/glossary.html#propschildren\">props.children</a>, which is used for referencing the child components of the component. The child components are the React elements that we define between the opening and closing tags of a component.</p>\n<p>This time the children are rendered in the code that is used for rendering the component itself:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>Unlike the \"normal\" props we've seen before, <i>children</i> is automatically added by React and always exists. If a component is defined with an automatically closing <em>/></em> tag, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Note\n  key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n  note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span>\n  toggleImportance<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">toggleImportanceOf</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Then <i>props.children</i> is an empty array.</p>\n<p>The <i>Togglable</i> component is reusable and we can use it to add similar visibility toggling functionality to the form that is used for creating new notes.</p>\n<p>Before we do that, let's extract the form for creating notes into a component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">NoteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSubmit<span class=\"token punctuation\">,</span> handleChange<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Create a <span class=\"token keyword\">new</span> <span class=\"token class-name\">note</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next let's define the form component inside of a <i>Togglable</i> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"new note\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>NoteForm\n    onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span>\n    value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n    handleChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleNoteChange<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>You can find the code for our current application in its entirety in the <i>part5-4</i> branch of <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part5-4\">this GitHub repository</a>.</p>\n<h3>State of the forms</h3>\n<p>The state of the application currently is in the <em>App</em> component.</p>\n<p>React documentation says the <a href=\"https://reactjs.org/docs/lifting-state-up.html\">following</a> about where to place the state:</p>\n<p><i>Often, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor.</i></p>\n<p>If we think about the state of the forms, so for example the contents of a new note before it has been created, the <em>App</em> component does not need it for anything.\nWe could just as well move the state of the forms to the corresponding components. </p>\n<p>The component for a note changes like so: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">NoteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> createNote <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">createNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      content<span class=\"token operator\">:</span> newNote<span class=\"token punctuation\">,</span>\n      important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Create a <span class=\"token keyword\">new</span> <span class=\"token class-name\">note</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNewNote</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>save<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> NoteForm</code></pre></div>\n<p><strong>NOTE</strong> At the same time, we changed the behavior of the application so that new notes are important by default, i.e. the fiedl <i>important</i> gets the value <i>true</i>.</p>\n<p>The <i>newNote</i> state attribute and the event handler responsible for changing it have been moved from the <em>App</em> component to the component responsible for the note form. </p>\n<p>There is only one prop left, the <em>createNote</em> function, which the form calls when a new note is created. </p>\n<p>The <em>App</em> component becomes simpler now that we have got rid of the <i>newNote</i> state and its event handler.\nThe <em>addNote</em> function for creating new notes receives a new note as a parameter, and the function is the only prop we send to the form: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">noteObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>returnedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">'new note'</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>NoteForm createNote<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We could do the same for the log in form, but we'll leave that for an optional exercise. </p>\n<p>The application code can be found on <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part5-5\">GitHub</a>,\nbranch <i>part5-5</i>.</p>\n<h3>References to components with ref</h3>\n<p>Our current implementation is quite good; it has one aspect that could be improved.</p>\n<p>After a new note is created, it would make sense to hide the new note form. Currently, the form stays visible. There is a slight problem with hiding the form. The visibility is controlled with the <i>visible</i> variable inside of the <i>Togglable</i> component. How can we access it outside of the component?</p>\n<p>There are many ways to implement closing the form from the parent component, but let's use the <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">ref</a> mechanism of React, which offers a reference to the component.</p>\n<p>Let's make the following changes to the <i>App</i> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> noteFormRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">'new note'</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>noteFormRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>NoteForm createNote<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <a href=\"https://reactjs.org/docs/hooks-reference.html#useref\">useRef</a> hook is used to create a <i>noteFormRef</i> ref, that is assigned to the <i>Togglable</i> component containing the creation note form. The <i>noteFormRef</i> variable acts as a reference to the component. This hook ensures the same reference (ref) that is kept throughout re-renders of the component.</p>\n<p>We also make the following changes to the <i>Togglable</i> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> forwardRef<span class=\"token punctuation\">,</span> useImperativeHandle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> refs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>visible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> hideWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> showWhenVisible <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> visible <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleVisibility</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visible<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>refs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      toggleVisibility</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hideWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>buttonLabel<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showWhenVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleVisibility<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>cancel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<p>The function that creates the component is wrapped inside of a <a href=\"https://reactjs.org/docs/react-api.html#reactforwardref\">forwardRef</a> function call. This way the component can access the ref that is assigned to it.</p>\n<p>The component uses the <a href=\"https://reactjs.org/docs/hooks-reference.html#useimperativehandle\">useImperativeHandle</a> hook to make its <i>toggleVisibility</i> function available outside of the component.</p>\n<p>We can now hide the form by calling <i>noteFormRef.current.toggleVisibility()</i> after a new note has been created:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">noteObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    noteFormRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">toggleVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returnedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>     \n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>returnedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To recap, the <a href=\"https://reactjs.org/docs/hooks-reference.html#useimperativehandle\">useImperativeHandle</a> function is a React hook, that is used for defining functions in a component, which can be invoked from outside of the component.</p>\n<p>This trick works for changing the state of a component, but it looks a bit unpleasant. We could have accomplished the same functionality with slightly cleaner code using \"old React\" class-based components. We will take a look at these class components during part 7 of the course material. So far this is the only situation where using React hooks leads to code that is not cleaner than with class components.</p>\n<p>There are also <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">other use cases</a> for refs than accessing React components.</p>\n<p>You can find the code for our current application in its entirety in the <i>part5-6</i> branch of <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part5-6\">this GitHub repository</a>.</p>\n<h3>One point about components</h3>\n<p>When we define a component in React:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Togglable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And use it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable1<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    first\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable2<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    second\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n\n  <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"3\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>togglable3<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    third\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>We create <i>three separate instances of the component</i> that all have their separate state:</p>\n<picture><img src=\"/static/c7355696281ca0c4d8d1e734a1d81a26/5a190/12e.png\" alt=\"browser of three togglable components\" srcset=\"/static/c7355696281ca0c4d8d1e734a1d81a26/772e8/12e.png 200w,\n/static/c7355696281ca0c4d8d1e734a1d81a26/e17e5/12e.png 400w,\n/static/c7355696281ca0c4d8d1e734a1d81a26/5a190/12e.png 800w,\n/static/c7355696281ca0c4d8d1e734a1d81a26/077b7/12e.png 1166w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The <i>ref</i> attribute is used for assigning a reference to each of the components in the variables <i>togglable1</i>, <i>togglable2</i> and <i>togglable3</i>.</p>\n<h3>The updated full stack developer's oath</h3>\n<p>The number of moving parts increases. At the same time, the likelihood of ending up in a situation where we are looking for a bug in the wrong place increases. So we need to be even more systematic. </p>\n<p>So we should once more extend our oath:</p>\n<p>Full stack development is <i> extremely hard</i>, that is why I will use all the possible means to make it easier</p>\n<ul>\n<li>I will have my browser developer console open all the time</li>\n<li>I will use the network tab of the browser dev tools to ensure that frontend and backend are communicating as I expect</li>\n<li>I will constantly keep on eye the state of the server to make sure that the data sent there by the fronend is saved there as I expect</li>\n<li>I will keep on eye on the database: does the backend save data there in the right format</li>\n<li>I progress with small steps</li>\n<li><i>when I suspect that there is a bug in the frontend, I make sure that the backend works for sure</i></li>\n<li><i>when I suspect that there is a bug in the backend, I make sure that the frontend works for sure</i></li>\n<li>I will write lots of <em>console.log</em> statements to make sure I understand how the code and the tests behave and to help pinpoint problems</li>\n<li>If my code does not work, I will not write more code. Instead, I start deleting the code until it works or just return to a state when everything still was still working\n-If a test does not pass, I make sure that the tested functionality for sure works in the application</li>\n<li>When I ask for help in the course Discord or Telegram channel or elsewhere I formulate my questions properly, see <a href=\"https://fullstackopen.com/en/part0/general_info#how-to-ask-help-in-discord-telegam\">here</a> how to ask for help</li>\n</ul>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 5.5.-5.11.</h3>\n<h4>5.5 Blog list frontend, step5</h4>\n<p>Change the form for creating blog posts so that it is only displayed when appropriate. Use functionality similar to what was shown <a href=\"/en/part5/props_children_and_proptypes#displaying-the-login-form-only-when-appropriate\">earlier in this part of the course material</a>. If you wish to do so, you can use the <i>Togglable</i> component defined in part 5.</p>\n<p>By default the form is not visible</p>\n<picture><img src=\"/static/de4cfabdf46a837f1f0bfdba4fd27d67/5a190/13ae.png\" alt=\"browser showing new note button with no form\" srcset=\"/static/de4cfabdf46a837f1f0bfdba4fd27d67/772e8/13ae.png 200w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/e17e5/13ae.png 400w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/5a190/13ae.png 800w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/c1b63/13ae.png 1200w,\n/static/de4cfabdf46a837f1f0bfdba4fd27d67/eb2ef/13ae.png 1324w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It expands when button <i>create new blog</i> is clicked</p>\n<picture><img src=\"/static/0cb27abc7b56ba5ecdd7e9d48d325c87/5a190/13be.png\" alt=\"browser showing form with create new\" srcset=\"/static/0cb27abc7b56ba5ecdd7e9d48d325c87/772e8/13be.png 200w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/e17e5/13be.png 400w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/5a190/13be.png 800w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/c1b63/13be.png 1200w,\n/static/0cb27abc7b56ba5ecdd7e9d48d325c87/bc3ae/13be.png 1268w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The form closes when a new blog is created.</p>\n<h4>5.6 Blog list frontend, step6</h4>\n<p>Separate the form for creating a new blog into its own component (if you have not already done so), and move all the states required for creating a new blog to this component. </p>\n<p>The component must work like the <i>NoteForm</i> component from the <a href=\"/en/part5/props_children_and_proptypes\">material</a> of this part.</p>\n<h4>5.7 Blog list frontend, step7</h4>\n<p>Let's add a button to each blog, which controls whether all of the details about the blog are shown or not.</p>\n<p>Full details of the blog open when the button is clicked.</p>\n<picture><img src=\"/static/b49e9ca45d0582829eed343baad44910/5a190/13ea.png\" alt=\"browser showing full details of a blog with others just having view buttons\" srcset=\"/static/b49e9ca45d0582829eed343baad44910/772e8/13ea.png 200w,\n/static/b49e9ca45d0582829eed343baad44910/e17e5/13ea.png 400w,\n/static/b49e9ca45d0582829eed343baad44910/5a190/13ea.png 800w,\n/static/b49e9ca45d0582829eed343baad44910/c1b63/13ea.png 1200w,\n/static/b49e9ca45d0582829eed343baad44910/229ad/13ea.png 1356w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>And the details are hidden when the button is clicked again. </p>\n<p>At this point, the <i>like</i> button does not need to do anything.</p>\n<p>The application shown in the picture has a bit of additional CSS to improve its appearance.</p>\n<p>It is easy to add styles to the application as shown in part 2 using <a href=\"/en/part2/adding_styles_to_react_app#inline-styles\">inline</a> styles:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Blog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> blog <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> blogStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    paddingTop<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    paddingLeft<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    border<span class=\"token operator\">:</span> <span class=\"token string\">'solid'</span><span class=\"token punctuation\">,</span>\n    borderWidth<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    marginBottom<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>blogStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>blog<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>blog<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token comment\">// ...</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>NB:</strong> even though the functionality implemented in this part is almost identical to the functionality provided by the <i>Togglable</i> component, the component can not be used directly to achieve the desired behavior. The easiest solution will be to add a state to the blog post that controls the displayed form of the blog post.</p>\n<h4>5.8: Blog list frontend, step8</h4>\n<p>We notice that something is wrong. When a new blog is created in the app, the name of the user that added the blog is not shown in the details of the blog:</p>\n<picture><img src=\"/static/4c1a13b22d33df750f24a6e136e7abc1/5a190/59new.png\" srcset=\"/static/4c1a13b22d33df750f24a6e136e7abc1/772e8/59new.png 200w,\n/static/4c1a13b22d33df750f24a6e136e7abc1/e17e5/59new.png 400w,\n/static/4c1a13b22d33df750f24a6e136e7abc1/5a190/59new.png 800w,\n/static/4c1a13b22d33df750f24a6e136e7abc1/c1b63/59new.png 1200w,\n/static/4c1a13b22d33df750f24a6e136e7abc1/29007/59new.png 1600w,\n/static/4c1a13b22d33df750f24a6e136e7abc1/0d292/59new.png 1620w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>When the browser is reloaded, the information of the person is displayed. This is not acceptable, find out where the problem is and make the necessary correction.</p>\n<h4>5.9: Blog list frontend, step9</h4>\n<p>Implement the functionality for the like button. Likes are increased by making an HTTP <em>PUT</em> request to the unique address of the blog post in the backend.</p>\n<p>Since the backend operation replaces the entire blog post, you will have to send all of its fields in the request body. If you wanted to add a like to the following blog post:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  _id<span class=\"token operator\">:</span> <span class=\"token string\">\"5a43fde2cbd20b12a2c34e91\"</span><span class=\"token punctuation\">,</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    _id<span class=\"token operator\">:</span> <span class=\"token string\">\"5a43e6b6c37f3d065eaaa581\"</span><span class=\"token punctuation\">,</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"mluukkai\"</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  likes<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  author<span class=\"token operator\">:</span> <span class=\"token string\">\"Joel Spolsky\"</span><span class=\"token punctuation\">,</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"The Joel Test: 12 Steps to Better Code\"</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>You would have to make an HTTP PUT request to the address <i>/api/blogs/5a43fde2cbd20b12a2c34e91</i> with the following request data:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token string\">\"5a43e6b6c37f3d065eaaa581\"</span><span class=\"token punctuation\">,</span>\n  likes<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  author<span class=\"token operator\">:</span> <span class=\"token string\">\"Joel Spolsky\"</span><span class=\"token punctuation\">,</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"The Joel Test: 12 Steps to Better Code\"</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The backend has to be updated too to handle the user reference.</p>\n<p><strong>One last warning:</strong> if you notice that you are using async/await and the <em>then</em>-method in the same code, it is almost certain that you are doing something wrong. Stick to using one or the other, and never use both at the same time \"just in case\". </p>\n<h4>5.10: Blog list frontend, step10</h4>\n<p>Modify the application to list the blog posts by the number of <i>likes</i>. Sorting the blog posts can be done with the array <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">sort</a> method.</p>\n<h4>5.11: Blog list frontend, step11</h4>\n<p>Add a new button for deleting blog posts. Also, implement the logic for deleting blog posts in the frontend.</p>\n<p>Your application could look something like this:</p>\n<picture><img src=\"/static/87b7180f1f10ce670af1bc21f50233ec/5a190/14ea.png\" alt=\"browser of confirmation of blog removal\" srcset=\"/static/87b7180f1f10ce670af1bc21f50233ec/772e8/14ea.png 200w,\n/static/87b7180f1f10ce670af1bc21f50233ec/e17e5/14ea.png 400w,\n/static/87b7180f1f10ce670af1bc21f50233ec/5a190/14ea.png 800w,\n/static/87b7180f1f10ce670af1bc21f50233ec/c1b63/14ea.png 1200w,\n/static/87b7180f1f10ce670af1bc21f50233ec/d0c2f/14ea.png 1362w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The confirmation dialog for deleting a blog post is easy to implement with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm\">window.confirm</a> function.</p>\n<p>Show the button for deleting a blog post only if the blog post was added by the user.</p>\n</div>\n<div class=\"content\">\n<h3>PropTypes</h3>\n<p>The <i>Togglable</i> component assumes that it is given the text for the button via the <i>buttonLabel</i> prop. If we forget to define it to the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Togglable<span class=\"token operator\">></span> buttonLabel forgotten<span class=\"token operator\">...</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>The application works, but the browser renders a button that has no label text.</p>\n<p>We would like to enforce that when the <i>Togglable</i> component is used, the button label text prop must be given a value.</p>\n<p>The expected and required props of a component can be defined with the <a href=\"https://github.com/facebook/prop-types\">prop-types</a> package. Let's install the package:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> prop-types</code></pre></div>\n<p>We can define the <i>buttonLabel</i> prop as a mandatory or <i>required</i> string-type prop as shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nTogglable<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  buttonLabel<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The console will display the following error message if the prop is left undefined:</p>\n<picture><img src=\"/static/7a239ed6d3ad6721a65ae3ac24eb29b5/5a190/15.png\" alt=\"console error stating buttonLabel is undefined\" srcset=\"/static/7a239ed6d3ad6721a65ae3ac24eb29b5/772e8/15.png 200w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/e17e5/15.png 400w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/5a190/15.png 800w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/c1b63/15.png 1200w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/29007/15.png 1600w,\n/static/7a239ed6d3ad6721a65ae3ac24eb29b5/ab40b/15.png 1736w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The application still works and nothing forces us to define props despite the PropTypes definitions. Mind you, it is extremely unprofessional to leave <i>any</i> red output in the browser console.</p>\n<p>Let's also define PropTypes to the <i>LoginForm</i> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n   handleSubmit<span class=\"token punctuation\">,</span>\n   handleUsernameChange<span class=\"token punctuation\">,</span>\n   handlePasswordChange<span class=\"token punctuation\">,</span>\n   username<span class=\"token punctuation\">,</span>\n   password\n  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\nLoginForm<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  handleSubmit<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  handleUsernameChange<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  handlePasswordChange<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  username<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the type of a passed prop is wrong, e.g. if we try to define the <i>handleSubmit</i> prop as a string, then this will result in the following warning:</p>\n<picture><img src=\"/static/ec732518823c5e2921d46285e5549bf3/5a190/16.png\" alt=\"console error saying handleSubmit expected a function\" srcset=\"/static/ec732518823c5e2921d46285e5549bf3/772e8/16.png 200w,\n/static/ec732518823c5e2921d46285e5549bf3/e17e5/16.png 400w,\n/static/ec732518823c5e2921d46285e5549bf3/5a190/16.png 800w,\n/static/ec732518823c5e2921d46285e5549bf3/c1b63/16.png 1200w,\n/static/ec732518823c5e2921d46285e5549bf3/29007/16.png 1600w,\n/static/ec732518823c5e2921d46285e5549bf3/ab40b/16.png 1736w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>ESlint</h3>\n<p>In part 3 we configured the <a href=\"/en/part3/validation_and_es_lint#lint\">ESlint</a> code style tool to the backend. Let's take ESlint to use in the frontend as well.</p>\n<p>Create-react-app has installed ESlint to the project by default, so all that's left for us to do is define our desired configuration in the <i>.eslintrc.js</i> file. </p>\n<p><em>NB:</em> do not run the <em>eslint --init</em> command. It will install the latest version of ESlint that is not compatible with the configuration file created by create-react-app!</p>\n<p>Next, we will start testing the frontend and in order to avoid undesired and irrelevant linter errors we will install the <a href=\"https://www.npmjs.com/package/eslint-plugin-jest\">eslint-plugin-jest</a> package:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint-plugin-jest</code></pre></div>\n<p>Let's create a <i>.eslintrc.js</i> file with the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* eslint-env node */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"jest/globals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> \n      <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"plugin:react/recommended\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"ecmaFeatures\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2018</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jest\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token number\">2</span>  \n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"linebreak-style\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"unix\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"quotes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"single\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"never\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"eqeqeq\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"no-trailing-spaces\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"object-curly-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"arrow-spacing\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"before\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"after\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"react/prop-types\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"react/react-in-jsx-scope\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"detect\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>NOTE: If you are using Visual Studio Code together with ESLint plugin, you might need to add a workspace setting for it to work. If you are seeing <code class=\"language-text\">Failed to load plugin react: Cannot find module &#39;eslint-plugin-react&#39;</code> additional configuration is needed. Adding the line <code class=\"language-text\">&quot;eslint.workingDirectories&quot;: [{ &quot;mode&quot;: &quot;auto&quot; }]</code> to settings.json in the workspace seems to work. See <a href=\"https://github.com/microsoft/vscode-eslint/issues/880#issuecomment-578052807\">here</a> for more information. </p>\n<p>Let's create <a href=\"https://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories\">.eslintignore</a> file with the following contents to the repository root</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node_modules\nbuild\n.eslintrc.js</code></pre></div>\n<p>Now the directories <em>build</em> and <em>node_modules</em> will be skipped when linting.</p>\n<p>Let us also create an npm script to run the lint:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Component <em>Togglable</em> causes a nasty-looking warning <i>Component definition is missing display name</i>: </p>\n<picture><img src=\"/static/f61843245205294dd4fbf50d8b864dd7/5a190/25x.png\" alt=\"vscode showing component definition error\" srcset=\"/static/f61843245205294dd4fbf50d8b864dd7/772e8/25x.png 200w,\n/static/f61843245205294dd4fbf50d8b864dd7/e17e5/25x.png 400w,\n/static/f61843245205294dd4fbf50d8b864dd7/5a190/25x.png 800w,\n/static/f61843245205294dd4fbf50d8b864dd7/c1b63/25x.png 1200w,\n/static/f61843245205294dd4fbf50d8b864dd7/29007/25x.png 1600w,\n/static/f61843245205294dd4fbf50d8b864dd7/913b9/25x.png 1822w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The react-devtools also reveals that the component does not have a name:</p>\n<picture><img src=\"/static/1fc750ed2c0c78b8736615837a6be1a0/5a190/26ea.png\" alt=\"react devtools showing forwardRef as anonymous\" srcset=\"/static/1fc750ed2c0c78b8736615837a6be1a0/772e8/26ea.png 200w,\n/static/1fc750ed2c0c78b8736615837a6be1a0/e17e5/26ea.png 400w,\n/static/1fc750ed2c0c78b8736615837a6be1a0/5a190/26ea.png 800w,\n/static/1fc750ed2c0c78b8736615837a6be1a0/c1b63/26ea.png 1200w,\n/static/1fc750ed2c0c78b8736615837a6be1a0/29007/26ea.png 1600w,\n/static/1fc750ed2c0c78b8736615837a6be1a0/d3b46/26ea.png 1690w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Fortunately, this is easy to fix</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useImperativeHandle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span>\n\n<span class=\"token keyword\">const</span> Togglable <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">Togglable<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token string\">'Togglable'</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Togglable</code></pre></div>\n<p>You can find the code for our current application in its entirety in the <i>part5-7</i> branch of <a href=\"https://github.com/fullstack-hy2020/part2-notes/tree/part5-7\">this GitHub repository</a>.</p>\n<p>Note that create-react-app has also a <a href=\"https://www.npmjs.com/package/eslint-config-react-app\">default ESLint-configuration</a>, that we have now overridden. <a href=\"https://create-react-app.dev/docs/setting-up-your-editor/#extending-or-replacing-the-default-eslint-config\">The documentation</a> mentions that it is ok to replace the default but does not encourage us to do so:\n<i>We highly recommend extending the base config, as removing it could introduce hard-to-find issues</i>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 5.12.</h3>\n<h4>5.12: Blog list frontend, step12</h4>\n<p>Define PropTypes for one of the components of your application, and add ESlint to the project. Define the configuration according to your liking. Fix all of the linter errors.</p>\n<p>Create-react-app has installed ESlint to the project by default, so all that's left for you to do is define your desired configuration in the <i>.eslintrc.js</i> file. </p>\n<p><em>NB:</em> do not run the <em>eslint --init</em> command. It will install the latest version of ESlint that is not compatible with the configuration file created by create-react-app!</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/b92f84fe9702a35b12f10af4588ba4c2/part-5.svg"},"part":5,"letter":"b","lang":"en"}}},"pageContext":{"part":5,"letter":"b","lang":"en"}},"staticQueryHashes":["3128451518"]}