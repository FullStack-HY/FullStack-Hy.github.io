{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part3/validation_and_es_lint","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>There are usually constraints that we want to apply to the data that is stored in our application's database. Our application shouldn't accept notes that have a missing or empty <i>content</i> property. The validity of the note is checked in the route handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>content <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'content missing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the note does not have the <i>content</i> property, we respond to the request with the status code <i>400 bad request</i>.</p>\n<p>One smarter way of validating the format of the data before it is stored in the database is to use the <a href=\"https://mongoosejs.com/docs/validation.html\">validation</a> functionality available in Mongoose.</p>\n<p>We can define specific validation rules for each field in the schema:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> noteSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    minLength<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>  important<span class=\"token operator\">:</span> Boolean\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <i>content</i> field is now required to be at least five characters long and it is set as required, meaning that it can not be missing. We have not added any constraints to the <i>important</i> field, so its definition in the schema has not changed.</p>\n<p>The <i>minLength</i> and <i>required</i> validators are <a href=\"https://mongoosejs.com/docs/validation.html#built-in-validators\">built-in</a> and provided by Mongoose. The Mongoose <a href=\"https://mongoosejs.com/docs/validation.html#custom-validators\">custom validator</a> functionality allows us to create new validators if none of the built-in ones cover our needs.</p>\n<p>If we try to store an object in the database that breaks one of the constraints, the operation will throw an exception. Let's change our handler for creating a new note so that it passes any potential exceptions to the error handler middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">savedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's expand the error handler to deal with these validation errors:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When validating an object fails, we return the following default error message from Mongoose:</p>\n<picture><img src=\"/static/6beb35ed56d2e06e0eda3e36dea9f426/5a190/50.png\" alt=\"postman showing error message\" srcset=\"/static/6beb35ed56d2e06e0eda3e36dea9f426/772e8/50.png 200w,\n/static/6beb35ed56d2e06e0eda3e36dea9f426/e17e5/50.png 400w,\n/static/6beb35ed56d2e06e0eda3e36dea9f426/5a190/50.png 800w,\n/static/6beb35ed56d2e06e0eda3e36dea9f426/c1b63/50.png 1200w,\n/static/6beb35ed56d2e06e0eda3e36dea9f426/29007/50.png 1600w,\n/static/6beb35ed56d2e06e0eda3e36dea9f426/1e1c3/50.png 1670w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We notice that the backend has now a problem: validations are not done when editing a note.\nThe <a href=\"https://github.com/blakehaswell/mongoose-unique-validator#find--updates\">documentation</a> explains what is the problem, validations are not run by default when <i>findOneAndUpdate</i> is executed.</p>\n<p>The fix is easy. Let us also reformulate the route code a bit:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> important <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body</span>\n  Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndUpdate</span><span class=\"token punctuation\">(</span>\n    request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> \n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> important <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> runValidators<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> <span class=\"token string\">'query'</span> <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">updatedNote</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>updatedNote<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Deploying the database backend to production</h3>\n<p>The application should work almost as-is in Fly.io/Render. We do have to generate a new production build of the frontend since changes thus far were only on our backend.</p>\n<p>The environment variables defined in dotenv will only be used when the backend is not in <i>production mode</i>, i.e. Fly.io or Render.</p>\n<p>For production, we have to set the database URL in the service that is hosting our app.</p>\n<p>In Fly.io that is done <em>fly secrets set</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fly secrets set MONGODB_URI=&#39;mongodb+srv://fullstack:&lt;password&gt;@cluster0.o1opl.mongodb.net/noteApp?retryWrites=true&amp;w=majority&#39;</code></pre></div>\n<p>When the app is being developed, it is more than likely that something fails. Eg. when I deployed my app for the first time with the database, not a single note was seen:</p>\n<picture><img src=\"/static/ba06b14a502f7da32b06c9cd2e79f97b/5a190/fly-problem1.png\" srcset=\"/static/ba06b14a502f7da32b06c9cd2e79f97b/772e8/fly-problem1.png 200w,\n/static/ba06b14a502f7da32b06c9cd2e79f97b/e17e5/fly-problem1.png 400w,\n/static/ba06b14a502f7da32b06c9cd2e79f97b/5a190/fly-problem1.png 800w,\n/static/ba06b14a502f7da32b06c9cd2e79f97b/c1b63/fly-problem1.png 1200w,\n/static/ba06b14a502f7da32b06c9cd2e79f97b/29007/fly-problem1.png 1600w,\n/static/ba06b14a502f7da32b06c9cd2e79f97b/da952/fly-problem1.png 1872w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The network tab of the browser console revealed that fetching the notes did not succeed, the request just remained for a long time in the <em>pending</em> state until it failed with statuscode 502.</p>\n<p>The browser console has to be open <i>all the time!</i></p>\n<p>It is also vital to follow continuously the server logs. The problem became obvious when the logs were opened with  <em>fly logs</em>:</p>\n<picture><img src=\"/static/92ac2c6e2e4d0f84bb7a5a5317708d75/5a190/fly-problem3.png\" srcset=\"/static/92ac2c6e2e4d0f84bb7a5a5317708d75/772e8/fly-problem3.png 200w,\n/static/92ac2c6e2e4d0f84bb7a5a5317708d75/e17e5/fly-problem3.png 400w,\n/static/92ac2c6e2e4d0f84bb7a5a5317708d75/5a190/fly-problem3.png 800w,\n/static/92ac2c6e2e4d0f84bb7a5a5317708d75/c1b63/fly-problem3.png 1200w,\n/static/92ac2c6e2e4d0f84bb7a5a5317708d75/29007/fly-problem3.png 1600w,\n/static/92ac2c6e2e4d0f84bb7a5a5317708d75/7970d/fly-problem3.png 1908w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The database url was <em>undefined</em>, so the command <em>fly secrets set MONGODB_URI</em> was forgotten.</p>\n<p>When using Render, the database url is given by definig the proper env in the dashboard:</p>\n<picture><img src=\"/static/ae7c73092becbbef8aa45299e9b8fbcd/5a190/render-env.png\" srcset=\"/static/ae7c73092becbbef8aa45299e9b8fbcd/772e8/render-env.png 200w,\n/static/ae7c73092becbbef8aa45299e9b8fbcd/e17e5/render-env.png 400w,\n/static/ae7c73092becbbef8aa45299e9b8fbcd/5a190/render-env.png 800w,\n/static/ae7c73092becbbef8aa45299e9b8fbcd/c1b63/render-env.png 1200w,\n/static/ae7c73092becbbef8aa45299e9b8fbcd/29007/render-env.png 1600w,\n/static/ae7c73092becbbef8aa45299e9b8fbcd/97a96/render-env.png 2400w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The Render Dashboard shows the server logs:</p>\n<picture><img src=\"/static/798d2488fb450327abf2b6729faaaeec/5a190/r7.png\" srcset=\"/static/798d2488fb450327abf2b6729faaaeec/772e8/r7.png 200w,\n/static/798d2488fb450327abf2b6729faaaeec/e17e5/r7.png 400w,\n/static/798d2488fb450327abf2b6729faaaeec/5a190/r7.png 800w,\n/static/798d2488fb450327abf2b6729faaaeec/c1b63/r7.png 1200w,\n/static/798d2488fb450327abf2b6729faaaeec/29007/r7.png 1600w,\n/static/798d2488fb450327abf2b6729faaaeec/b5c8e/r7.png 2194w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can find the code for our current application in its entirety in the <i>part3-5</i> branch of <a href=\"https://github.com/fullstack-hy2019/part3-notes-backend/tree/part3-5\">this GitHub repository</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 3.19.-3.21.</h3>\n<h4>3.19*: Phonebook database, step7</h4>\n<p>Expand the validation so that the name stored in the database has to be at least three characters long.</p>\n<p>Expand the frontend so that it displays some form of error message when a validation error occurs. Error handling can be implemented by adding a <em>catch</em> block as shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">personService\n    <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">createdPerson</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// this is the way to access the error message</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can display the default error message returned by Mongoose, even though they are not as readable as they could be:</p>\n<picture><img src=\"/static/fddf847e340f060549c3029f464a5493/5a190/56e.png\" alt=\"phonebook screenshot showing person validation failure\" srcset=\"/static/fddf847e340f060549c3029f464a5493/772e8/56e.png 200w,\n/static/fddf847e340f060549c3029f464a5493/e17e5/56e.png 400w,\n/static/fddf847e340f060549c3029f464a5493/5a190/56e.png 800w,\n/static/fddf847e340f060549c3029f464a5493/c1b63/56e.png 1200w,\n/static/fddf847e340f060549c3029f464a5493/29007/56e.png 1600w,\n/static/fddf847e340f060549c3029f464a5493/f4fb1/56e.png 1766w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>NB:</strong> On update operations, mongoose validators are off by default. <a href=\"https://mongoosejs.com/docs/validation.html\">Read the documentation</a> to determine how to enable them.</p>\n<h4>3.20*: Phonebook database, step8</h4>\n<p>Add validation to your phonebook application, which will make sure that phone numbers are of the correct form. A phone number must </p>\n<ul>\n<li>has length of 8 or more</li>\n<li>\n<p>if formed of two parts that are separated by -, the first part has two or three numbers and the second part also consists of numbers</p>\n<ul>\n<li>eg. 09-1234556 and 040-22334455 are valid phone numbers</li>\n<li>eg. 1234556, 1-22334455 and 10-22-334455 are invalid</li>\n</ul>\n</li>\n</ul>\n<p>Use a <a href=\"https://mongoosejs.com/docs/validation.html#custom-validators\">Custom validator</a> to implement the second part of the validation.</p>\n<p>If an HTTP POST request tries to add a name that is already in the phonebook, the server must respond with an appropriate status code and error message.</p>\n<h4>3.21 Deploying the database backend to production</h4>\n<p>Generate a new \"full stack\" version of the application by creating a new production build of the frontend, and copying it to the backend repository. Verify that everything works locally by using the entire application from the address <a href=\"http://localhost:3001/\">http://localhost:3001/</a>.</p>\n<p>Push the latest version to Fly.io/Render and verify that everything works there as well.</p>\n</div>\n<div class=\"content\">\n<h3>Lint</h3>\n<p>Before we move on to the next part, we will take a look at an important tool called <a href=\"https://en.wikipedia.org/wiki/Lint_(software)\">lint</a>. Wikipedia says the following about lint:</p>\n<blockquote>\n<p><i>Generically, lint or a linter is any tool that detects and flags errors in programming languages, including stylistic errors. The term lint-like behavior is sometimes applied to the process of flagging suspicious language usage. Lint-like tools generally perform static analysis of source code.</i></p>\n</blockquote>\n<p>In compiled statically typed languages like Java, IDEs like NetBeans can point out errors in the code, even ones that are more than just compile errors. Additional tools for performing <a href=\"https://en.wikipedia.org/wiki/Static_program_analysis\">static analysis</a> like <a href=\"https://checkstyle.sourceforge.io\">checkstyle</a>, can be used for expanding the capabilities of the IDE to also point out problems related to style, like indentation.</p>\n<p>In the JavaScript universe, the current leading tool for static analysis aka. \"linting\" is <a href=\"https://eslint.org/\">ESlint</a>.</p>\n<p>Let's install ESlint as a development dependency to the backend project with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> eslint --save-dev</code></pre></div>\n<p>After this we can initialize a default ESlint configuration with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx eslint --init</code></pre></div>\n<p>We will answer all of the questions:</p>\n<picture><img src=\"/static/a7cfec0c6a43ac7e5580e7ea1a9b0260/5a190/52new.png\" alt=\"terminal output from ESlint init\" srcset=\"/static/a7cfec0c6a43ac7e5580e7ea1a9b0260/772e8/52new.png 200w,\n/static/a7cfec0c6a43ac7e5580e7ea1a9b0260/e17e5/52new.png 400w,\n/static/a7cfec0c6a43ac7e5580e7ea1a9b0260/5a190/52new.png 800w,\n/static/a7cfec0c6a43ac7e5580e7ea1a9b0260/c1b63/52new.png 1200w,\n/static/a7cfec0c6a43ac7e5580e7ea1a9b0260/29007/52new.png 1600w,\n/static/a7cfec0c6a43ac7e5580e7ea1a9b0260/fb937/52new.png 1820w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The configuration will be saved in the <em>.eslintrc.js</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'env'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'commonjs'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'es2021'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token string\">'node'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'extends'</span><span class=\"token operator\">:</span> <span class=\"token string\">'eslint:recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'parserOptions'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ecmaVersion'</span><span class=\"token operator\">:</span> <span class=\"token string\">'latest'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'rules'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'indent'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">4</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'linebreak-style'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'unix'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'quotes'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'single'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'semi'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'never'</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's immediately change the rule concerning indentation, so that the indentation level is two spaces.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Inspecting and validating a file like <em>index.js</em> can be done with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx eslint index.js</code></pre></div>\n<p>It is recommended to create a separate <em>npm script</em> for linting:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now the <em>npm run lint</em> command will check every file in the project.</p>\n<p>Also the files in the <em>build</em> directory get checked when the command is run. We do not want this to happen, and we can accomplish this by creating an <a href=\"https://eslint.org/docs/user-guide/configuring#ignoring-files-and-directories\">.eslintignore</a> file in the project's root with the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">build</code></pre></div>\n<p>This causes the entire <em>build</em> directory to not be checked by ESlint.</p>\n<p>Lint has quite a lot to say about our code:</p>\n<picture><img src=\"/static/cdf7d27db507f48c4ab9f7bd59f8071f/5a190/53ea.png\" alt=\"terminal output of ESlint errors\" srcset=\"/static/cdf7d27db507f48c4ab9f7bd59f8071f/772e8/53ea.png 200w,\n/static/cdf7d27db507f48c4ab9f7bd59f8071f/e17e5/53ea.png 400w,\n/static/cdf7d27db507f48c4ab9f7bd59f8071f/5a190/53ea.png 800w,\n/static/cdf7d27db507f48c4ab9f7bd59f8071f/c1b63/53ea.png 1200w,\n/static/cdf7d27db507f48c4ab9f7bd59f8071f/d7ceb/53ea.png 1446w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Let's not fix these issues just yet.</p>\n<p>A better alternative to executing the linter from the command line is to configure a <i>eslint-plugin</i> to the editor, that runs the linter continuously. By using the plugin you will see errors in your code immediately. You can find more information about the Visual Studio ESLint plugin <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">here</a>.</p>\n<p>The VS Code ESlint plugin will underline style violations with a red line:</p>\n<picture><img src=\"/static/64cf2fbae36000083aa1e48292aed8f2/5a190/54a.png\" alt=\"Screenshot of vscode ESlint plugin showing errors\" srcset=\"/static/64cf2fbae36000083aa1e48292aed8f2/772e8/54a.png 200w,\n/static/64cf2fbae36000083aa1e48292aed8f2/e17e5/54a.png 400w,\n/static/64cf2fbae36000083aa1e48292aed8f2/5a190/54a.png 800w,\n/static/64cf2fbae36000083aa1e48292aed8f2/c1b63/54a.png 1200w,\n/static/64cf2fbae36000083aa1e48292aed8f2/29007/54a.png 1600w,\n/static/64cf2fbae36000083aa1e48292aed8f2/17009/54a.png 1932w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This makes errors easy to spot and fix right away.</p>\n<p>ESlint has a vast array of <a href=\"https://eslint.org/docs/rules/\">rules</a> that are easy to take into use by editing the <i>.eslintrc.js</i> file.</p>\n<p>Let's add the <a href=\"https://eslint.org/docs/rules/eqeqeq\">eqeqeq</a> rule that warns us, if equality is checked with anything but the triple equals operator. The rule is added under the <i>rules</i> field in the configuration file.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">'rules'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n   <span class=\"token string\">'eqeqeq'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>While we're at it, let's make a few other changes to the rules.</p>\n<p>Let's prevent unnecessary <a href=\"https://eslint.org/docs/rules/no-trailing-spaces\">trailing spaces</a> at the ends of lines, let's require that <a href=\"https://eslint.org/docs/rules/object-curly-spacing\">there is always a space before and after curly braces</a>, and let's also demand a consistent use of whitespaces in the function parameters of arrow functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">'rules'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">'eqeqeq'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'no-trailing-spaces'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'object-curly-spacing'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'always'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'arrow-spacing'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'before'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our default configuration takes a bunch of predetermined rules into use from <i>eslint:recommended</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">'extends'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'eslint:recommended'</span>,</code></pre></div>\n<p>This includes a rule that warns about <em>console.log</em> commands. <a href=\"https://eslint.org/docs/user-guide/configuring#configuring-rules\">Disabling</a> a rule can be accomplished by defining its \"value\" as 0 in the configuration file. Let's do this for the <i>no-console</i> rule in the meantime.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">'rules'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token string\">'eqeqeq'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'no-trailing-spaces'</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'object-curly-spacing'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'always'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'arrow-spacing'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'before'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'after'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">'no-console'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>NB</strong> when you make changes to the <i>.eslintrc.js</i> file, it is recommended to run the linter from the command line. This will verify that the configuration file is correctly formatted:</p>\n<picture><img src=\"/static/683365a382c607616d65e603f8d8d39a/5a190/55.png\" alt=\"terminal output from npm run lint\" srcset=\"/static/683365a382c607616d65e603f8d8d39a/772e8/55.png 200w,\n/static/683365a382c607616d65e603f8d8d39a/e17e5/55.png 400w,\n/static/683365a382c607616d65e603f8d8d39a/5a190/55.png 800w,\n/static/683365a382c607616d65e603f8d8d39a/c1b63/55.png 1200w,\n/static/683365a382c607616d65e603f8d8d39a/29007/55.png 1600w,\n/static/683365a382c607616d65e603f8d8d39a/7575b/55.png 1608w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If there is something wrong in your configuration file, the lint plugin can behave quite erratically.</p>\n<p>Many companies define coding standards that are enforced throughout the organization through the ESlint configuration file. It is not recommended to keep reinventing the wheel over and over again, and it can be a good idea to adopt a ready-made configuration from someone else's project into yours. Recently many projects have adopted the Airbnb <a href=\"https://github.com/airbnb/javascript\">Javascript style guide</a> by taking Airbnb's <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\">ESlint</a> configuration into use.</p>\n<p>You can find the code for our current application in its entirety in the <i>part3-6</i> branch of <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part3-6\">this GitHub repository</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 3.22.</h3>\n<h4>3.22: Lint configuration</h4>\n<p>Add ESlint to your application and fix all the warnings.</p>\n<p>This was the last exercise of this part of the course. It's time to push your code to GitHub and mark all of your finished exercises to the <a href=\"https://study.cs.helsinki.fi/stats/courses/fullstack2023\">exercise submission system</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/8ac7bc0fb2b7018a7853b00c454b2103/part-3.svg"},"part":3,"letter":"d","lang":"en"}}},"pageContext":{"part":3,"letter":"d","lang":"en"}},"staticQueryHashes":["3128451518"]}