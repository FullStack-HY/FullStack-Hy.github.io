{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part4/token_authentication","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Users must be able to log into our application, and when a user is logged in, their user information must automatically be attached to any new notes they create. </p>\n<p>We will now implement support for <a href=\"https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication#toc-how-token-based-works\">token-based authentication</a> to the backend. </p>\n<p>The principles of token-based authentication are depicted in the following sequence diagram: </p>\n<picture><img src=\"/static/259c9dce6b3d1d77bedb04e799ac7dd3/5a190/16new.png\" alt=\"sequence diagram of token-based authentication\" srcset=\"/static/259c9dce6b3d1d77bedb04e799ac7dd3/772e8/16new.png 200w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/e17e5/16new.png 400w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/5a190/16new.png 800w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/c1b63/16new.png 1200w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/29007/16new.png 1600w,\n/static/259c9dce6b3d1d77bedb04e799ac7dd3/da893/16new.png 2130w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<ul>\n<li>\n<p>User starts by logging in using a login form implemented with React </p>\n<ul>\n<li>We will add the login form to the frontend in <a href=\"/en/part5\">part 5</a> </li>\n</ul>\n</li>\n<li>This causes the React code to send the username and the password to the server address <i>/api/login</i> as a HTTP POST request. </li>\n<li>\n<p>If the username and the password are correct, the server generates a <i>token</i> that somehow identifies the logged-in user. </p>\n<ul>\n<li>The token is signed digitally, making it impossible to falsify (with cryptographic means)</li>\n</ul>\n</li>\n<li>The backend responds with a status code indicating the operation was successful and returns the token with the response.</li>\n<li>The browser saves the token, for example to the state of a React application. </li>\n<li>When the user creates a new note (or does some other operation requiring identification), the React code sends the token to the server with the request.</li>\n<li>The server uses the token to identify the user</li>\n</ul>\n<p>Let's first implement the functionality for logging in. Install the <a href=\"https://github.com/auth0/node-jsonwebtoken\">jsonwebtoken</a> library, which allows us to generate <a href=\"https://jwt.io/\">JSON web tokens</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> jsonwebtoken</code></pre></div>\n<p>The code for login functionality goes to the file controllers/login.js.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span>\n\nloginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token string\">'invalid username or password'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> loginRouter</code></pre></div>\n<p>The code starts by searching for the user from the database by the <i>username</i> attached to the request.\nNext, it checks the <i>password</i>, also attached to the request.\nBecause the passwords themselves are not saved to the database, but <i>hashes</i> calculated from the passwords, the <em>bcrypt.compare</em> method is used to check if the password is correct: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the user is not found, or the password is incorrect, the request is responded to with the status code <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 unauthorized</a>. The reason for the failure is explained in the response body. </p>\n<p>If the password is correct, a token is created with the method <em>jwt.sign</em>. The token contains the username and the user id in a digitally signed form. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n  id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The token has been digitally signed using a string from the environment variable <i>SECRET</i> as the <i>secret</i>.\nThe digital signature ensures that only parties who know the secret can generate a valid token.\nThe value for the environment variable must be set in the <i>.env</i> file. </p>\n<p>A successful request is responded to with the status code <i>200 OK</i>. The generated token and the username of the user are sent back in the response body. </p>\n<p>Now the code for login just has to be added to the application by adding the new router to <i>app.js</i>. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/login'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's try logging in using VS Code REST-client: </p>\n<picture><img src=\"/static/5c4c0fb60e15ec9c753e541a05002c3f/5a190/17e.png\" alt=\"vscode rest post with username/password\" srcset=\"/static/5c4c0fb60e15ec9c753e541a05002c3f/772e8/17e.png 200w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/e17e5/17e.png 400w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/5a190/17e.png 800w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/c1b63/17e.png 1200w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/0f586/17e.png 1498w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It does not work. The following is printed to the console: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>node:32911<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Error: secretOrPrivateKey must have a value\n    at Object.module.exports <span class=\"token punctuation\">[</span>as sign<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/sign.js:101:20<span class=\"token punctuation\">)</span>\n    at loginRouter.post <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/controllers/login.js:26:21<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>node:32911<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async <span class=\"token keyword\">function</span> without a catch block, or by rejecting a promise <span class=\"token function\">which</span> was not handled with .catch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>. <span class=\"token punctuation\">(</span>rejection id: <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The command <em>jwt.sign(userForToken, process.env.SECRET)</em> fails. We forgot to set a value to the environment variable <i>SECRET</i>. It can be any string. When we set the value in file <i>.env</i> (and restart the server), the login works. </p>\n<p>A successful login returns the user details and the token: </p>\n<picture><img src=\"/static/2e2ddac76483e17fded8f6fcc43fd7d4/5a190/18ea.png\" alt=\"vs code rest resonse showing details and token\" srcset=\"/static/2e2ddac76483e17fded8f6fcc43fd7d4/772e8/18ea.png 200w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/e17e5/18ea.png 400w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/5a190/18ea.png 800w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/c1b63/18ea.png 1200w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/29007/18ea.png 1600w,\n/static/2e2ddac76483e17fded8f6fcc43fd7d4/6f175/18ea.png 2036w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>A wrong username or password returns an error message and the proper status code:</p>\n<picture><img src=\"/static/49fe09c494b9e591fa8811b1772404d5/5a190/19ea.png\" alt=\"vs code rest response for incorrect login details\" srcset=\"/static/49fe09c494b9e591fa8811b1772404d5/772e8/19ea.png 200w,\n/static/49fe09c494b9e591fa8811b1772404d5/e17e5/19ea.png 400w,\n/static/49fe09c494b9e591fa8811b1772404d5/5a190/19ea.png 800w,\n/static/49fe09c494b9e591fa8811b1772404d5/c1b63/19ea.png 1200w,\n/static/49fe09c494b9e591fa8811b1772404d5/29007/19ea.png 1600w,\n/static/49fe09c494b9e591fa8811b1772404d5/aea0a/19ea.png 2018w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Limiting creating new notes to logged-in users</h3>\n<p>Let's change creating new notes so that it is only possible if the post request has a valid token attached. The note is then saved to the notes list of the user identified by the token. </p>\n<p>There are several ways of sending the token from the browser to the server. We will use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization\">Authorization</a> header. The header also tells which <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#Authentication_schemes\">authentication scheme</a> is used. This can be necessary if the server offers multiple ways to authenticate.\nIdentifying the scheme tells the server how the attached credentials should be interpreted. </p>\n<p>The <i>Bearer</i> scheme is suitable for our needs. </p>\n<p>In practice, this means that if the token is, for example, the string <i>eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW</i>, the Authorization header will have the value: </p>\n<pre>\nBearer eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW\n</pre>\n<p>Creating new notes will change like so: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTokenFrom</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">request</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> authorization <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization <span class=\"token operator\">&amp;&amp;</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\nnotesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span><span class=\"token function\">getTokenFrom</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'token invalid'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> savedNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  user<span class=\"token punctuation\">.</span>notes <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The helper function <em>getTokenFrom</em> isolates the token from the <i>authorization</i> header. The validity of the token is checked with <em>jwt.verify</em>. The method also decodes the token, or returns the Object which the token was based on.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the token is missing or is it invalid, the exception <i>JsonWebTokenError</i> is raised. We need to extend the error handling middleware to take care of this particular case:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span>  <span class=\"token string\">'JsonWebTokenError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'token missing or invalid'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The object decoded from the token contains the <i>username</i> and <i>id</i> fields, which tell the server who made the request. </p>\n<p>If the object decoded from the token does not contain the user's identity (<em>decodedToken.id</em> is undefined), error status code <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 unauthorized</a> is returned and the reason for the failure is explained in the response body. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    error<span class=\"token operator\">:</span> <span class=\"token string\">'token invalid'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the identity of the maker of the request is resolved, the execution continues as before. </p>\n<p>A new note can now be created using Postman if the <i>authorization</i> header is given the correct value, the string <i>bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ</i>, where the second value is the token returned by the <i>login</i> operation. </p>\n<p>Using Postman this looks as follows: </p>\n<picture><img src=\"/static/fbedde4a1b76cfc0594778a6833312b2/5a190/20e.png\" alt=\"postman adding bearer token\" srcset=\"/static/fbedde4a1b76cfc0594778a6833312b2/772e8/20e.png 200w,\n/static/fbedde4a1b76cfc0594778a6833312b2/e17e5/20e.png 400w,\n/static/fbedde4a1b76cfc0594778a6833312b2/5a190/20e.png 800w,\n/static/fbedde4a1b76cfc0594778a6833312b2/c1b63/20e.png 1200w,\n/static/fbedde4a1b76cfc0594778a6833312b2/5d6a0/20e.png 1580w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>and with Visual Studio Code REST client</p>\n<picture><img src=\"/static/b52fbb45633b056b6e67b02bda722bc8/5a190/21e.png\" alt=\"vscode adding bearer token example\" srcset=\"/static/b52fbb45633b056b6e67b02bda722bc8/772e8/21e.png 200w,\n/static/b52fbb45633b056b6e67b02bda722bc8/e17e5/21e.png 400w,\n/static/b52fbb45633b056b6e67b02bda722bc8/5a190/21e.png 800w,\n/static/b52fbb45633b056b6e67b02bda722bc8/c1b63/21e.png 1200w,\n/static/b52fbb45633b056b6e67b02bda722bc8/29007/21e.png 1600w,\n/static/b52fbb45633b056b6e67b02bda722bc8/dcb79/21e.png 1700w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Current application code can be found on <a href=\"https://github.com/fullstack-hy2020/part3-notes-backend/tree/part4-9\">Github</a>, branch <i>part4-9</i>.</p>\n<p>If the application has multiple interfaces requiring identification, JWT's validation should be separated into its own middleware. An existing library like <a href=\"https://www.npmjs.com/package/express-jwt\">express-jwt</a> could also be used. </p>\n<h3>Problems of Token-based authentication</h3>\n<p>Token authentication is pretty easy to implement, but it contains one problem. Once the API user, eg. a React app gets a token, the API has a blind trust to the token holder. What if the access rights of the token holder should be revoked?</p>\n<p>There are two solutions to the problem. The easier one is to limit the validity period of a token:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">loginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token string\">'invalid username or password'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// token expires in 60*60 seconds, that is, in one hour</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    userForToken<span class=\"token punctuation\">,</span> </span><span class=\"gatsby-highlight-code-line\">    process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span> expiresIn<span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span> <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span>\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Once the token expires, the client app needs to get a new token. Usually, this happens by forcing the user to re-login to the app.</p>\n<p>The error handling middleware should be extended to give a proper error in the case of an expired token:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'JsonWebTokenError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> <span class=\"token string\">'invalid token'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'TokenExpiredError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      error<span class=\"token operator\">:</span> <span class=\"token string\">'token expired'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The shorter the expiration time, the more safe the solution is. So if the token gets into the wrong hands or user access to the system needs to be revoked, the token is only usable for a limited amount of time. On the other hand, a short expiration time forces a potential pain to a user, one must login to the system more frequently.</p>\n<p>The other solution is to save info about each token to backend database and to check for each API request if the access right corresponding to the token is still valid. With this scheme, access rights can be revoked at any time. This kind of solution is often called a <i>server-side session</i>.</p>\n<p>The negative aspect of server-side sessions is the increased complexity in the backend and also the effect on performance since the token validity needs to be checked for each API request to the database. A database access is considerably slower compared to checking the validity of the token itself. That is why it is quite common to save the session corresponding to a token to a <i>key-value database</i> such as <a href=\"https://redis.io/\">Redis</a> that is limited in functionality compared to eg. MongoDB or relational database but extremely fast in some usage scenarios.</p>\n<p>When server-side sessions are used, the token is quite often just a random string, that does not include any information about the user as it is quite often the case when jwt-tokens are used. For each API request, the server fetches the relevant information about the identity of the user from the database. It is also quite usual that instead of using Authorization-header, <i>cookies</i> are used as the mechanism for transferring the token between the client and the server.</p>\n<h3>End notes</h3>\n<p>There have been many changes to the code which have caused a typical problem for a fast-paced software project: most of the tests have broken. Because this part of the course is already jammed with new information, we will leave fixing the tests to a non-compulsory exercise. </p>\n<p>Usernames, passwords and applications using token authentication must always be used over <a href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a>. We could use a Node <a href=\"https://nodejs.org/api/https.html\">HTTPS</a> server in our application instead of the <a href=\"https://nodejs.org/docs/latest-v8.x/api/http.html\">HTTP</a> server (it requires more configuration). On the other hand, the production version of our application is in Heroku, so our application stays secure: Heroku routes all traffic between a browser and the Heroku server over HTTPS. </p>\n<p>We will implement login to the frontend in the <a href=\"/en/part5\">next part</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 4.15.-4.23.</h3>\n<p>In the next exercises, the basics of user management will be implemented for the Bloglist application. The safest way is to follow the story from part 4 chapter <a href=\"/en/part4/user_administration\">User administration</a> to the chapter <a href=\"/en/part4/token_authentication\">Token-based authentication</a>. You can of course also use your creativity. </p>\n<p><strong>One more warning:</strong> If you notice you are mixing async/await and <em>then</em> calls, it is 99% certain you are doing something wrong. Use either or, never both. </p>\n<h4>4.15: bloglist expansion, step3</h4>\n<p>Implement a way to create new users by doing an HTTP POST request to address <i>api/users</i>. Users have a <i>username, password and name</i>.</p>\n<p>Do not save passwords to the database as clear text, but use the <i>bcrypt</i> library like we did in part 4 chapter <a href=\"/en/part4/user_administration#creating-users\">Creating new users</a>.</p>\n<p><strong>NB</strong> Some Windows users have had problems with <i>bcrypt</i>. If you run into problems, remove the library with command </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> uninstall bcrypt </code></pre></div>\n<p>and install <a href=\"https://www.npmjs.com/package/bcryptjs\">bcryptjs</a> instead. </p>\n<p>Implement a way to see the details of all users by doing a suitable HTTP request. </p>\n<p>The list of users can, for example, look as follows: </p>\n<picture><img src=\"/static/b59bda1bd7e5987a5c805332d509e516/5a190/22.png\" alt=\"browser api/users shows JSON data of two users\" srcset=\"/static/b59bda1bd7e5987a5c805332d509e516/772e8/22.png 200w,\n/static/b59bda1bd7e5987a5c805332d509e516/e17e5/22.png 400w,\n/static/b59bda1bd7e5987a5c805332d509e516/5a190/22.png 800w,\n/static/b59bda1bd7e5987a5c805332d509e516/c1b63/22.png 1200w,\n/static/b59bda1bd7e5987a5c805332d509e516/9685e/22.png 1336w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.16*: bloglist expansion, step4</h4>\n<p>Add a feature which adds the following restrictions to creating new users: Both username and password must be given. Both username and password must be at least 3 characters long. The username must be unique. </p>\n<p>The operation must respond with a suitable status code and some kind of an error message if an invalid user is created. </p>\n<p><strong>NB</strong> Do not test password restrictions with Mongoose validations. It is not a good idea because the password received by the backend and the password hash saved to the database are not the same thing. The password length should be validated in the controller as we did in <a href=\"/en/part3/node_js_and_express\">part 3</a> before using Mongoose validation. </p>\n<p>Also, implement tests that ensure invalid users are not created and that an invalid add user operation returns a suitable status code and error message. </p>\n<h4>4.17: bloglist expansion, step5</h4>\n<p>Expand blogs so that each blog contains information on the creator of the blog. </p>\n<p>Modify adding new blogs so that when a new blog is created,  <i>any</i> user from the database is designated as its creator (for example the one found first). Implement this according to part 4 chapter <a href=\"/en/part4/user_administration#populate\">populate</a>.\nWhich user is designated as the creator does not matter just yet. The functionality is finished in exercise 4.19. </p>\n<p>Modify listing all blogs so that the creator's user information is displayed with the blog: </p>\n<picture><img src=\"/static/199682ad74f50747c90997a967856ffa/5a190/23e.png\" alt=\"api/blogs embeds creators user information in JSON data\" srcset=\"/static/199682ad74f50747c90997a967856ffa/772e8/23e.png 200w,\n/static/199682ad74f50747c90997a967856ffa/e17e5/23e.png 400w,\n/static/199682ad74f50747c90997a967856ffa/5a190/23e.png 800w,\n/static/199682ad74f50747c90997a967856ffa/c1b63/23e.png 1200w,\n/static/199682ad74f50747c90997a967856ffa/ae28e/23e.png 1598w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>and listing all users also displays the blogs created by each user: </p>\n<picture><img src=\"/static/ac9967c89785b33440e9b1b4e87c17e5/5a190/24e.png\" alt=\"api/users embeds blogs in JSON data\" srcset=\"/static/ac9967c89785b33440e9b1b4e87c17e5/772e8/24e.png 200w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/e17e5/24e.png 400w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/5a190/24e.png 800w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/c1b63/24e.png 1200w,\n/static/ac9967c89785b33440e9b1b4e87c17e5/9f9a4/24e.png 1560w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.18: bloglist expansion, step6</h4>\n<p>Implement token-based authentication according to part 4 chapter <a href=\"/en/part4/token_authentication\">Token authentication</a>.</p>\n<h4>4.19: bloglist expansion, step7</h4>\n<p>Modify adding new blogs so that it is only possible if a valid token is sent with the HTTP POST request. The user identified by the token is designated as the creator of the blog. </p>\n<h4>4.20*: bloglist expansion, step8</h4>\n<p><a href=\"/en/part4/token_authentication\">This example</a> from part 4 shows taking the token from the header with the <em>getTokenFrom</em> helper function.</p>\n<p>If you used the same solution, refactor taking the token to a <a href=\"/en/part3/node_js_and_express#middleware\">middleware</a>. The middleware should take the token from the <i>Authorization</i> header and place it into the <i>token</i> field of the <i>request</i> object. </p>\n<p>In other words, if you register this middleware in the <i>app.js</i> file before all routes</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>tokenExtractor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Routes can access the token with <em>request.token</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">blogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Remember that a normal <a href=\"/en/part3/node_js_and_express#middleware\">middleware function</a> is a function with three parameters, that at the end calls the last parameter <i>next</i> to move the control to the next middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tokenExtractor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code that extracts the token</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>4.21*: bloglist expansion, step9</h4>\n<p>Change the delete blog operation so that a blog can be deleted only by the user who added the blog. Therefore, deleting a blog is possible only if the token sent with the request is the same as that of the blog's creator. </p>\n<p>If deleting a blog is attempted without a token or by an invalid user, the operation should return a suitable status code. </p>\n<p>Note that if you fetch a blog from the database,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> blog <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Blog<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>the field <i>blog.user</i> does not contain a string, but an Object. So if you want to compare the id of the object fetched from the database and a string id, a normal comparison operation does not work. The id fetched from the database must be parsed into a string first. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> blog<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> userid<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span></code></pre></div>\n<h4>4.22*:  bloglist expansion, step10</h4>\n<p>Both the new blog creation and blog deletion need to find out the identity of the user who is doing the operation. The middleware <em>tokenExtractor</em> that we did in exercise 4.20 helps but still both the handlers of <i>post</i> and <i>delete</i> operations need to find out who the user holding a specific token is.</p>\n<p>Now create a new middleware <em>userExtractor</em>, that finds out the user and sets it to the request object. When you register the middleware in <i>app.js</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>userExtractor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>the user will be set in the field <em>request.user</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">blogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get user from request object</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>user\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nblogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get user from request object</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>user\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note that it is possible to register a middleware only for a specific set of routes. So instead of using <em>userExtractor</em> with all the routes,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// use the middleware in all routes</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>userExtractor<span class=\"token punctuation\">)</span></span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/blogs'</span><span class=\"token punctuation\">,</span> blogsRouter<span class=\"token punctuation\">)</span>  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>we could register it to be only executed with path <i>/api/blogs</i> routes: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// use the middleware only in /api/blogs routes</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/blogs'</span><span class=\"token punctuation\">,</span> userExtractor<span class=\"token punctuation\">,</span> blogsRouter<span class=\"token punctuation\">)</span></span>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>As can be seen, this happens by chaining multiple middlewares as the parameter of function <i>use</i>. It would also be possible to register a middleware only for a specific operation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> userExtractor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>4.23*:  bloglist expansion, step11</h4>\n<p>After adding token-based authentication the tests for adding a new blog broke down. Fix the tests. Also, write a new test to ensure adding a blog fails with the proper status code <i>401 Unauthorized</i> if a token is not provided.</p>\n<p><a href=\"https://github.com/visionmedia/supertest/issues/398\">This</a> is most likely useful when doing the fix.</p>\n<p>This is the last exercise for this part of the course and it's time to push your code to GitHub and mark all of your finished exercises to the <a href=\"https://study.cs.helsinki.fi/stats/courses/fullstack2023\">exercise submission system</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/f800638504cdf371a12947fc31d52030/part-4.svg"},"part":4,"letter":"d","lang":"en"}}},"pageContext":{"part":4,"letter":"d","lang":"en"}},"staticQueryHashes":["3128451518"]}