{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part7/webpack","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Developing with React was notorious for requiring tools that were very difficult to configure. These days, getting started with React development is almost painless thanks to <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a>. A better development workflow has probably never existed for browser-side JavaScript development.</p>\n<p>We cannot rely on the black magic of create-react-app forever and it's time for us to take a look under the hood. One of the key players in making React applications functional is a tool called <a href=\"https://webpack.js.org/\">webpack</a>.</p>\n<h3>Bundling</h3>\n<p>We have implemented our applications by dividing our code into separate modules that have been <i>imported</i> to places that require them. Even though ES6 modules are defined in the ECMAScript standard, the older browsers do not know how to handle code that is divided into modules.</p>\n<p>For this reason, code that is divided into modules must be <i>bundled</i> for browsers, meaning that all of the source code files are transformed into a single file that contains all of the application code. When we deployed our React frontend to production in <a href=\"/en/part3/deploying_app_to_internet\">part 3</a>, we performed the bundling of our application with the <em>npm run build</em> command. Under the hood, the npm script bundles the source code using webpack, which produces the following collection of files in the <i>build</i> directory:</p>\n<pre>\n.\n├── asset-manifest.json\n├── favicon.ico\n├── index.html\n├── logo192.png\n├── logo512.png\n├── manifest.json\n├── robots.txt\n└── static\n    ├── css\n    │   ├── main.1becb9f2.css\n    │   └── main.1becb9f2.css.map\n    └── js\n        ├── main.88d3369d.js\n        ├── main.88d3369d.js.LICENSE.txt\n        └── main.88d3369d.js.map\n</pre>\n<p>The <i>index.html</i> file located at the root of the build directory is the \"main file\" of the application which loads the bundled JavaScript file with a <i>script</i> tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token name\">doctype</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>React App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>defer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/js/main.88d3369d.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/css/main.1becb9f2.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As we can see from the example application that was created with create-react-app, the build script also bundles the application's CSS files into a single <i>/static/css/main.1becb9f2.css</i> file.</p>\n<p>In practice, bundling is done so that we define an entry point for the application, which typically is the <i>index.js</i> file. When webpack bundles the code, it includes all of the code that the entry point imports, the code that its imports import, and so on.</p>\n<p>Since part of the imported files are packages like React, Redux, and Axios, the bundled JavaScript file will also contain the contents of each of these libraries.</p>\n<blockquote>\n<p>The old way of dividing the application's code into multiple files was based on the fact that the <i>index.html</i> file loaded all of the separate JavaScript files of the application with the help of script tags. This resulted in  decreased performance, since the loading of each separate file results in some overhead. For this reason, these days the preferred method is to bundle the code into a single file.</p>\n</blockquote>\n<p>Next, we will create a suitable webpack configuration for a React application by hand from scratch.</p>\n<p>Let's create a new directory for the project with the following subdirectories (<i>build</i> and <i>src</i>) and files:</p>\n<pre>\n├── build\n├── package.json\n├── src\n│   └── index.js\n└── webpack.config.js\n</pre>\n<p>The contents of the <i>package.json</i> file can e.g. be the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-part7\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"practising webpack\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's install webpack with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev webpack webpack<span class=\"token operator\">-</span>cli</code></pre></div>\n<p>We define the functionality of webpack in the <i>webpack.config.js</i> file, which we initialize with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">config</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<p><strong>Note:</strong> it would be possible to make the definition directly as an object instead of a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<p>An object will suffice in many situations, but we will later need certain features that require the definition to be done as a function.</p>\n<p>We will then define a new npm script called <i>build</i> that will execute the bundling with webpack:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode=development\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Let's add some more code to the <i>src/index.js</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we execute the <em>npm run build</em> command, our application code will be bundled by webpack. The operation will produce a new <i>main.js</i> file that is added under the <i>build</i> directory:</p>\n<picture><img src=\"/static/6623c58f8e23bac7e1ffdf0a7f7e38b5/5a190/19x.png\" alt=\"terminal output webpack npm run build\" srcset=\"/static/6623c58f8e23bac7e1ffdf0a7f7e38b5/772e8/19x.png 200w,\n/static/6623c58f8e23bac7e1ffdf0a7f7e38b5/e17e5/19x.png 400w,\n/static/6623c58f8e23bac7e1ffdf0a7f7e38b5/5a190/19x.png 800w,\n/static/6623c58f8e23bac7e1ffdf0a7f7e38b5/7bf07/19x.png 1128w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The file contains a lot of stuff that looks quite interesting. We can also see the code we wrote earlier at the end of the file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"const hello = name => {\\n  console.log(`hello ${name}`)\\n}\\n\\n//# sourceURL=webpack://webpack-osa7/./src/index.js?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let's add an <i>App.js</i> file under the <i>src</i> directory with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Let's import and use the <i>App</i> module in the <i>index.js</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When we bundle the application again with the <em>npm run build</em> command, we notice that webpack has acknowledged both files:</p>\n<picture><img src=\"/static/9d621ec9dc3c08bcbccbed468cd0bbad/5a190/20x.png\" alt=\"terminal output showing webpack generated two files\" srcset=\"/static/9d621ec9dc3c08bcbccbed468cd0bbad/772e8/20x.png 200w,\n/static/9d621ec9dc3c08bcbccbed468cd0bbad/e17e5/20x.png 400w,\n/static/9d621ec9dc3c08bcbccbed468cd0bbad/5a190/20x.png 800w,\n/static/9d621ec9dc3c08bcbccbed468cd0bbad/e6c84/20x.png 1148w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Our application code can be found at the end of the bundle file in a rather obscure format:</p>\n<picture><img src=\"/static/8a3ccc546419b32daee82ee83c264bc6/5a190/20z.png\" alt=\"terminal output showing our minified code\" srcset=\"/static/8a3ccc546419b32daee82ee83c264bc6/772e8/20z.png 200w,\n/static/8a3ccc546419b32daee82ee83c264bc6/e17e5/20z.png 400w,\n/static/8a3ccc546419b32daee82ee83c264bc6/5a190/20z.png 800w,\n/static/8a3ccc546419b32daee82ee83c264bc6/b5cea/20z.png 1140w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Configuration file</h3>\n<p>Let's take a closer look at the contents of our current <i>webpack.config.js</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">config</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<p>The configuration file has been written in JavaScript and the function returning the configuration object is exported using Node's module syntax. </p>\n<p>Our minimal configuration definition almost explains itself. The <a href=\"https://webpack.js.org/concepts/#entry\">entry</a> property of the configuration object specifies the file that will serve as the entry point for bundling the application.</p>\n<p>The <a href=\"https://webpack.js.org/concepts/#output\">output</a> property defines the location where the bundled code will be stored. The target directory must be defined as an <i>absolute path</i>, which is easy to create with the <a href=\"https://nodejs.org/docs/latest-v8.x/api/path.html#path_path_resolve_paths\">path.resolve</a> method. We also use <a href=\"https://nodejs.org/docs/latest/api/globals.html#globals_dirname\">__dirname</a> which is a global variable in Node that stores the path to the current directory.</p>\n<h3>Bundling React</h3>\n<p>Next, let's transform our application into a minimal React application. Let's install the required libraries:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> react react-dom</code></pre></div>\n<p>And let's turn our application into a React application by adding the familiar definitions in the <i>index.js</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We will also make the following changes to the <i>App.js</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span> <span class=\"token comment\">// we need this now also in component files</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      hello webpack\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>We still need the <i>build/index.html</i> file  that will serve as the \"main page\" of our application that will load our bundled JavaScript code with a <i>script</i> tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>React App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>When we bundle our application, we run into the following problem:</p>\n<picture><img src=\"/static/b6eb99281352db9d837d8dbc83208968/5a190/21x.png\" alt=\"webpack terminal failed loader needed\" srcset=\"/static/b6eb99281352db9d837d8dbc83208968/772e8/21x.png 200w,\n/static/b6eb99281352db9d837d8dbc83208968/e17e5/21x.png 400w,\n/static/b6eb99281352db9d837d8dbc83208968/5a190/21x.png 800w,\n/static/b6eb99281352db9d837d8dbc83208968/d56e1/21x.png 1130w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Loaders</h3>\n<p>The error message from webpack states that we may need an appropriate <i>loader</i> to bundle the <i>App.js</i> file correctly. By default, webpack only knows how to deal with plain JavaScript. Although we may have become unaware of it, we are using <a href=\"https://facebook.github.io/jsx/\">JSX</a> for rendering our views in React. To illustrate this, the following code is not regular JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      hello webpack\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The syntax used above comes from JSX and it provides us with an alternative way of defining a React element for an HTML <i>div</i> tag.</p>\n<p>We can use <a href=\"https://webpack.js.org/concepts/loaders/\">loaders</a> to inform webpack of the files that need to be processed before they are bundled.</p>\n<p>Let's configure a loader to our application that transforms the JSX code into regular JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">config</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">          test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">          loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">          options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">            presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<p>Loaders are defined under the <i>module</i> property in the <i>rules</i> array.</p>\n<p>The definition of a single loader consists of three parts:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <i>test</i> property specifies that the loader is for files that have names ending with <i>.js</i>. The <i>loader</i> property specifies that the processing for those files will be done with <a href=\"https://github.com/babel/babel-loader\">babel-loader</a>. The <i>options</i> property is used for specifying parameters for the loader, which configure its functionality.</p>\n<p>Let's install the loader and its required packages as a <i>development dependency</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install @babel<span class=\"token operator\">/</span>core babel<span class=\"token operator\">-</span>loader @babel<span class=\"token operator\">/</span>preset<span class=\"token operator\">-</span>react <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>Bundling the application will now succeed.</p>\n<p>If we make some changes to the <i>App</i> component and take a look at the bundled code, we notice that the bundled version of the component looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  react__WEBPACK_IMPORTED_MODULE_0___default<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'hello webpack'</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>As we can see from the example above, the React elements that were written in JSX are now created with regular JavaScript by using React's <a href=\"https://reactjs.org/docs/react-without-jsx.html\">createElement</a> function.</p>\n<p>You can test the bundled application by opening the <i>build/index.html</i> file with the <i>open file</i> functionality of your browser:</p>\n<picture><img src=\"/static/8ea4fcb4865031a1f62babc133bdb1bb/5a190/22.png\" alt=\"browser hello webpack\" srcset=\"/static/8ea4fcb4865031a1f62babc133bdb1bb/772e8/22.png 200w,\n/static/8ea4fcb4865031a1f62babc133bdb1bb/e17e5/22.png 400w,\n/static/8ea4fcb4865031a1f62babc133bdb1bb/5a190/22.png 800w,\n/static/8ea4fcb4865031a1f62babc133bdb1bb/c1b63/22.png 1200w,\n/static/8ea4fcb4865031a1f62babc133bdb1bb/d4e7f/22.png 1416w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It's worth noting that if the bundled application's source code uses <i>async/await</i>, the browser will not render anything on some browsers. <a href=\"https://stackoverflow.com/questions/33527653/babel-6-regeneratorruntime-is-not-defined\">Googling the error message in the console</a> will shed some light on the issue. With the <a href=\"https://babeljs.io/docs/en/babel-polyfill/\">previous solution</a> being deprecated we now have to install two more missing dependencies, that is <a href=\"https://www.npmjs.com/package/core-js\">core-js</a> and <a href=\"https://www.npmjs.com/package/regenerator-runtime\">regenerator-runtime</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> core-js regenerator-runtime</code></pre></div>\n<p>You need to import those dependencies at the top of the <i>index.js</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'core-js/stable/index.js'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'regenerator-runtime/runtime.js'</span></code></pre></div>\n<p>Our configuration contains nearly everything that we need for React development.</p>\n<h3>Transpilers</h3>\n<p>The process of transforming code from one form of JavaScript to another is called <a href=\"https://en.wiktionary.org/wiki/transpile\">transpiling</a>. The general definition of the term is to compile source code by transforming it from one language to another.</p>\n<p>By using the configuration from the previous section, we are <i>transpiling</i> the code containing JSX into regular JavaScript with the help of <a href=\"https://babeljs.io/\">babel</a>, which is currently the most popular tool for the job.</p>\n<p>As mentioned in part 1, most browsers do not support the latest features that were introduced in ES6 and ES7, and for this reason, the code is usually transpiled to a version of JavaScript that implements the ES5 standard.</p>\n<p>The transpilation process that is executed by Babel is defined with <i>plugins</i>. In practice, most developers use ready-made <a href=\"https://babeljs.io/docs/plugins/\">presets</a> that are groups of pre-configured plugins.</p>\n<p>Currently, we are using the <a href=\"https://babeljs.io/docs/plugins/preset-react/\">@babel/preset-react</a> preset for transpiling the source code of our application:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">]</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's add the <a href=\"https://babeljs.io/docs/plugins/preset-env/\">@babel/preset-env</a> plugin that contains everything needed to take code using all of the latest features and transpile it to code that is compatible with the ES5 standard:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n  loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">]</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's install the preset with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install @babel<span class=\"token operator\">/</span>preset<span class=\"token operator\">-</span>env <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>When we transpile the code, it gets transformed into old-school JavaScript. The definition of the transformed <i>App</i> component looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> _react2<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello webpack'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As we can see, variables are declared with the <em>var</em> keyword as ES5 JavaScript does not understand the <em>const</em> keyword. Arrow functions are also not used, which is why the function definition used the <em>function</em> keyword.</p>\n<h3>CSS</h3>\n<p>Let's add some CSS to our application. Let's create a new <i>src/index.css</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #dee8e4<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then let's use the style in the <i>App</i> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\n      hello webpack\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And we import the style in the <i>index.js</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span></code></pre></div>\n<p>This will cause the transpilation process to break:</p>\n<picture><img src=\"/static/a75bfc090999f5cbc3c9e14ae091fec6/5a190/23x.png\" alt=\"webpack failure missing loader for css/style\" srcset=\"/static/a75bfc090999f5cbc3c9e14ae091fec6/772e8/23x.png 200w,\n/static/a75bfc090999f5cbc3c9e14ae091fec6/e17e5/23x.png 400w,\n/static/a75bfc090999f5cbc3c9e14ae091fec6/5a190/23x.png 800w,\n/static/a75bfc090999f5cbc3c9e14ae091fec6/d56e1/23x.png 1130w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>When using CSS, we have to use <a href=\"https://webpack.js.org/loaders/css-loader/\">css</a> and <a href=\"https://webpack.js.org/loaders/style-loader/\">style</a> loaders:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n      loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The job of the <a href=\"https://webpack.js.org/loaders/css-loader/\">css loader</a> is to load the <i>CSS</i> files and the job of the <a href=\"https://webpack.js.org/loaders/style-loader/\">style loader</a> is to generate and inject a <i>style</i> element that contains all of the styles of the application.</p>\n<p>With this configuration, the CSS definitions are included in the <i>main.js</i> file of the application. For this reason, there is no need to separately import the <i>CSS</i> styles in the main <i>index.html</i> file of the application.</p>\n<p>If needed, the application's CSS can also be generated into its own separate file by using the <a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\">mini-css-extract-plugin</a>.</p>\n<p>When we install the loaders:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install style<span class=\"token operator\">-</span>loader css<span class=\"token operator\">-</span>loader <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre></div>\n<p>The bundling will succeed once again and the application gets new styles. </p>\n<h3>Webpack-dev-server</h3>\n<p>The current configuration makes it possible to develop our application but the workflow is awful (to the point where it resembles the development workflow with Java). Every time we make a change to the code, we have to bundle it and refresh the browser to test the code.</p>\n<p>The <a href=\"https://webpack.js.org/guides/development/#using-webpack-dev-server\">webpack-dev-server</a> offers a solution to our problems. Let's install it with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev webpack<span class=\"token operator\">-</span>dev<span class=\"token operator\">-</span>server</code></pre></div>\n<p>Let's define an npm script for starting the dev server:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode=development\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack serve --mode=development\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's also add a new <i>devServer</i> property to the configuration object in the <i>webpack.config.js</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">static</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    compress<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    port<span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <em>npm start</em> command will now start the dev-server at port 3000, meaning that our application will be available by visiting <a href=\"http://localhost:3000\">http://localhost:3000</a> in the browser. When we make changes to the code, the browser will automatically refresh the page.</p>\n<p>The process for updating the code is fast. When we use the dev-server, the code is not bundled the usual way into the <i>main.js</i> file. The result of the bundling exists only in memory.</p>\n<p>Let's extend the code by changing the definition of the <i>App</i> component as shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\n      hello webpack <span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span> clicks\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        press\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The application works nicely and the development workflow is quite smooth.</p>\n<h3>Source maps</h3>\n<p>Let's extract the click handler into its own function and store the previous value of the counter in its own <i>values</i> state:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">,</span> setValues<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\n      hello webpack <span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span> clicks\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>        press\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The application no longer works and the console will display the following error:</p>\n<picture><img src=\"/static/d955153075effad2f55449f9bc711b7d/5a190/25.png\" alt=\"devtools console cannot concat on undefined in handleClick\" srcset=\"/static/d955153075effad2f55449f9bc711b7d/772e8/25.png 200w,\n/static/d955153075effad2f55449f9bc711b7d/e17e5/25.png 400w,\n/static/d955153075effad2f55449f9bc711b7d/5a190/25.png 800w,\n/static/d955153075effad2f55449f9bc711b7d/c1b63/25.png 1200w,\n/static/d955153075effad2f55449f9bc711b7d/29007/25.png 1600w,\n/static/d955153075effad2f55449f9bc711b7d/019a6/25.png 1818w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We know that the error is in the onClick method, but if the application was any larger the error message would be quite difficult to track down:</p>\n<pre>\nApp.js:27 Uncaught TypeError: Cannot read property 'concat' of undefined\n    at handleClick (App.js:27)\n</pre>\n<p>The location of the error indicated in the message does not match the actual location of the error in our source code. If we click the error message, we notice that the displayed source code does not resemble our application code:</p>\n<picture><img src=\"/static/4f39053cc754c5c6fee8aacc57932e5b/5a190/26.png\" alt=\"devtools source does not show our source code\" srcset=\"/static/4f39053cc754c5c6fee8aacc57932e5b/772e8/26.png 200w,\n/static/4f39053cc754c5c6fee8aacc57932e5b/e17e5/26.png 400w,\n/static/4f39053cc754c5c6fee8aacc57932e5b/5a190/26.png 800w,\n/static/4f39053cc754c5c6fee8aacc57932e5b/c1b63/26.png 1200w,\n/static/4f39053cc754c5c6fee8aacc57932e5b/29007/26.png 1600w,\n/static/4f39053cc754c5c6fee8aacc57932e5b/e0577/26.png 1796w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Of course, we want to see our actual source code in the error message.</p>\n<p>Luckily, fixing the error message in this respect is quite easy. We will ask webpack to generate a so-called <a href=\"https://webpack.js.org/configuration/devtool/\">source map</a> for the bundle, which makes it possible to <i>map errors</i> that occur during the execution of the bundle to the corresponding part in the original source code.</p>\n<p>The source map can be generated by adding a new <i>devtool</i> property to the configuration object with the value 'source-map':</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  devtool<span class=\"token operator\">:</span> <span class=\"token string\">'source-map'</span><span class=\"token punctuation\">,</span></span>  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Webpack has to be restarted when we make changes to its configuration. It is also possible to make webpack watch for changes made to itself but we will not do that this time.</p>\n<p>The error message is now a lot better </p>\n<picture><img src=\"/static/33ebbea5e0039ad48406c2e96251bbe1/5a190/27.png\" alt=\"devtools console showing concat error at different line\" srcset=\"/static/33ebbea5e0039ad48406c2e96251bbe1/772e8/27.png 200w,\n/static/33ebbea5e0039ad48406c2e96251bbe1/e17e5/27.png 400w,\n/static/33ebbea5e0039ad48406c2e96251bbe1/5a190/27.png 800w,\n/static/33ebbea5e0039ad48406c2e96251bbe1/c1b63/27.png 1200w,\n/static/33ebbea5e0039ad48406c2e96251bbe1/29007/27.png 1600w,\n/static/33ebbea5e0039ad48406c2e96251bbe1/24def/27.png 1812w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>since it refers to the code we wrote:</p>\n<picture><img src=\"/static/3882c0f14f62cd02164f40b286cf77ae/5a190/27eb.png\" alt=\"devtools source showing our actual code with values.concat\" srcset=\"/static/3882c0f14f62cd02164f40b286cf77ae/772e8/27eb.png 200w,\n/static/3882c0f14f62cd02164f40b286cf77ae/e17e5/27eb.png 400w,\n/static/3882c0f14f62cd02164f40b286cf77ae/5a190/27eb.png 800w,\n/static/3882c0f14f62cd02164f40b286cf77ae/c1b63/27eb.png 1200w,\n/static/3882c0f14f62cd02164f40b286cf77ae/29007/27eb.png 1600w,\n/static/3882c0f14f62cd02164f40b286cf77ae/8454b/27eb.png 1798w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Generating the source map also makes it possible to use the Chrome debugger:</p>\n<picture><img src=\"/static/bb151364932b1f79c65be3317e9e2d7d/5a190/28.png\" alt=\"devtools debugger paused just before offending line\" srcset=\"/static/bb151364932b1f79c65be3317e9e2d7d/772e8/28.png 200w,\n/static/bb151364932b1f79c65be3317e9e2d7d/e17e5/28.png 400w,\n/static/bb151364932b1f79c65be3317e9e2d7d/5a190/28.png 800w,\n/static/bb151364932b1f79c65be3317e9e2d7d/c1b63/28.png 1200w,\n/static/bb151364932b1f79c65be3317e9e2d7d/29007/28.png 1600w,\n/static/bb151364932b1f79c65be3317e9e2d7d/c95f0/28.png 1842w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Let's fix the bug by initializing the state of <i>values</i> as an empty array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">,</span> setValues<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Minifying the code</h3>\n<p>When we deploy the application to production, we are using the <i>main.js</i> code bundle that is generated by webpack. The size of the <i>main.js</i> file is 1009487 bytes even though our application only contains a few lines of our code. The large file size is because the bundle also contains the source code for the entire React library. The size of the bundled code matters since the browser has to load the code when the application is first used. With high-speed internet connections, 1009487 bytes is not an issue, but if we were to keep adding more external dependencies, loading speeds could become an issue, particularly for mobile users.</p>\n<p>If we inspect the contents of the bundle file, we notice that it could be greatly optimized in terms of file size by removing all of the comments. There's no point in manually optimizing these files, as there are many existing tools for the job.</p>\n<p>The optimization process for JavaScript files is called <i>minification</i>. One of the leading tools intended for this purpose is <a href=\"http://lisperator.net/uglifyjs/\">UglifyJS</a>.</p>\n<p>Starting from version 4 of webpack, the minification plugin does not require additional configuration to be used. It is enough to modify the npm script in the <i>package.json</i> file to specify that webpack will execute the bundling of the code in <i>production</i> mode:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-part7\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"practising webpack\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode=production\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack serve --mode=development\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we bundle the application again, the size of the resulting <i>main.js</i> decreases substantially:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ ls <span class=\"token operator\">-</span>l build<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span>js\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span>  <span class=\"token number\">1</span> mluukkai  <span class=\"token constant\">ATKK</span>\\hyad<span class=\"token operator\">-</span>all  <span class=\"token number\">227651</span> Feb  <span class=\"token number\">7</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">58</span> build<span class=\"token operator\">/</span>main<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>The output of the minification process resembles old-school C code; all of the comments and even unnecessary whitespace and newline characters have been removed, and variable names have been replaced with a single character.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span> e<span class=\"token operator\">=</span><span class=\"token function\">u</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>d<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> t<span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">=</span>c<span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>f<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">&amp;&amp;</span>s<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>f<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>t<span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span>s<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">===</span>clearTimeout<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">===</span>l<span class=\"token operator\">||</span><span class=\"token operator\">!</span>o<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>clearTimeout<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> o<span class=\"token operator\">=</span>clearTimeout<span class=\"token punctuation\">,</span><span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span><span class=\"token function\">o</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">o</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">o</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>a<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">nextTick</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span> t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Development and production configuration</h3>\n<p>Next, let's add a backend to our application by repurposing the now-familiar note application backend.</p>\n<p>Let's store the following content in the <i>db.json</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"notes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML is easy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5a3b8481bb01f9cb00ccb4a9\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mongo can save js objects\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5a3b920a61e8c8d3f484bdd0\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our goal is to configure the application with webpack in such a way that, when used locally, the application uses the json-server available in port 3001 as its backend.</p>\n<p>The bundled file will then be configured to use the backend available at the <a href=\"https://notes2023.fly.dev/api/notes\">https://notes2023.fly.dev/api/notes</a> URL.</p>\n<p>We will install <i>axios</i>, start the json-server, and then make the necessary changes to the application. For the sake of changing things up, we will fetch the notes from the backend with our <a href=\"/en/part7/custom_hooks\">custom hook</a> called <em>useNotes</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useNotes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> notes</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">,</span> setValues<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://notes2023.fly.dev/api/notes'</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token function\">useNotes</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\n      hello webpack <span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span> clicks\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>press<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span> notes on server <span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>The address of the backend server is currently hardcoded in the application code. How can we change the address in a controlled fashion to point to the production backend server when the code is bundled for production?</p>\n<p>Webpack's configuration function has two parameters, <i>env</i> and <i>argv</i>. We can use the latter to find out the <i>mode</i> defined in the npm script:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">config</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> argv</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'argv.mode:'</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<p>Now, if we want, we can set Webpack to work differently depending on whether the application's operating environment, or <i>mode</i>, is set to production or development.</p>\n<p>We can also use webpack's <a href=\"https://webpack.js.org/plugins/define-plugin/\">DefinePlugin</a> for defining <i>global default constants</i> that can be used in the bundled code. Let's define a new global constant <i>BACKEND_URL</i> that gets a different value depending on the environment that the code is being bundled for:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">config</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> argv</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'argv'</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> backend_url <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">?</span> <span class=\"token string\">'https://notes2023.fly.dev/api/notes'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:3001/notes'</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">static</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      compress<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      port<span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    devtool<span class=\"token operator\">:</span> <span class=\"token string\">'source-map'</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token constant\">BACKEND_URL</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>backend_url<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">]</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<p>The global constant is used in the following way in the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">,</span> setValues<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token function\">useNotes</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BACKEND_URL</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\n      hello webpack <span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span> clicks\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>press<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span> notes on server <span class=\"token punctuation\">{</span><span class=\"token constant\">BACKEND_URL</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the configuration for development and production differs a lot, it may be a good idea to <a href=\"https://webpack.js.org/guides/production/\">separate the configuration</a> of the two into their own files.</p>\n<p>Now, if the application is started with the command <em>npm start</em> in development mode, it fetches the notes from the address <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a>. The version bundled with the command <em>npm run build</em> uses the address <a href=\"https://notes2023.fly.dev/api/notes\">https://notes2023.fly.dev/api/notes</a> to get the list of notes.</p>\n<p>We can inspect the bundled production version of the application locally by executing the following command in the <i>build</i> directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npx <span class=\"token keyword\">static</span><span class=\"token operator\">-</span>server</code></pre></div>\n<p>By default, the bundled application will be available at <a href=\"http://localhost:9080\">http://localhost:9080</a>.</p>\n<h3>Polyfill</h3>\n<p>Our application is finished and works with all relatively recent versions of modern browsers, except for Internet Explorer. The reason for this is that, because of <em>axios</em>, our code uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promises</a>, and no existing version of IE supports them:</p>\n<picture><img src=\"/static/0b5aa155e9eeeb0dea280553e56d89d4/5a190/29.png\" alt=\"browser compatibility chart highlighting how bad internet explorer is\" srcset=\"/static/0b5aa155e9eeeb0dea280553e56d89d4/772e8/29.png 200w,\n/static/0b5aa155e9eeeb0dea280553e56d89d4/e17e5/29.png 400w,\n/static/0b5aa155e9eeeb0dea280553e56d89d4/5a190/29.png 800w,\n/static/0b5aa155e9eeeb0dea280553e56d89d4/c1b63/29.png 1200w,\n/static/0b5aa155e9eeeb0dea280553e56d89d4/7be33/29.png 1558w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>There are many other things in the standard that IE does not support. Something as harmless as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">find</a> method of JavaScript arrays exceeds the capabilities of IE:</p>\n<picture><img src=\"/static/7903d766241ce1c0e22e026d9ab9e012/5a190/30.png\" alt=\"browser compatibility chart showing IE does not support find method\" srcset=\"/static/7903d766241ce1c0e22e026d9ab9e012/772e8/30.png 200w,\n/static/7903d766241ce1c0e22e026d9ab9e012/e17e5/30.png 400w,\n/static/7903d766241ce1c0e22e026d9ab9e012/5a190/30.png 800w,\n/static/7903d766241ce1c0e22e026d9ab9e012/c1b63/30.png 1200w,\n/static/7903d766241ce1c0e22e026d9ab9e012/0f882/30.png 1584w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>In these situations, it is not enough to transpile the code, as transpilation simply transforms the code from a newer version of JavaScript to an older one with wider browser support. IE understands Promises syntactically but it simply has not implemented their functionality. The <em>find</em> property of arrays in IE is simply <i>undefined</i>.</p>\n<p>If we want the application to be IE-compatible, we need to add a <a href=\"https://remysharp.com/2010/10/08/what-is-a-polyfill\">polyfill</a>, which is code that adds the missing functionality to older browsers.</p>\n<p>Polyfills can be added with the help of <a href=\"https://babeljs.io/docs/usage/polyfill/\">webpack and Babel</a> or by installing one of many existing polyfill libraries.</p>\n<p>The polyfill provided by the <a href=\"https://www.npmjs.com/package/promise-polyfill\">promise-polyfill</a> library is easy to use. We simply have to add the following to our existing application code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PromisePolyfill <span class=\"token keyword\">from</span> <span class=\"token string\">'promise-polyfill'</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>Promise<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span>Promise <span class=\"token operator\">=</span> PromisePolyfill\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the global <em>Promise</em> object does not exist, meaning that the browser does not support Promises, the polyfilled Promise is stored in the global variable. If the polyfilled Promise is implemented well enough, the rest of the code should work without issues.</p>\n<p>One exhaustive list of existing polyfills can be found <a href=\"https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills\">here</a>.</p>\n<p>The browser compatibility of different APIs can be checked by visiting <a href=\"https://caniuse.com\">https://caniuse.com</a> or <a href=\"https://developer.mozilla.org/en-US/\">Mozilla's website</a>.</p>\n<h3>Eject</h3>\n<p>The create-react-app tool uses webpack behind the scenes. If the default configuration is not enough, it is possible to <a href=\"https://create-react-app.dev/docs/available-scripts/#npm-run-eject\">eject</a> the project which will get rid of all of the black magic, and the default configuration files will be stored in the <i>config</i> directory and in a modified <i>package.json</i> file.</p>\n<p>If you eject an application created with create-react-app, there is no return and all of the configurations will have to be maintained manually. The default configuration is not trivial, and instead of ejecting from a create-react-app application, a better alternative may be to write your own webpack configuration from the get-go.</p>\n<p>Going through and reading the configuration files of an ejected application is still recommended and extremely educational.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/2184b1c35920cfc7a09e10660dea04eb/part-7.svg"},"part":7,"letter":"d","lang":"en"}}},"pageContext":{"part":7,"letter":"d","lang":"en"}},"staticQueryHashes":["3128451518"]}